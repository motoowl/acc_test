
#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЗапуска Экспорт; // Форма объекта обработки ЗапускПроверокБСП.epf в текущем сеансе при вызове с клиента.

&НаКлиенте
Перем НачалоОткрытия;

&НаКлиенте
Перем СчетчикПоискаОткрытойФормы;

&НаКлиенте
Перем ОткрытыеОкна;

&НаКлиенте
Перем СсылочныеТипы;

&НаКлиенте
Перем ПоследнийВариантПараметровОткрытияФормы;

&НаКлиенте
Перем МассивВыбранныхФорм;

&НаКлиенте
Перем НомерТестируемойСтроки;

&НаКлиенте
Перем МассивОбъектовДляВводаНаОсновании;

&НаКлиенте
Перем НомерСтрокиТекущейФормыВводимойНаОсновании;

&НаКлиенте
Перем Словарь;

&НаКлиенте
Перем ВерсияОбработки;

&НаКлиенте
Перем МассивПроверокБезОткрытияФормы;

&НаКлиенте
Перем ОкнаОткрытыеПередОткрытиемТестируемойФормы;

&НаКлиенте
Перем ТипТестируемойФормы;

&НаКлиенте
Перем КаталогВыгрузки;

&НаКлиенте
Перем ИмяВидаОбъектаВВыгрузкеФайлов;

&НаКлиенте
Перем МассивПроверяемыхКлючей;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ПутьКФайлуПротокола                      = "";
	ПутьККаталогуAllure                      = "";
	КаталогФайловОшибок                      = "";
	ДополнениеТекстаОшибки                   = "";
	ТекущийПользователь                      = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	ПутьКФайлуТаблицыПротестированныхФорм    = ПутьКПапкеОбработкиНаСервере() + "ТаблицаПротестированныхФорм.xml";
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Язык <> Неопределено Тогда
		КодЯзыкаТекущейПроверки = ПользователиИнформационнойБазы.ТекущийПользователь().Язык.КодЯзыка;
	Иначе
		КодЯзыкаТекущейПроверки = ТекущийЯзык().КодЯзыка;
	КонецЕсли;
	
	ЭтоМеждународнаяБСП = (Метаданные.ОсновнойЯзык.КодЯзыка = "en");
	
	ТекстПроВерсиюКонфигурации = СтрШаблон(
		НСтр("ru = 'Конфигурация: %1 с текущим языком пользователя: %2. Код встроенного языка: %3. Код основного языка: %4';
			 |en = 'Конфигурация: %1 с текущим языком пользователя: %2. Код встроенного языка: %3. Код основного языка: %4'"),
			НаименованиеКонфигурации(), ТекущийЯзык(), Метаданные.ВариантВстроенногоЯзыка, Метаданные.ОсновнойЯзык.КодЯзыка) + Символы.ПС;
	
	ДлительностьОткрытияФормы = МаксимальноеВремяОткрытияФорм();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоследнийВариантПараметровОткрытияФормы = "";
	СсылочныеТипы = СсылочныеТипы();
	ЗаполнитьМассивПроверокБезОткрытияФормы();
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ФайлНастроек",                                          "");
	ПараметрыЗапуска.Вставить("КаталогФайловОшибок",                                   "");
	ПараметрыЗапуска.Вставить("ПутьКФайлуПротокола",                                   "");
	ПараметрыЗапуска.Вставить("ПутьККаталогуAllure",                                   "");
	ПараметрыЗапуска.Вставить("ФайлСостояния",                                         "");
	ПараметрыЗапуска.Вставить("ТекстДляОшибки",                                        "");
	ПараметрыЗапуска.Вставить("ВариантЗапуска",                                        "Интерактивный");
	ПараметрыЗапуска.Вставить("ПутьКФайлуДопустимыхОшибокЖурналаРегистрации",          "");
	ПараметрыЗапуска.Вставить("ПутьКФайлуСловаря",            "");
	
	Парсер = ПарсерПараметровЗапуска();
	ДобавитьПараметрПарсинга(Парсер, "--ФайлНастроек");
	ДобавитьПараметрПарсинга(Парсер, "--КаталогФайловОшибок");
	ДобавитьПараметрПарсинга(Парсер, "--ПутьКФайлуПротокола");
	ДобавитьПараметрПарсинга(Парсер, "--ПутьККаталогуAllure");
	ДобавитьПараметрПарсинга(Парсер, "--ВариантЗапуска");
	ДобавитьПараметрПарсинга(Парсер, "--ФайлСостояния");
	ДобавитьПараметрПарсинга(Парсер, "--ТекстДляОшибки");
	ДобавитьПараметрПарсинга(Парсер, "--ПутьКФайлуДопустимыхОшибокЖурналаРегистрации");
	ДобавитьПараметрПарсинга(Парсер, "--ПутьКФайлуСловаря");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапуска, РаспарситьПараметрыЗапуска(Парсер, ПараметрЗапуска));
	ПолныйПутьКФайлуНастроек                              = ПараметрыЗапуска.ФайлНастроек;
	КаталогФайловОшибок                                   = ПараметрыЗапуска.КаталогФайловОшибок;
	ПутьКФайлуПротокола                                   = ПараметрыЗапуска.ПутьКФайлуПротокола;
	ПутьККаталогуAllure                                   = ПараметрыЗапуска.ПутьККаталогуAllure;
	ФайлСостояния                                         = ПараметрыЗапуска.ФайлСостояния;
	ТекстДляОшибки                                        = ПараметрыЗапуска.ТекстДляОшибки;
	ПутьКФайлуДопустимыхОшибокЖурналаРегистрации          = ПараметрыЗапуска.ПутьКФайлуДопустимыхОшибокЖурналаРегистрации;
	ПутьКФайлуСловаря                                     = ПараметрыЗапуска.ПутьКФайлуСловаря;
	
	УстановитьФайлПротоколаВремениОткрытияФорм();
	
	Словарь = ИнициализироватьСловарь();
	Если ЗначениеЗаполнено(ПутьКФайлуСловаря) Тогда
		ОбновитьСловарьИзФайловСловарей();
	КонецЕсли;
	ВыключитьНапоминанияПользователя(Словарь);
	
	ИмяВидаОбъектаВВыгрузкеФайлов = ИмяВидаОбъектаВВыгрузкеФайлов();
	
	ВариантЗапуска = СокрЛП(ПараметрыЗапуска.ВариантЗапуска);
	ЭтотОбъект.Заголовок = СтрШаблон(НСтр("ru='Дымовой тест всех форм и объектов (%1) %2';
		|en = 'Дымовой тест всех форм и объектов (%1) %2'"), ВариантЗапуска, ВерсияОбработки);
	
	УстановитьСтатусВыполнения(Истина);
	
	ЗакрытьПослеВыполнения = Истина;
	Элементы.СтраницаЗагрузка.Видимость = Ложь;
	
	Если СтрСравнить(ВариантЗапуска, "Полный") = 0 Тогда
		
		ПодключитьОбработчикОжидания("ТиповыеОперацииСОбъектамиСРазнымиФункциональнымиОпциями", 2, Истина);
		
	ИначеЕсли СтрСравнить(ВариантЗапуска, "Стандартный") = 0 Или СтрСравнить(ВариантЗапуска, "Минимальный") = 0 Тогда
		
		ПодключитьОбработчикОжидания("ОткрытиеВсехФормДемобазыПоУмолчанию", 2, Истина);
		
	ИначеЕсли СтрСравнить(ВариантЗапуска, "ФункциональныеОпцииВключены") = 0 Тогда
		
		ПодключитьОбработчикОжидания("ТиповыеОперацииСОбъектамиФункциональныеОпцииВключены", 5, Истина);
		
	ИначеЕсли СтрСравнить(ВариантЗапуска, "ФункциональныеОпцииВыключены") = 0 Тогда
		
		ПодключитьОбработчикОжидания("ТиповыеОперацииСОбъектамиФункциональныеОпцииВыключены", 5, Истина);
	
	ИначеЕсли СтрСравнить(ВариантЗапуска, "МодельСервиса") = 0 Тогда
		
		ПодключитьОбработчикОжидания("ТиповыеОперацииСОбъектамиВМоделиСервиса", 5, Истина);
		
	ИначеЕсли ВариантЗапуска = "АнализЖурналаРегистрации" Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьАнализЖурналаРегистрации", 0.5, Истина);
		
	Иначе
		ЗакрытьПослеВыполнения = Ложь;
		
		Элементы.СтраницаЗагрузка.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗагрузка;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ЭмулироватьМодельСервиса.Доступность = Ложь;
		ПодключитьОбработчикОжидания("ПервичнаяЗагрузкаНастроек", 0.3, Истина);
		
	КонецЕсли;
	
	Если ЗакрытьПослеВыполнения Тогда
		ЗакрытьОткрытыеОкна();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НайтиОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимостьВсемЭлементам(ДеревоФорм.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИскомыйТекст = СокрЛП(Текст);
	Если ПустаяСтрока(ИскомыйТекст) Тогда
		УстановитьВидимостьВсемЭлементам(ДеревоФорм.ПолучитьЭлементы());
		Возврат;
	КонецЕсли;
	
	ВидимостьПоФильтру(ДеревоФорм.ПолучитьЭлементы(), ВРег(ИскомыйТекст));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФормВыборПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДеревоФормПослеВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	
	Отбор = Новый Структура();
	Если Область = "Все" Тогда
		Элементы.ТестируемыеФормы.ОтборСтрок = Неопределено;
		Возврат;
	ИначеЕсли Область = "Выбранные" Тогда
		Отбор.Вставить("Выбор", Истина);
	ИначеЕсли Область = "По умолчанию" Тогда // АПК:1297 - не локализуется
		Отбор.Вставить("Область", "");
	Иначе
		Отбор.Вставить("Область", Элемент.ТекстРедактирования);
	КонецЕсли;
	
	Элементы.ТестируемыеФормы.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестируемыеФормыПараметрыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПараметрыОткрытияФормы", Элементы.ТестируемыеФормы.ТекущиеДанные.Параметры);
	ОткрытьФорму("ВнешняяОбработка.ОткрытиеВсехФорм.Форма.Параметры", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестируемыеФормыПриАктивизацииСтроки(Элемент)
	
	ОписаниеПараметров = Новый Массив;
	
	Если Элементы.ТестируемыеФормы.ТекущиеДанные <> Неопределено Тогда
		Для Каждого ОписаниеПараметра Из Элементы.ТестируемыеФормы.ТекущиеДанные.Параметры Цикл
			ОписаниеПараметров.Добавить(ОписаниеПараметра.Представление + " = " + Строка(ОписаниеПараметра.Значение));
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОткрытия = СтрСоединить(ОписаниеПараметров, Символы.ПС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестируемыеФормыВыбранПриИзменении(Элемент)
	
	ОпределитьКоличествоФормДляТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФормПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоФорм.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДоступностьКнопкиЗапустить = Не ПустаяСтрока(ТекущиеДанные.ПолноеИмя);
		Элементы.ТаблицаПроверкиОткрытьФормуИзСпискаОшибок.Доступность           = ДоступностьКнопкиЗапустить;
		Элементы.ДеревоФормКонтекстноеМенюОткрытьФормуИзСпискаОшибок.Доступность = ДоступностьКнопкиЗапустить;
	Иначе
		Элементы.ТаблицаПроверкиОткрытьФормуИзСпискаОшибок.Доступность           = Ложь;
		Элементы.ДеревоФормКонтекстноеМенюОткрытьФормуИзСпискаОшибок.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьТест(Команда)
	
	ВыполнитьТестОткрытияФорм();
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	
	Элементы.ДеревоФорм.Развернуть(Элементы.ДеревоФорм.ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Элементы.ДеревоФорм.Свернуть(Элементы.ДеревоФорм.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТестируемыеФормы Цикл
		СтрокаТаблицы.Выбор = Истина;
	КонецЦикла;
	
	ОпределитьКоличествоФормДляТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТестируемыеФормы Цикл
		СтрокаТаблицы.Выбор = Ложь;
	КонецЦикла;
	
	ОпределитьКоличествоФормДляТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзСпискаОшибок(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФорм.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОткрываемойФормы   = ТекущиеДанные.ПолноеИмя;
	ПараметрФормы         = Неопределено;
	ТекущиеПараметрыФормы = Неопределено;
	
	Если ПустаяСтрока(ТекущиеДанные.ТипФормы) Или (ТекущиеДанные.ТипФормы = "Недоступна") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОткрываемойФормы", ИмяОткрываемойФормы);
		Оповещение = Новый ОписаниеОповещения("ПослеВводаПараметрыОткрытияФормы", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВводСтроки(Оповещение, ПоследнийВариантПараметровОткрытияФормы,
			НСтр("ru='Введите параметры открытия формы'; en='Введите параметры открытия формы'",
			КодЯзыкаТекущейПроверки) + " "  + ИмяОткрываемойФормы,, Истина);
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Параметры.Количество() > 0 Тогда
		
		ТекущиеПараметрыФормы = Новый Структура();
		Для Каждого ПараметрФормы Из ТекущиеДанные.Параметры Цикл
			
			Если СтрРазделить(ПараметрФормы.Представление, "(<>*-/+) ").Количество() > 1 Тогда
				ТекстОшибки = НСтр("ru='В параметрах открытия формы %1 неверное имя параметра: %2';
					|en='В параметрах открытия формы %1 неверное имя параметра: %2'", КодЯзыкаТекущейПроверки);
				
				ВызватьИсключение СтрШаблон(ТекстОшибки, ИмяОткрываемойФормы, ПараметрФормы.Представление);
			КонецЕсли;
			
			ТекущиеПараметрыФормы.Вставить(ПараметрФормы.Представление, ПараметрФормы.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоКопирование = ТипЗнч(ТекущиеПараметрыФормы) = Тип("Структура")
		И ТекущиеПараметрыФормы.Свойство(ПеревестиЗначение("ЗначениеКопирования", Словарь));
	
	Попытка
		
		Если ТекущиеДанные.ТипФормы = "ФормаОтчета" Тогда
			УточнитьКонтекстФормыОтчета(ТекущиеПараметрыФормы, Словарь);
			ОткрытьФормуОтчета(ЭтаФорма, ТекущиеДанные.ВариантОтчета, Словарь, ТекущиеПараметрыФормы);
			
		ИначеЕсли ТекущиеДанные.ТипФормы = "ФормаНастроек" Тогда
			УточнитьКонтекстФормыНастроекОтчета(ТекущиеДанные.ВариантОтчета, ТекущиеПараметрыФормы, Словарь);
			ОткрытьФорму(ИмяОткрываемойФормы, ТекущиеПараметрыФормы);
			
		ИначеЕсли ТекущиеДанные.ТипФормы = "ПечатнаяФорма" Тогда
			ИмяСвойстваОбъектыПечати = ПеревестиЗначение("ОбъектыПечати", Словарь);
			УточнитьКонтекстПечатнойФормы(ТекущиеПараметрыФормы, ИмяСвойстваОбъектыПечати);
			Если ТекущиеПараметрыФормы[ИмяСвойстваОбъектыПечати].Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			ОткрытьПечатнуюФорму(ТекущиеПараметрыФормы);
			
		ИначеЕсли ТекущиеДанные.ТипФормы = "ФормированиеОтчетаБезФормы" Тогда
			СформироватьОтчетБезОткрытияФормы(ТекущиеДанные);
		
		ИначеЕсли ТекущиеДанные.ТипФормы = "РедактированиеМакета" Тогда
			ИмяОбработчикаОжидания = "ЗафиксироватьОткрытиеФормыРедактированияМакета";
			ОткрытьМакетДляРедактирования(ТекущиеДанные);
			
		ИначеЕсли ТекущиеДанные.ТипФормы = "РегламентноеЗадание" Тогда
			ЗапуститьРегламентноеЗадание(ТекущиеДанные);
			
		ИначеЕсли ТекущиеДанные.ТипФормы = "КопированиеЭлемента" Тогда
			КопироватьЭлемент(ТекущиеДанные);
			
		ИначеЕсли ТекущиеДанные.ТипФормы = "ПометкаНаУдалениеЭлемента" Тогда
			ПометитьСкопированныйЭлементНаУдаление(ТекущиеДанные);
			
		ИначеЕсли ТекущиеДанные.ТипФормы = "УдалениеПомеченногоЭлемента" Тогда
			УдалитьПомеченныйЭлемент(ТекущиеДанные);
		
		Иначе
			ОткрытьФорму(ИмяОткрываемойФормы, ТекущиеПараметрыФормы);
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Если ТекущиеДанные.Поведение.Количество() > 0 Тогда
			
			Для Каждого ОписаниеПоведения Из ТекущиеДанные.Поведение Цикл
				Если ОписаниеПоведения.Представление = "ОжидаемаяОшибка" Тогда
					Если СтрНайти(ТекстОшибки, ОписаниеПоведения.Значение) > 0 Тогда
						ТекстАвтозакрытие = НСтр("ru='(автозакрытие, ожидаемая ошибка)';
							|en='(автозакрытие, ожидаемая ошибка)'", КодЯзыкаТекущейПроверки);
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ТипТестируемойФормы = ТекущиеДанные.ТипФормы;
		
		Если ТипТестируемойФормы = "ПечатнаяФорма" Тогда
			ТипОшибки = ОшибкаОткрытияПечатнойФормы();
		ИначеЕсли ТипТестируемойФормы = "ФормаОтчета" Тогда
			ТипОшибки = ОшибкаОткрытияВариантаОтчета();
		ИначеЕсли ТипТестируемойФормы = "ФормаНастроекОтчета" Тогда
			ТипОшибки = ОшибкаОткрытияФормыНастроекОтчета();
		ИначеЕсли ТипТестируемойФормы = "КопированиеЭлемента" Тогда
			ТипОшибки = ОшибкаКопированияЭлемента();
		ИначеЕсли ТипТестируемойФормы = "ПометкаНаУдалениеЭлемента" Тогда
			ТипОшибки = ОшибкаПометкиНаУдалениеЭлемента();
		ИначеЕсли ТипТестируемойФормы = "УдалениеПомеченногоЭлемента" Тогда
			ТипОшибки = ОшибкаУдаленияПомеченногоЭлемента();
		ИначеЕсли ТипТестируемойФормы = "РегламентноеЗадание" Тогда
			ТипОшибки = ОшибкаВыполненияРегламентногоЗадания();
		ИначеЕсли ТипТестируемойФормы = "ФормированиеОтчетаБезФормы" Тогда
			ТипОшибки = ОшибкаФормированияОтчетаБезФормы();
		ИначеЕсли ТипТестируемойФормы = "РедактированиеМакета" Тогда
			ТипОшибки = ОшибкаРедактированияМакета();
		Иначе
			ТипОшибки = ?(ЭтоКопирование, ОшибкаКопированияФормы(), ОшибкаОткрытияФормы());
		КонецЕсли;
		
		КраткоеОписаниеОшибки = СтрШаблон("%1 %2", ТипОшибки, ИмяОткрываемойФормы);
		
		ДобавитьОшибкуВТаблицуПроверки(ИмяОткрываемойФормы, ТипОшибки, КраткоеОписаниеОшибки, ТекстОшибки);
		ВыполнитьПереходНаСтраницуОшибок();
		
	КонецПопытки;
	
	ПоказатьОповещениеПользователя(ИмяОткрываемойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПараметрыОткрытияФормы(Строка, ДополнительныеПараметры) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийВариантПараметровОткрытияФормы = Строка;
	
	ТекущиеПараметрыФормы = Новый Структура;
	НомерСтроки = 0;
	Пока НомерСтроки < СтрЧислоСтрок(ПоследнийВариантПараметровОткрытияФормы) Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаИзФайла = СтрокаОписанияНастроек(ПоследнийВариантПараметровОткрытияФормы, НомерСтроки,, Символы.ПС);
		
		Если ПустаяСтрока(СтрокаИзФайла) Или СтрНачинаетсяС(СокрЛ(СтрокаИзФайла), "&") Тогда
			Продолжить;
		КонецЕсли;
		
		КлючИЗначение = СтрРазделить(СтрокаИзФайла, ":");
		ИмяКлюча = СокрЛП(КлючИЗначение[0]);
		
		КлючИЗначение.Удалить(0);
		ЗначениеСтрокой = СокрЛП(СтрСоединить(КлючИЗначение, ":"));
		
		Значение = ПреобразоватьПараметрыКТипам(ЗначениеСтрокой, УникальныйИдентификатор);
		ТекущиеПараметрыФормы.Вставить(ИмяКлюча, Значение);
		
	КонецЦикла;
	
	ОткрытьФорму(ДополнительныеПараметры.ИмяОткрываемойФормы, ТекущиеПараметрыФормы);
	ПоказатьОповещениеПользователя(ДополнительныеПараметры.ИмяОткрываемойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеФормы(Команда)
	
	ОткрытиеВсехФормДемобазыПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьНастройки(Команда)
	
	СписокВыбранныхФорм = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТестируемыеФормы Цикл
		Если СтрокаТаблицы.Выбор Тогда
			СписокВыбранныхФорм.Вставить(СтрокаТаблицы.ПолноеИмя, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьФормыДляТестирования();
	
	Для Каждого СтрокаТаблицы Из ТестируемыеФормы Цикл
		СтрокаТаблицы.Выбор = СписокВыбранныхФорм[СтрокаТаблицы.ПолноеИмя] = Истина;
	КонецЦикла;
	
	ОпределитьКоличествоФормДляТестирования();
	
	Если Не ПустаяСтрока(Найти) Тогда
		ВидимостьПоФильтру(ДеревоФорм.ПолучитьЭлементы(), ВРег(Найти));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВсеТесты(Команда)
	
	ТиповыеОперацииСОбъектамиСРазнымиФункциональнымиОпциями();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестВМоделиСервиса(Команда)
	
	ТиповыеОперацииСОбъектамиВМоделиСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьВсеФункциональныеОпции(Команда)
	
	УстановитьЗначениеФункциональныхОпций(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеФункциональныеОпции(Команда)
	
	УстановитьЗначениеФункциональныхОпций(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимЭммуляцииМоделиСервиса(Команда)
	ЭмулироватьМодельСервиса(Истина, Словарь);
КонецПроцедуры

&НаКлиенте
Процедура АнализЖурналаРегистрации(Команда)
	
	АнализЖурналаРегистрацииНаПерехваченныеОшибкиВОбработкеОтображенияОшибки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапускТестирования

// Точки входа для юнит-теста.

// Тестирование без изменения функциональных опций.
//
&НаКлиенте
Процедура ОткрытиеВсехФормДемобазыПоУмолчанию()
	
	ПроверитьНеобходимостьЗавершенияРаботыТеста = Истина;
	
	УстановитьФайлПротоколаВремениОткрытияФорм();
	РежимФО = "По умолчанию"; // АПК:1297 - не локализуется
	СформироватьФайлДляAllure();
	ОпределитьФормыДляТестирования();
	ОткрытьФормыПоСписку();
	
КонецПроцедуры

// Тестирование в 3 режимах функциональных опций:
// * без изменения;
// * все функциональные опции выключена;
// * все функциональные опции включены.
//
&НаКлиенте
Процедура ТиповыеОперацииСОбъектамиСРазнымиФункциональнымиОпциями()
	
	СписокТестов.Добавить("ФункциональныеОпцииВыкл");
	СписокТестов.Добавить("ФункциональныеОпцииВкл");
	СписокТестов.Добавить("ТиповыеОперации");
	
	ПроверитьНеобходимостьЗавершенияРаботыТеста = Истина;
	
	РежимФО = "По умолчанию"; // АПК:1297 - не локализуется
	СформироватьФайлДляAllure();
	ОпределитьФормыДляТестирования();
	ОткрытьФормыПоСписку();
	
КонецПроцедуры

// Тестирование в режиме:
// * все функциональные опции включены.
//
&НаКлиенте
Процедура ТиповыеОперацииСОбъектамиФункциональныеОпцииВключены()
	
	ПроверитьНеобходимостьЗавершенияРаботыТеста = Истина;
	ОткрытиеВсехФормФункциональныеОпцииВкл();
	
КонецПроцедуры

// Тестирование в режиме:
// * все функциональные опции выключены.
//
&НаКлиенте
Процедура ТиповыеОперацииСОбъектамиФункциональныеОпцииВыключены()
	
	ПроверитьНеобходимостьЗавершенияРаботыТеста = Истина;
	ОткрытиеВсехФормФункциональныеОпцииВыкл();
	
КонецПроцедуры

// Тестирование в режиме эмуляции модели сервиса.
//
&НаКлиенте
Процедура ТиповыеОперацииСОбъектамиВМоделиСервиса()
	
	Если Не ПраваДляТестированияМоделиСервисаКорректные(Словарь) Тогда
		ПроверкаНеобходимостиЗавершенияРаботыТеста();
		Возврат;
	КонецЕсли;
	
	ЭмулироватьМодельСервиса = Истина;
	СписокТестов.Добавить("ТиповыеОперации");
	ЭмулироватьМодельСервиса(ЭмулироватьМодельСервиса, Словарь);
	
	ПроверитьНеобходимостьЗавершенияРаботыТеста = Истина;
	
	СформироватьФайлДляAllure();
	ОпределитьФормыДляТестирования();
	ОткрытьФормыПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНеобходимостиЗавершенияРаботыТеста()
	
	УстановитьСтатусВыполнения(Ложь);
	
	ПодключитьОбработчикОжидания("НеудачноеЗакрытиеПослеЗавершения", 20, Истина);
	Если ЗакрытьПослеВыполнения Тогда
		ДобавитьВЛогВремениОткрытияФорм(НСтр("ru='Закрытие после завершения через завершить работу системы.';
			|en='Закрытие после завершения через завершить работу системы.'", КодЯзыкаТекущейПроверки));
		ЗавершитьРаботуСистемы(Ложь);
	Иначе
		ДобавитьВЛогВремениОткрытияФорм(НСтр("ru='Ожидание внешнего закрытия теста после завершения.';
			|en='Ожидание внешнего закрытия теста после завершения.'", КодЯзыкаТекущейПроверки));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеВсехФормФункциональныеОпцииВыкл()
	
	РежимФО = "Функциональные опции выключены"; // АПК:1297 - не локализуется
	УстановитьЗначениеФункциональныхОпций(Ложь);
	СформироватьФайлДляAllure();
	ОпределитьФормыДляТестирования();
	ОткрытьФормыПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеВсехФормФункциональныеОпцииВкл()
	
	РежимФО = "Функциональные опции включены"; // АПК:1297 - не локализуется
	УстановитьЗначениеФункциональныхОпций(Истина);
	СформироватьФайлДляAllure();
	ОпределитьФормыДляТестирования();
	ОткрытьФормыПоСписку();
	
КонецПроцедуры

// Файл маркер. Создается в начале теста и удаляется при завершении.
//
&НаКлиенте
Процедура УстановитьСтатусВыполнения(Запуск)
	
	Если ПустаяСтрока(ФайлСостояния) Тогда
		Возврат;
	КонецЕсли;
	
	Если Запуск Тогда
		ФайлССостоянием = Новый ЗаписьТекста(ФайлСостояния, КодировкаТекста.UTF8);
		ФайлССостоянием.ЗаписатьСтроку(ТекущаяДата());
		ФайлССостоянием.Закрыть();
	Иначе
		УдалитьФайлы(ФайлСостояния); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТаблицейОткрытыхФорм

&НаСервере
Функция ПолучитьИмяФормыДляПродолженияТеста()
	
	Если ВариантЗапуска = "Интерактивный" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПроверитьФайлПротестированныхФормПредыдущегоТестаСуществует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущееИмяФормы = Неопределено;
	
	КоличествоТестируемыхФорм = ТаблицаПротестированныхФорм.Количество();
	Индекс = КоличествоТестируемыхФорм - 1;
	
	Пока Индекс >= 0 Цикл
		
		ТекущаяФорма = ТаблицаПротестированныхФорм[Индекс];
		
		Если ТекущаяФорма.ФормаОткрылась Тогда
			Возврат ?(Индекс = КоличествоТестируемыхФорм - 1, Неопределено, ТекущееИмяФормы);
		КонецЕсли;
		
		ТекущееИмяФормы = ТекущаяФорма.ПолноеИмяФормы;
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьТаблицуПротестированныхФорм()
	
	ТаблицаПротестированныхФорм.Очистить();
	
	ЗаполнитьТаблицуПротестированныхФормПоДеревуФорм();
	
	ЗаписатьТаблицуПротестированныхФормВФайл();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПротестированныхФормПоДеревуФорм(КоллекцияЭлементов = Неопределено)
	
	Если КоллекцияЭлементов = Неопределено Тогда
		КоллекцияЭлементов = ДеревоФорм.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		
		Если СтрокаДерева.Выбор = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненнаяКоллекция = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненнаяКоллекция.Количество() > 0 Тогда
			ЗаполнитьТаблицуПротестированныхФормПоДеревуФорм(ПодчиненнаяКоллекция);
			Продолжить;
		КонецЕсли;
		
		Если (СтрокаДерева.Выбор <> 1) Или ПустаяСтрока(СтрокаДерева.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьФормуВТаблицуПротестированныхФорм(СтрокаДерева.ПолноеИмя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомерТестируемойСтрокиДляПродолженияТеста()
	
	Если ВариантЗапуска = "Интерактивный" Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ЭтоСеансВнешнегоПользователя(Словарь) Тогда
		Возврат 0;
	КонецЕсли;
	
	ИмяФормыДляСтартаТеста = ПолучитьИмяФормыДляПродолженияТеста();
	Если ИмяФормыДляСтартаТеста = Неопределено Тогда
		ИмяСтартовойФормы = "";
		ИнициализироватьТаблицуПротестированныхФорм();
	Иначе
		ИмяСтартовойФормы = ИмяФормыДляСтартаТеста;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяСтартовойФормы) Тогда
		Возврат 0;
	КонецЕсли;
	
	Индекс = 0;
	Пока Индекс <= МассивВыбранныхФорм.ВГраница() Цикл
		Если ИмяСтартовойФормы = МассивВыбранныхФорм[Индекс].ПолноеИмя Тогда
			Если Индекс > 0 Тогда
				ЗаписатьОшибку("ЗависаниеТеста", МассивВыбранныхФорм[Индекс - 1].ПолноеИмя, ОшибкаЗависаниеТеста(), Неопределено);
			КонецЕсли;
			
			Возврат Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ПроверитьФайлПротестированныхФормПредыдущегоТестаСуществует()
	
	Если ВариантЗапуска = "Интерактивный" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПутьКПапкеВерсииБСП = ПутьКФайлуПротокола + ВерсияБСПБезНомераСборки();
	
	ШаблонМаски = "*_%1_ТаблицаПротестированныхФорм.xml";
	Маска = СтрШаблон(ШаблонМаски, ТекущийПользователь);
	СодержимоеПапкиВерсииБСП = НайтиФайлы(ПутьКПапкеВерсииБСП, Маска, Истина); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмя");
	ТаблицаФайлов.Колонки.Добавить("ВремяИзменения");
	
	Для Каждого Файл Из СодержимоеПапкиВерсииБСП Цикл
		
		ВремяИзмененияФайла = Файл.ПолучитьВремяИзменения();
		Если Файл.ПолноеИмя = ПутьКФайлуТаблицыПротестированныхФорм Или ВремяИзмененияФайла > ВремяНачалаТестирования Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока                = ТаблицаФайлов.Добавить();
		НоваяСтрока.ПолноеИмя      = Файл.ПолноеИмя;
		НоваяСтрока.ВремяИзменения = ВремяИзмененияФайла;
		
	КонецЦикла;
	
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаФайлов.Сортировать("ВремяИзменения Убыв");
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ТаблицаФайлов[0].ПолноеИмя);
		тзТаблицаПротестированныхФорм = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("ТаблицаЗначений"));
		ЧтениеXML.Закрыть();
		
		ЗначениеВДанныеФормы(тзТаблицаПротестированныхФорм, ТаблицаПротестированныхФорм);
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ЗаписатьТаблицуПротестированныхФормВФайл()
	
	Если ВариантЗапуска = "Интерактивный" Тогда
		Возврат;
	КонецЕсли;
	
	тзТаблицаПротестированныхФорм = РеквизитФормыВЗначение("ТаблицаПротестированныхФорм");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлуТаблицыПротестированныхФорм);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, тзТаблицаПротестированныхФорм, НазначениеТипаXML.Явное);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьДействиеВТаблицеПротестированныхФорм(Словарь, ИмяТестируемойФормы, ФормаОткрылась = Ложь, ФормаЗакрылась = Ложь)
	
	Если ВариантЗапуска = "Интерактивный" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСеансВнешнегоПользователя(Словарь) Тогда
		Возврат;
	КонецЕсли;
	
	тзТаблицаПротестированныхФорм = РеквизитФормыВЗначение("ТаблицаПротестированныхФорм");
	
	СтрокаФормы = тзТаблицаПротестированныхФорм.Найти(ИмяТестируемойФормы, "ПолноеИмяФормы");
	Если СтрокаФормы = Неопределено Тогда
		СтрокаФормы = тзТаблицаПротестированныхФорм.Добавить();
	КонецЕсли;
	
	СтрокаФормы.ПолноеИмяФормы = ИмяТестируемойФормы;
	СтрокаФормы.ФормаОткрылась = ФормаОткрылась;
	СтрокаФормы.ФормаЗакрылась = ФормаЗакрылась;
	
	ЗначениеВДанныеФормы(тзТаблицаПротестированныхФорм, ТаблицаПротестированныхФорм);
	
	ЗаписатьТаблицуПротестированныхФормВФайл();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФормуВТаблицуПротестированныхФорм(ИмяДобавляемойФормы)
	
	Если ВариантЗапуска = "Интерактивный" Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоТестируемыхФорм = ТаблицаПротестированныхФорм.Количество();
	Если КоличествоТестируемыхФорм > 0 Тогда
		ПоследняяПротестированнаяФорма = ТаблицаПротестированныхФорм[КоличествоТестируемыхФорм - 1];
		Если ПоследняяПротестированнаяФорма.ПолноеИмяФормы = ИмяДобавляемойФормы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрокаТаблицы = ТаблицаПротестированныхФорм.Добавить();
	НоваяСтрокаТаблицы.ПолноеИмяФормы = ИмяДобавляемойФормы;
	НоваяСтрокаТаблицы.ФормаОткрылась = Ложь;
	НоваяСтрокаТаблицы.ФормаЗакрылась = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ДвижокТестирования

// Процедуры и функции для открытия форм в ручном режиме.

&НаКлиенте
Процедура ТиповыеОперацииСОбъектами()
	
	СписокОшибок = Новый Массив;
	УстановитьПометкуНаУдалениеИУдалениеОбъекта(СписокОшибок, Словарь);
	
	Для Каждого ОписаниеОшибки Из СписокОшибок Цикл
		Если ОписаниеОшибки.ЭтоОшибка Тогда
			ЗаписатьОшибку("ОткрытиеФормы",
				ОписаниеОшибки.ИмяФормы,
				НСтр("ru='Ошибка при удалении объекта'; en='Ошибка при удалении объекта'",
				КодЯзыкаТекущейПроверки),
				ОписаниеОшибки.ИнформацияОбОшибке,
				ОписаниеОшибки.ТекстОшибки,
				ОписаниеОшибки.СсылкаНаОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ЗавершитьТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестОткрытияФорм()
	
	Если ФункциональныеОпции = 1 Тогда
		
		РежимФО = "Функциональные опции включены"; // АПК:1297 - не локализуется
		УстановитьЗначениеФункциональныхОпций(Истина);
		ОпределитьФормыДляТестирования();
		
	ИначеЕсли ФункциональныеОпции = 2 Тогда
		
		РежимФО = "Функциональные опции выключены"; // АПК:1297 - не локализуется
		УстановитьЗначениеФункциональныхОпций(Ложь);
		ОпределитьФормыДляТестирования();
		
	КонецЕсли;
	
	СформироватьФайлДляAllure();
	ОткрытьФормыПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормыПоСписку()
	
	ТаблицаПроверки.Очистить();
	ВыключитьНапоминанияПользователя(Словарь);
	
	НомерТестируемойСтроки = 0;
	
	СформироватьМассивОткрытыхФорм(ОткрытыеОкна);
	
	УстановитьФайлПротоколаВремениОткрытияФорм();
	КоличествоТестируемыхФорм = ПодсчитатьКоличествоВыбранныхФорм(ДеревоФорм.ПолучитьЭлементы());
	
	ЗаписатьПервоначальнуюИнформациюОТестированииВЛог(КоличествоТестируемыхФорм);
	НачатьОткрытиеТестируемыхФорм();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПервоначальнуюИнформациюОТестированииВЛог(Знач КоличествоТестируемыхФорм)
	
	ДобавитьВЛогВремениОткрытияФорм(СтрШаблон(НСтр("ru='Версия обработки: %1'; en='Версия обработки: %1'", КодЯзыкаТекущейПроверки),
		ВерсияОбработки));
	
	Система = Новый СистемнаяИнформация;
	
	ДобавитьВЛогВремениОткрытияФорм(Символы.ПС);
	ДобавитьВЛогВремениОткрытияФорм("PID= " + ПолучитьPID());
	ДобавитьВЛогВремениОткрытияФорм(СтрШаблон(НСтр("ru='Версия платформы: %1 (%2)'; en='Версия платформы: %1 (%2)'", КодЯзыкаТекущейПроверки),
		Система.ВерсияПриложения, КаталогПрограммы()));
	ДобавитьВЛогВремениОткрытияФорм(Система.ВерсияОС + " " + Строка(Формат(Система.ОперативнаяПамять / 1024, "ЧДЦ=0") ) + " Гб");
	
	ДополнительнаяИнформация = СокрЛП(НСтр("ru='Файл настроек:'; en='Файл настроек:'", КодЯзыкаТекущейПроверки) + " " + ПолныйПутьКФайлуНастроек + Символы.ПС + РежимФО);
	ДобавитьВЛогВремениОткрытияФорм(ДополнительнаяИнформация);
	ТекстСообщения = СтрШаблон(НСтр("ru='Запуск [%1] БСП %2. Пользователь: %3. Форм для тестирования: %4'; en='Запуск [%1] БСП %2. Пользователь: %3. Форм для тестирования: %4'", КодЯзыкаТекущейПроверки),
		СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), ";", ""),
		ВерсияБСП(), ТекущийПользователь, Строка(КоличествоТестируемыхФорм));
	ТекстСообщения = ТекстСообщения + ?(ЭмулироватьМодельСервиса, НСтр("ru='Эмуляция модели сервиса'; en='Эмуляция модели сервиса'", КодЯзыкаТекущейПроверки), "");
	
	ДобавитьВЛогВремениОткрытияФорм(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьPID()
	
	ИдентификаторПроцесса = -1;
	
	Попытка
		Локатор = Новый COMОбъект("WbemScripting.SWbemLocator");
		Сервис = Локатор.ConnectServer(".", "root\CIMV2");
		ОбъектShell = Новый COMОбъект("WScript.Shell");
		Приложение = ОбъектShell.Exec("rundll32.exe kernel32,Sleep");
		ДочернийПроцесс = Сервис.Get("Win32_Process.Handle=" + Формат(Приложение.ProcessID, "ЧГ=0"));
		ИдентификаторПроцесса = ДочернийПроцесс.ParentProcessID;
		ДочернийПроцесс.Terminate();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат НСтр("ru='При определение ID сервера возникла ошибка:'; en='При определение ID сервера возникла ошибка:'", КодЯзыкаТекущейПроверки) + " " + ТекстОшибки;
	КонецПопытки;
	
	Возврат ИдентификаторПроцесса;
	
КонецФункции

&НаКлиенте
Процедура НачатьОткрытиеТестируемыхФорм()
	
	ВыгрузитьКонфигурациюВXML();
	
	ВремяНачалаТестирования = ТекущаяДата();
	ВремяНачалаТестированияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	МассивВыбранныхФорм = Новый Массив;
	ЗаполнитьСписокВыбранныхФорм(МассивВыбранныхФорм);
	
	ОткрытьСледующуюТестируемуюФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбранныхФорм(МассивВыбранныхФорм, КоллекцияЭлементов = Неопределено)
	
	Если КоллекцияЭлементов = Неопределено Тогда
		КоллекцияЭлементов = ДеревоФорм.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		Если СтрокаДерева.Выбор = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненнаяКоллекция = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненнаяКоллекция.Количество() > 0 Тогда
			ЗаполнитьСписокВыбранныхФорм(МассивВыбранныхФорм, ПодчиненнаяКоллекция);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Выбор <> 1 Или ПустаяСтрока(СтрокаДерева.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВыбранныхФорм.Добавить(СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСледующуюТестируемуюФорму()
	
	ОбработкаПрерыванияПользователя();
	
	Если НомерТестируемойСтроки = 0 Тогда
		НомерТестируемойСтроки = ПолучитьНомерТестируемойСтрокиДляПродолженияТеста();
	КонецЕсли;
	
	Если НомерТестируемойСтроки > МассивВыбранныхФорм.ВГраница() Тогда
		НомерТестируемойСтроки = 0;
		ЗавершитьТестирование();
		Возврат;
	КонецЕсли;
	
	СтрокаТестируемойФормы = МассивВыбранныхФорм[НомерТестируемойСтроки];
	
	НомерТестируемойСтроки = НомерТестируемойСтроки + 1;
	
	ИмяОткрываемойФормы = СтрокаТестируемойФормы.ПолноеИмя;
	
	ПараметрФормы           = Неопределено;
	ТекущаяТестируемаяФорма = СтрокаТестируемойФормы.ПолучитьИдентификатор();
	
	ТекущиеПараметрыФормы = Неопределено;
	
	Если СтрокаТестируемойФормы.Параметры.Количество() > 0 Тогда
		
		Попытка
			
			ТекущиеПараметрыФормы = Новый Структура();
			Для Каждого ПараметрФормы Из СтрокаТестируемойФормы.Параметры Цикл
				ТекущиеПараметрыФормы.Вставить(ПараметрФормы.Представление, ПараметрФормы.Значение);
			КонецЦикла;
			
		Исключение
			
			ТипОшибки = НСтр("ru = 'Ошибка при чтении параметров открытия формы из yaml-файла';
				|en = 'Ошибка при чтении параметров открытия формы из yaml-файла'", КодЯзыкаТекущейПроверки);
			Уточнение = НСтр("
				|ru = 'В yaml-файле настроек дымового теста некорректное описание параметров, которое приводит к ошибке.
				|Необходимо найти ошибку в описание параметров открытия формы (печатной формы, рег. задания и др.) и исправить ее.';
				|en = 'В yaml-файле настроек дымового теста некорректное описание параметров, которое приводит к ошибке.
				|Необходимо найти ошибку в описание параметров открытия формы (печатной формы, рег. задания и др.) и исправить ее.'
				|");
			
			СформироватьXMLФайлОшибки(ИмяОткрываемойФормы, СтрокаТестируемойФормы.Параметры, 
				ТипОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Уточнение, Истина);
			
		КонецПопытки;
		
	КонецЕсли;
	
	ВыполнитьОткрытиеФормы(ИмяОткрываемойФормы, СтрокаТестируемойФормы, ТекущиеПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТестирование()
	
	// Некоторые файлы могут не удалиться, т.к. заняты другим процессом.
	// Чтобы не прерывать завершение тестирования, обернули в попытку.
	// АПК:280-выкл
	Попытка
		УдалитьФайлы(КаталогВыгрузки); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	Исключение
	КонецПопытки;
	// АПК:280-вкл
	
	// МС
	Если ЭмулироватьМодельСервиса Тогда
		ЭмулироватьМодельСервиса(Ложь, Словарь);
		ЭмулироватьМодельСервиса = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайлаЛогированияВремени) Тогда
		НовоеИмяФайлаТестированиеЗавершено = СтрЗаменить(ПолноеИмяФайлаЛогированияВремени, ".csv", "_ок.csv");
		ПереместитьФайл(ПолноеИмяФайлаЛогированияВремени, НовоеИмяФайлаТестированиеЗавершено); // АПК:566 - дымовой тест выполняется в синхронном режиме.
		ПолноеИмяФайлаЛогированияВремени = НовоеИмяФайлаТестированиеЗавершено;
	КонецЕсли;
	
	Если СписокТестов.Количество() > 0 Тогда
		СледующийТест = СписокТестов[0];
		ЗначениеСледующегоТеста = СледующийТест.Значение;
		СписокТестов.Удалить(СледующийТест);
		
		Если ЗначениеСледующегоТеста = "ФункциональныеОпцииВыкл" Тогда
			ОткрытиеВсехФормФункциональныеОпцииВыкл();
		ИначеЕсли ЗначениеСледующегоТеста = "ФункциональныеОпцииВкл" Тогда
			ОткрытиеВсехФормФункциональныеОпцииВкл();
		ИначеЕсли ЗначениеСледующегоТеста = "ТиповыеОперации" Тогда
			ТиповыеОперацииСОбъектами();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	АнализЖурналаРегистрацииНаПерехваченныеОшибкиВОбработкеОтображенияОшибки();
	
	Если ПроверитьНеобходимостьЗавершенияРаботыТеста Тогда
		ПроверкаНеобходимостиЗавершенияРаботыТеста();
	Иначе
		ДобавитьВЛогВремениОткрытияФорм(НСтр("ru='Тестирование завершено.'; en='Тестирование завершено.'", КодЯзыкаТекущейПроверки));
		ВыполнитьПереходНаСтраницуОшибок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуНаУдалениеИУдалениеОбъекта(СписокОшибок, Словарь)
	
	Отбор = Новый Структура("Выбор", Истина);
	ВыбранныеФормыДляТеста = ТестируемыеФормы.НайтиСтроки(Отбор);
	
	Для Каждого ТестируемаяФорма Из ВыбранныеФормыДляТеста Цикл
		
		Если (Не ТестируемаяФорма.Выбор) Или (ТестируемаяФорма.Область = "НепроверяемыеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаОбъектовСПредопределенными = Новый Соответствие;
		ИменаОбъектовСПредопределенными.Вставить(ПеревестиЗначение("Справочник", Словарь), Истина);
		ИменаОбъектовСПредопределенными.Вставить(ПеревестиЗначение("ПланВидовХарактеристик", Словарь), Истина);
		ИменаОбъектовСПредопределенными.Вставить(ПеревестиЗначение("ПланСчетов", Словарь), Истина);
		ИменаОбъектовСПредопределенными.Вставить(ПеревестиЗначение("ПланВидовРасчета", Словарь), Истина);
		
		Если ТестируемаяФорма.Параметры.Количество() > 0 Тогда
		
			ТекущиеПараметрыФормы = Новый Структура();
			Для Каждого ПараметрФормы Из ТестируемаяФорма.Параметры Цикл
				
				Если (ПараметрФормы.Представление <> "Ключ") Или (Не ЗначениеЗаполнено(ПараметрФормы.Значение)) Тогда
					Продолжить;
				КонецЕсли;
				
				СсылкаНаОбъект = ПараметрФормы.Значение;
				Если Не ЕстьПравоНаЗапись(СсылкаНаОбъект) Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектМетаданных = СсылкаНаОбъект.Метаданные();
				ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
				ИмяОбъектаМетаданных = СтрРазделить(ПолноеИмя, ".")[0];
				
				Если ИменаОбъектовСПредопределенными.Получить(ИмяОбъектаМетаданных) = Истина Тогда
					
					Если ЗначениеРеквизитаОбъекта(ПараметрФормы.Значение, "Предопределенный",Словарь) = Истина Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ПроверяемыйОбъект = ПараметрФормы.Значение.ПолучитьОбъект();
				РежимУдаления = "";
				
				Попытка
					
					ТекущаяПометка = ПроверяемыйОбъект.ПометкаУдаления;
					
					РежимУдаления = "УстановитьПометкуУдаления(" + Строка(Не ТекущаяПометка) + ")";
					ПроверяемыйОбъект.УстановитьПометкуУдаления(Не ТекущаяПометка);
					
					РежимУдаления = "УстановитьПометкуУдаления(" + Строка(ТекущаяПометка) + ")";
					ПроверяемыйОбъект.УстановитьПометкуУдаления(ТекущаяПометка);
					
					РежимУдаления = "Удалить";
					ПроверяемыйОбъект.Заблокировать();
					ПроверяемыйОбъект.Удалить();
					
				Исключение
					
					Отбор = Новый Структура("ПолноеИмя", ПолноеИмя);
					НайденныеСтроки = ТестируемыеОбъекты.НайтиСтроки(Отбор);
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстОшибки = НСтр("ru='Описание ошибки'; en='Описание ошибки'", КодЯзыкаТекущейПроверки) + ": " + Строка(СсылкаНаОбъект) + " " + РежимУдаления;
					
					ОписаниеОшибки = ОписаниеОшибкиОбъекта();
					ОписаниеОшибки.ИмяФормы = ОбъектМетаданных.ПолноеИмя();
					ОписаниеОшибки.СсылкаНаОбъект = СсылкаНаОбъект;
					ОписаниеОшибки.ТекстОшибки = ТекстОшибки;
					ОписаниеОшибки.Причина = Строка(СсылкаНаОбъект) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					ОписаниеОшибки.ИнформацияОбОшибке =  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						Для Каждого СтрокиОбъекта Из НайденныеСтроки Цикл
							Для Каждого ОписаниеПоведения Из СтрокиОбъекта.Поведение Цикл
								Если (ОписаниеПоведения.Представление = "ОжидаемаяОшибка")
									И (СтрНайти(ОписаниеОшибки.Причина, ОписаниеПоведения.Значение) > 0) Тогда
									ОписаниеОшибки.ТекстОшибки = ТекстОшибки + НСтр("ru='(ожидаемая ошибка)'; en='(ожидаемая ошибка)'", КодЯзыкаТекущейПроверки);
									ОписаниеОшибки.ЭтоОшибка = Ложь;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						
					КонецЕсли;
					
					СписокОшибок.Добавить(ОписаниеОшибки);
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеОшибкиОбъекта()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФормы", "");
	Результат.Вставить("СсылкаНаОбъект", "");
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Причина", "");
	Результат.Вставить("ИнформацияОбОшибке", Неопределено);
	Результат.Вставить("ЭтоОшибка", Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПравоНаЗапись(Ключ)
	
	// В момент проверки право записи, в журнал регистрации могут регистрироваться ошибки.
	ЕстьПраво = Неопределено;
	
	// АПК:326-выкл не проверять схему работы транзакции.
	НачатьТранзакцию();
	Попытка
		КлючОбъекта = Ключ.ПолучитьОбъект();
		КлючОбъекта.Заблокировать();
		КлючОбъекта.Записать();
		ЕстьПраво = Истина;
	Исключение
		ЕстьПраво = Ложь;
	КонецПопытки;
	
	ОтменитьТранзакцию();
	// АПК:326-вкл включаем проверку схемы работы транзакции.
	
	Возврат ЕстьПраво;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОткрытиеФормы(ИмяФормы, ТестируемаяФорма, ПараметрыОткрытияФормы = Неопределено)
	
	НачалоОткрытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПараметрыОткрытияСтрокой = СписокПараметровСтрокой(ПараметрыОткрытияФормы);
	ДобавитьВЛогВремениОткрытияФорм(ИмяОткрываемойФормы + ";" + ПараметрыОткрытияСтрокой);
	ЭтоКопирование = ТипЗнч(ПараметрыОткрытияФормы) = Тип("Структура")
						И ПараметрыОткрытияФормы.Свойство(ПеревестиЗначение("ЗначениеКопирования", Словарь));
	
	Если ЭтоКопирование Тогда
		Если Не ЕстьПравоНаЗапись(ПараметрыОткрытияФормы[ПеревестиЗначение("ЗначениеКопирования", Словарь)]) Тогда
			ЗавершитьЗамер(НСтр("ru='(нет прав для копирования формы)'; en='(нет прав для копирования формы)'", КодЯзыкаТекущейПроверки));
			ОткрытьСледующуюТестируемуюФорму();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТипТестируемойФормы = "ОткрытиеФормы";
	ИмяОбработчикаОжидания = "ЗафиксироватьОткрытиеФормы";
	
	Если ТестируемаяФорма.ТипФормы = "ФормаОтчета" Тогда
		ТипТестируемойФормы = "ФормаОтчета";
		ИмяОбработчикаОжидания = "ЗафиксироватьФормированиеОтчета";
		УточнитьКонтекстФормыОтчета(ПараметрыОткрытияФормы, Словарь);
		
	ИначеЕсли ТестируемаяФорма.ТипФормы = "ФормаНастроек" Тогда
		ТипТестируемойФормы = "ФормаНастроекОтчета";
		ИмяОбработчикаОжидания = "ЗафиксироватьОткрытиеФормыНастроекОтчета";
		УточнитьКонтекстФормыНастроекОтчета(ТестируемаяФорма.ВариантОтчета, ПараметрыОткрытияФормы, Словарь);
		
	ИначеЕсли ТестируемаяФорма.ТипФормы = "ФормированиеОтчетаБезФормы" Тогда
		ТипТестируемойФормы = "ФормированиеОтчетаБезФормы";
		
	ИначеЕсли ТестируемаяФорма.ТипФормы = "ПечатнаяФорма" Тогда
		ТипТестируемойФормы = "ПечатнаяФорма";
		ИдентификаторПечатнойФормы = ПараметрыОткрытияФормы[ПеревестиЗначение("Идентификатор", Словарь)];
		ИмяОбработчикаОжидания = "ЗафиксироватьОткрытиеПечатнойФормы";
		ИмяСвойстваОбъектыПечати = ПеревестиЗначение("ОбъектыПечати", Словарь);
		УточнитьКонтекстПечатнойФормы(ПараметрыОткрытияФормы, ИмяСвойстваОбъектыПечати);
		
		Если ПараметрыОткрытияФормы[ИмяСвойстваОбъектыПечати].Количество() = 0 Тогда
			
			Если СтрНайти( ПараметрыОткрытияФормы.ИмяОбъектаМетаданных, "Документ") Тогда
				ТипОшибки = НСтр("ru='Отсутствуют документы для печати'; en='Отсутствуют документы для печати'",
					КодЯзыкаТекущейПроверки);
			ИначеЕсли СтрНайти( ПараметрыОткрытияФормы.ИмяОбъектаМетаданных, "Справочник") Тогда
				ТипОшибки = НСтр("ru='Отсутствуют элементы для печати'; en='Отсутствуют элементы для печати'",
					КодЯзыкаТекущейПроверки);
			Иначе
				ТипОшибки = НСтр("ru='Отсутствуют записи в таблице для печати'; en='Отсутствуют записи в таблице для печати'",
					КодЯзыкаТекущейПроверки);
			КонецЕсли;
			
			ШаблонТекстаУточнения = НСтр("ru = 'В тестируемой базе нет ни одной записи в таблице %1,
			|поэтому печатная форма ""%2"" не проверена.
			|Необходимо создать хотя быть один документ для проверки создания печатной формы.';
			|en = 'В тестируемой базе нет ни одной записи в таблице %1,
			|поэтому печатная форма ""%2"" не проверена.
			|Необходимо создать хотя быть один документ для проверки создания печатной формы.'");
			ТекстУточнения = СтрШаблон(ШаблонТекстаУточнения, ПараметрыОткрытияФормы.ИмяОбъектаМетаданных, ПараметрыОткрытияФормы.Представление);
			
			ДобавитьВЛогВремениОткрытияФорм(ТипОшибки, Ложь);
			ЗаписатьОшибку(ТипТестируемойФормы, ИмяОткрываемойФормы, ТипОшибки, Неопределено, СтруктуруВТекст(ПараметрыОткрытияФормы));
			
			ОткрытьСледующуюТестируемуюФорму();
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТестируемаяФорма.ТипФормы = "РедактированиеМакета" Тогда
		ИмяОбработчикаОжидания = "ЗафиксироватьОткрытиеФормыРедактированияМакета";
		ТипТестируемойФормы = "РедактированиеМакета";
		
	ИначеЕсли ТестируемаяФорма.ТипФормы = "РегламентноеЗадание" Тогда
		ТипТестируемойФормы = "РегламентноеЗадание";
		
	ИначеЕсли ТестируемаяФорма.ТипФормы = "КопированиеЭлемента" Тогда
		ТипТестируемойФормы = "КопированиеЭлемента";
		
	ИначеЕсли ТестируемаяФорма.ТипФормы = "ПометкаНаУдалениеЭлемента" Тогда
		ТипТестируемойФормы = "ПометкаНаУдалениеЭлемента";
		
	ИначеЕсли ТестируемаяФорма.ТипФормы = "УдалениеПомеченногоЭлемента" Тогда
		ТипТестируемойФормы = "УдалениеПомеченногоЭлемента";
	КонецЕсли;
	
	ИмяФормыСОшибкой = ?(ТипТестируемойФормы = "ФормаОтчета" Или ТипТестируемойФормы = "ФормаНастроекОтчета",
		СтрШаблон("%1_%2", ИмяФормы, ТестируемаяФорма.ВариантОтчета), ИмяФормы);
	
	СтруктураНегативногоСценария = ПолучитьНегативныйСценарий(ИмяФормы, ПеревестиЗначение("Открытие", Словарь));
	
	Попытка
		
		ЗафиксироватьДействиеВТаблицеПротестированныхФорм(Словарь, ИмяОткрываемойФормы, Истина, Ложь);
		
		Если ТипТестируемойФормы = "ФормаОтчета" Тогда
			ОткрытьФормуОтчета(ЭтаФорма, ТестируемаяФорма.ВариантОтчета, Словарь, ПараметрыОткрытияФормы);
		ИначеЕсли ТипТестируемойФормы = "ФормированиеОтчетаБезФормы" Тогда
			СформироватьОтчетБезОткрытияФормы(ТестируемаяФорма);
		ИначеЕсли ТипТестируемойФормы = "ПечатнаяФорма" Тогда
			ОткрытьПечатнуюФорму(ПараметрыОткрытияФормы);
		ИначеЕсли ТипТестируемойФормы = "РедактированиеМакета" Тогда
			ОткрытьМакетДляРедактирования(ТестируемаяФорма);
		ИначеЕсли ТипТестируемойФормы = "РегламентноеЗадание" Тогда
			ЗапуститьРегламентноеЗадание(ТестируемаяФорма);
		ИначеЕсли ТипТестируемойФормы = "КопированиеЭлемента" Тогда
			КопироватьЭлемент(ТестируемаяФорма);
		ИначеЕсли ТипТестируемойФормы = "ПометкаНаУдалениеЭлемента" Тогда
			ПометитьСкопированныйЭлементНаУдаление(ТестируемаяФорма);
		ИначеЕсли ТипТестируемойФормы = "УдалениеПомеченногоЭлемента" Тогда
			УдалитьПомеченныйЭлемент(ТестируемаяФорма);
		Иначе
			ЗаполнитьМассивОткрытыхОкон();
			
			ТекущаяФорма = ПолучитьФорму(ИмяОткрываемойФормы, ПараметрыОткрытияФормы);
			Если ТекущаяФорма <> Неопределено Тогда
				ТекущаяФорма.Открыть();
				ПроверитьГруппировкуДинамическихСписковФормы(ТекущаяФорма, ИмяОткрываемойФормы);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьДействиеВТаблицеПротестированныхФорм(Словарь, ИмяОткрываемойФормы, Истина, Истина);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗафиксироватьДействиеВТаблицеПротестированныхФорм(Словарь, ИмяОткрываемойФормы, Истина, Истина);
		
		Если СтруктураНегативногоСценария.Найден Тогда
			Если СтрНайти(ТекстОшибки, СтруктураНегативногоСценария.ТекстОшибки) > 0 Тогда
				ТекстАвтозакрытие = НСтр("ru='(автозакрытие, ожидаемая ошибка)'; en='(автозакрытие, ожидаемая ошибка)'", КодЯзыкаТекущейПроверки);
				ЗавершитьЗамер(ТекстАвтозакрытие);
				ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed",,, ТекстАвтозакрытие);
				ОткрытьСледующуюТестируемуюФорму();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТестируемаяФорма.Поведение.Количество() > 0 Тогда
			
			Для Каждого ОписаниеПоведения Из ТестируемаяФорма.Поведение Цикл
				Если ОписаниеПоведения.Представление = "ОжидаемаяОшибка" Тогда
					Если СтрНайти(СтрЗаменить(ТекстОшибки, Символы.ПС, " "), ОписаниеПоведения.Значение) > 0 Тогда
						ТекстАвтозакрытие = НСтр("ru='(автозакрытие, ожидаемая ошибка)'; en='(автозакрытие, ожидаемая ошибка)'", КодЯзыкаТекущейПроверки);
						ЗавершитьЗамер(ТекстАвтозакрытие);
						ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed",,, ТекстАвтозакрытие);
						ОткрытьСледующуюТестируемуюФорму();
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		
		Если ТипТестируемойФормы = "ОткрытиеФормы" Тогда
			ТипОшибки = ?(ЭтоКопирование, ОшибкаКопированияФормы(), ОшибкаОткрытияФормы());
			
		ИначеЕсли ТипТестируемойФормы = "ФормаОтчета" Тогда
			ТипОшибки = ОшибкаОткрытияВариантаОтчета();
			
		ИначеЕсли ТипТестируемойФормы = "ФормаНастроекОтчета" Тогда
			ТипОшибки = ОшибкаОткрытияФормыНастроекОтчета();
			
		ИначеЕсли ТипТестируемойФормы = "КопированиеЭлемента" Тогда
			ТипОшибки = ОшибкаКопированияЭлемента();
			
		ИначеЕсли ТипТестируемойФормы = "ПометкаНаУдалениеЭлемента" Тогда
			ТипОшибки = ОшибкаПометкиНаУдалениеЭлемента();
			ТекстСообщенийПользователю = ПолучитьТекстСообщенийПользователю();
			Если Не ПустаяСтрока(ТекстСообщенийПользователю) Тогда
				ТекстОшибки = ТекстОшибки + ТекстСообщенийПользователю;
			КонецЕсли;
			
		ИначеЕсли ТипТестируемойФормы = "УдалениеПомеченногоЭлемента" Тогда
			ТипОшибки = ОшибкаУдаленияПомеченногоЭлемента();
			ТекстСообщенийПользователю = ПолучитьТекстСообщенийПользователю();
			Если Не ПустаяСтрока(ТекстСообщенийПользователю) Тогда
				ТекстОшибки = ТекстОшибки + ТекстСообщенийПользователю;
			КонецЕсли;
			
		ИначеЕсли ТипТестируемойФормы = "РегламентноеЗадание" Тогда
			ТипОшибки = ОшибкаВыполненияРегламентногоЗадания();
			
		ИначеЕсли ТипТестируемойФормы = "ФормированиеОтчетаБезФормы" Тогда
			ТипОшибки = ОшибкаФормированияОтчетаБезФормы();
			
		ИначеЕсли ТипТестируемойФормы = "РедактированиеМакета" Тогда
			ТипОшибки = ОшибкаРедактированияМакета();
			
		Иначе
			ТипОшибки = ОшибкаОткрытияПечатнойФормы();
		КонецЕсли;
		
		ДобавитьВЛогВремениОткрытияФорм(ТипОшибки + ":" + СтрЗаменить(ТекстОшибки, Символы.ПС, " "), Ложь);
		ЗаписатьОшибку(ТипТестируемойФормы, ИмяФормыСОшибкой, ТипОшибки, ИнформацияОбОшибке, ТекстОшибки, ТестируемаяФорма);
		ОткрытьСледующуюТестируемуюФорму();
		
		Возврат;
		
	КонецПопытки;
	
	// Негативный сценарий открытия формы найден, но форма успешно открылась.
	Если СтруктураНегативногоСценария.Найден Тогда
		ТипОшибки = ОшибкаТестированияНегативногоСценария();
		ИнформацияОбОшибке = СтрШаблон(НСтр("ru='Ожидалась следующая ошибка при открытии формы: %1'; en='Ожидалась следующая ошибка при открытии формы: %1'", КодЯзыкаТекущейПроверки),
			СтруктураНегативногоСценария.ТекстОшибки);
		ЗаписатьОшибку(ТипТестируемойФормы, ИмяФормыСОшибкой, ТипОшибки, ИнформацияОбОшибке,, ТестируемаяФорма);
	КонецЕсли;
	
	СчетчикПоискаОткрытойФормы = 0;
	ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьРегламентноеЗадание(СтрокаДерева)
	
	НачалоОткрытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДобавитьВЛогВремениОткрытияФорм(ИмяОткрываемойФормы);
	
	ПараметрыВыполненияРЗ = Новый Структура;
	ПараметрыВыполненияРЗ.Вставить("ПолноеИмяРегламентногоЗадания", СтрокаДерева.ПолноеИмя);
	ПараметрыВыполненияРЗ.Вставить("ИмяМетода",                     СтрокаДерева.ИмяМетода);
	ПараметрыВыполненияРЗ.Вставить("ДатаНачала",                    ТекущаяДата());
	ПараметрыВыполненияРЗ.Вставить("ТекстОшибкиПараметрическогоРЗ", ОшибкаРегламентногоЗаданияНедостаточноПараметров());
	
	РезультатВыполнения = ВыполнитьРегламентноеЗаданиеСОбработкойОшибок(ПараметрыВыполненияРЗ, Словарь);
	
	ЗавершитьЗамер();
	
	ТипОшибки = "РегламентноеЗадание";
	
	СтрокиОшибкиУточнение = Новый Массив;
	СтрокиОшибкиУточнение.Добавить(НСтр("ru='Воспроизведение ошибки:'; en='Воспроизведение ошибки:'", КодЯзыкаТекущейПроверки));
	ТекстВоспроизведениеОшибки = ТекстВоспроизведениеОшибкиДляОсобенныхДействий(СтрокаДерева.ПолноеИмя);
	СтрокиОшибкиУточнение.Добавить(ТекстВоспроизведениеОшибки);
	
	МассивПолногоИмениРегламентногоЗадания = СтрРазделить(СтрокаДерева.ПолноеИмя, ".");
	ИмяРегламентногоЗадания = МассивПолногоИмениРегламентногоЗадания[МассивПолногоИмениРегламентногоЗадания.ВГраница()];
	
	ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
	КраткоеОписаниеОшибки = СтрШаблон("%1 ""%2""", ТипОшибки, ИмяРегламентногоЗадания);
	
	СтрокиОшибкиУточнение.Добавить(Символы.ПС);
	
	БлокСВоспроизведениемОшибки = СокрЛП(СтрСоединить(СтрокиОшибкиУточнение, Символы.ПС));
	
	Если Не РезультатВыполнения.Успешно И Не ЭтоОжидаемаяОшибка(СтрокаДерева, РезультатВыполнения.ТекстОшибки) Тогда
		СформироватьXMLФайлОшибки(СтрокаДерева.ПолноеИмя, "", ОшибкаВыполненияРегламентногоЗадания(), РезультатВыполнения.ТекстОшибки, БлокСВоспроизведениемОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьЭлемент(СтрокаДерева)
	
	Для Каждого Параметр Из СтрокаДерева.Параметры Цикл
		
		НовыйЭлемент = ПолучитьСсылкуСкопированногоЭлемента(Параметр.Значение, СтрокаДерева.ПолноеИмя, Словарь);
		
		Если НовыйЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСсылкуНаСкопированныйЭлементВДерево(НомерТестируемойСтроки,
			НСтр("ru = 'ПометкаНаУдалениеЭлемента'; en = 'ПометкаНаУдалениеЭлемента'"),
			НовыйЭлемент);
		
		ДобавитьСсылкуНаСкопированныйЭлементВДерево(НомерТестируемойСтроки + 1,
			НСтр("ru = 'УдалениеПомеченногоЭлемента'; en = 'УдалениеПомеченногоЭлемента'"),
			НовыйЭлемент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСсылкуНаСкопированныйЭлементВДерево(НомерСтрокиДляДобавления, ИмяОперации, СкопированныйЭлемент)
	
	Если МассивВыбранныхФорм.ВГраница() < НомерСтрокиДляДобавления Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = МассивВыбранныхФорм[НомерСтрокиДляДобавления];
	
	Если ЭлементДерева.ТипФормы <> ИмяОперации Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева.Параметры.Очистить();
	ЭлементДерева.Параметры.Добавить(СкопированныйЭлемент, ПеревестиЗначение(ИмяОперации, Словарь));
	ЭлементДерева.ПараметрыСтрокой = ПеревестиЗначение(ИмяОперации, Словарь) + " = " + ПолучитьНавигационнуюСсылку(СкопированныйЭлемент);
	ЭлементДерева.Наименование = ЭлементДерева.ПараметрыСтрокой;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуСкопированногоЭлемента(КопируемыйЭлемент, ПолноеИмяДействия, Словарь, МассивСсылок = Неопределено, ИндексПопытки = 0)
	
	НовыйЭлементОбъект = КопируемыйЭлемент.Скопировать();
	
	// Заполним дату у документа.
	Если СтрНачинаетсяС(ТипЗнч(НовыйЭлементОбъект), ПеревестиЗначение("Документ", Словарь)) Тогда
		НовыйЭлементОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	
	УстановитьНовыйНомерИлиКод(НовыйЭлементОбъект, КопируемыйЭлемент.Метаданные(), Словарь);
	
	Если НовыйЭлементОбъект.ПроверитьЗаполнение() Тогда
		НовыйЭлементОбъект.Записать();
		Возврат НовыйЭлементОбъект.Ссылка;
	КонецЕсли;
	
	Если МассивСсылок <> Неопределено Тогда
		ИндексПопытки = ИндексПопытки + 1;
	КонецЕсли;
	
	Если ИндексПопытки = 0 Тогда
		МассивСсылок = ПолучитьАльтернативныеСсылкиСкопированногоЭлемента(КопируемыйЭлемент, ПолноеИмяДействия, 10, Словарь);
	КонецЕсли;
	
	Если ИндексПопытки < МассивСсылок.Количество() Тогда
		ПолучитьСсылкуСкопированногоЭлемента(МассивСсылок[ИндексПопытки], ПолноеИмяДействия, Словарь, МассивСсылок, ИндексПопытки);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьАльтернативныеСсылкиСкопированногоЭлемента(КопируемыйЭлемент, ПолноеИмяДействия, КоличествоСсылок, Словарь)
	
	МассивПолногоИмени      = СтрРазделить(ПолноеИмяДействия, ".");
	ИмяОбъектаМетаданных    = МассивПолногоИмени[0];
	ОбъектМетаданных        = КопируемыйЭлемент.Метаданные();
	
	ТекущаяФормаПараметры = Новый Структура();
	ТекущаяФормаПараметры.Вставить("Имя", МассивПолногоИмени[МассивПолногоИмени.ВГраница()]);
	ТекущаяФормаПараметры.Вставить("ОсновнаяФорма", "");
	ТекущаяФормаПараметры.Вставить("Иерархический", Ложь);
	
	Если ((СтрНачинаетсяС(ПолноеИмяДействия, "Справочник") Или СтрНачинаетсяС(ПолноеИмяДействия, ПеревестиЗначение("Справочник", Словарь)))
			И (ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов))
			Или (СтрНачинаетсяС(ПолноеИмяДействия, "ПланВидовХарактеристик")
				Или СтрНачинаетсяС(ПолноеИмяДействия, ПеревестиЗначение("ПланВидовХарактеристик", Словарь))) Тогда
		ТекущаяФормаПараметры.Вставить("Иерархический", ОбъектМетаданных.Иерархический);
	КонецЕсли;
	
	МассивКопируемыхЭлементов = СлучайныеЭлементыОбъекта(ИмяОбъектаМетаданных, ОбъектМетаданных.Имя, ТекущаяФормаПараметры, КоличествоСсылок);
	
	Возврат МассивКопируемыхЭлементов;
	
КонецФункции

&НаСервере
Процедура УстановитьНовыйНомерИлиКод(НовыйЭлементОбъект, ОбъектМетаданных, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОбщегоНазначения", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		
		Если ОбщийМодульБСП.IsExchangePlan(ОбъектМетаданных)
				Или ОбщийМодульБСП.IsCatalog(ОбъектМетаданных)
				Или ОбщийМодульБСП.IsChartOfCharacteristicTypes(ОбъектМетаданных) Тогда
			НовыйЭлементОбъект.УстановитьНовыйКод();
			
		ИначеЕсли ОбщийМодульБСП.IsDocument(ОбъектМетаданных)
				Или ОбщийМодульБСП.IsBusinessProcess(ОбъектМетаданных)
				Или ОбщийМодульБСП.IsTask(ОбъектМетаданных) Тогда
			НовыйЭлементОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
	Иначе
		
		Если ОбщийМодульБСП.ЭтоПланОбмена(ОбъектМетаданных)
				Или ОбщийМодульБСП.ЭтоСправочник(ОбъектМетаданных)
				Или ОбщийМодульБСП.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
			НовыйЭлементОбъект.УстановитьНовыйКод();
			
		ИначеЕсли ОбщийМодульБСП.ЭтоДокумент(ОбъектМетаданных)
				Или ОбщийМодульБСП.ЭтоБизнесПроцесс(ОбъектМетаданных)
				Или ОбщийМодульБСП.ЭтоЗадача(ОбъектМетаданных) Тогда
			НовыйЭлементОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьСкопированныйЭлементНаУдаление(СтрокаДерева)
	
	Если СтрокаДерева.Параметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из СтрокаДерева.Параметры Цикл
		ПометитьСкопированныйЭлементНаУдалениеНаСервере(Параметр.Значение, СтрокаДерева.ИмяМетода, Словарь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьСкопированныйЭлементНаУдалениеНаСервере(СкопированныйЭлемент, ИмяМетода, Словарь)
	
	ПолучитьСообщенияПользователю(Истина);
	
	СкопированныйЭлементОбъект = СкопированныйЭлемент.ПолучитьОбъект();
	
	Если ИмяМетода <> "ОсобаяПроверка" Тогда
		СкопированныйЭлементОбъект.УстановитьПометкуУдаления(Истина);
		Возврат;
	КонецЕсли;
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОбщегоНазначения", Словарь));
	Если ЭтоМеждународнаяБСП() Тогда
		ПустойПользователь = ОбщийМодульБСП.CalculateInSafeMode("Catalogs.Users.EmptyRef()");
	Иначе
		ПустойПользователь = ОбщийМодульБСП.ВычислитьВБезопасномРежиме("Справочники.Пользователи.ПустаяСсылка()");
	КонецЕсли;
	
	// Если элемент захвачен на редактирование, сначала снимем захват и проверим пометку удаления.
	Если СкопированныйЭлементОбъект.Редактирует <> ПустойПользователь Тогда
		СкопированныйЭлементОбъект.Редактирует = ПустойПользователь;
		СкопированныйЭлементОбъект.Заблокировать();
		СкопированныйЭлементОбъект.Записать();
	КонецЕсли;
	
	СкопированныйЭлементОбъект.УстановитьПометкуУдаления(Истина);
	
	// Проверим тот же элемент, но захваченный на редактирование.
	СкопированныйЭлементОбъект.УстановитьПометкуУдаления(Ложь);
	СкопированныйЭлементОбъект.Редактирует = АвторизованныйПользователь(Словарь);
	СкопированныйЭлементОбъект.Заблокировать();
	СкопированныйЭлементОбъект.Записать();
	СкопированныйЭлементОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаСервере
Функция ОбъектМожноЗахватитьДляРедактирования(ОбъектПроверки, НастройкиФорм)
	
	ОбъектыЗахватываемыеДляРедактирования = НастройкиФорм.Получить("ОбъектыЗахватываемыеДляРедактирования");
	Если ОбъектыЗахватываемыеДляРедактирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбъектыЗахватываемыеДляРедактирования.Получить(ОбъектПроверки) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЭтоПредопределенныеДанные(Данные, ИмяОбъектаМетаданных, Словарь)
	
	Если ЭтоПредопределенныйВариантОтчета(Данные, Словарь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивОбъектовСПредопределенными = Новый Массив;
	МассивОбъектовСПредопределенными.Добавить(ПеревестиЗначение("Справочники",             Словарь));
	МассивОбъектовСПредопределенными.Добавить(ПеревестиЗначение("ПланыВидовХарактеристик", Словарь));
	МассивОбъектовСПредопределенными.Добавить(ПеревестиЗначение("ПланыСчетов",             Словарь));
	МассивОбъектовСПредопределенными.Добавить(ПеревестиЗначение("ПланыВидовРасчета",       Словарь));
	
	Если МассивОбъектовСПредопределенными.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбщегоМодуля = ПеревестиЗначение("СтандартныеПодсистемыСервер", Словарь);
	
	ОбщийМодульБСП = ОбщийМодуль(ИмяОбщегоМодуля);
	
	Если ЭтоМеждународнаяБСП() Тогда
		ЭтоПредопределенный = ОбщийМодульБСП.ThisIsPredefinedData(Данные);
	Иначе
		ЭтоПредопределенный = ОбщийМодульБСП.ЭтоПредопределенныеДанные(Данные);
	КонецЕсли;
	
	Возврат ЭтоПредопределенный;
	
КонецФункции

&НаСервере
Функция ЭтоПредопределенныйВариантОтчета(ВариантОтчета, Словарь)
	
	ЭтоПредопределенныйВариантОтчета = Ложь;
	
	СтрокаВариантыОтчетов = ПеревестиЗначение("ВариантыОтчетов", Словарь);
	
	ОбщийМодульБСП = ОбщийМодуль(СтрокаВариантыОтчетов);
	
	СтрокаСправочник = ПеревестиЗначение("Справочник", Словарь);
	СтрокаСсылка     = ПеревестиЗначение("Ссылка",     Словарь);
	
	СтрокаСправочникСсылка = СтрокаСправочник + СтрокаСсылка;
	
	Если ТипЗнч(ВариантОтчета) <> Тип(СтрокаСправочникСсылка + "." + СтрокаВариантыОтчетов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоМеждународнаяБСП() Тогда
		ЭтоПредопределенныйВариантОтчета = ОбщийМодульБСП.IsPredefinedReportOption(ВариантОтчета);
	Иначе
		ЭтоПредопределенныйВариантОтчета = ОбщийМодульБСП.ЭтоПредопределенныйВариантОтчета(ВариантОтчета);
	КонецЕсли;
	
	Возврат ЭтоПредопределенныйВариантОтчета;
	
КонецФункции

&НаКлиенте
Процедура УдалитьПомеченныйЭлемент(СтрокаДерева)
	
	Для Каждого Параметр Из СтрокаДерева.Параметры Цикл
		УдалитьПомеченныйЭлементНаСервере(Параметр.Значение, Словарь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПомеченныйЭлементНаСервере(ПомеченныйЭлемент, Словарь)
	
	УдаляемыеОбъекты = Новый Массив;
	Если ПомеченныйЭлемент.ПометкаУдаления Тогда
		УдаляемыеОбъекты.Добавить(ПомеченныйЭлемент);
	КонецЕсли;
	
	Если УдаляемыеОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСообщенияПользователю(Истина);
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("УдалениеПомеченныхОбъектов", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.ToDeleteMarkedObjects(УдаляемыеОбъекты);
	Иначе
		ОбщийМодульБСП.УдалитьПомеченныеОбъекты(УдаляемыеОбъекты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРегламентноеЗаданиеСОбработкойОшибок(ПараметрыВыполненияРЗ, Словарь)
	
	ПолноеИмяРегламентногоЗадания = ПараметрыВыполненияРЗ.ПолноеИмяРегламентногоЗадания;
	ИмяМетода                     = ПараметрыВыполненияРЗ.ИмяМетода;
	ДатаНачала                    = ПараметрыВыполненияРЗ.ДатаНачала;
	ТекстОшибкиПараметрическогоРЗ = ПараметрыВыполненияРЗ.ТекстОшибкиПараметрическогоРЗ;
	
	СтруктураРезультат = Новый Структура("Успешно, ТекстОшибки", Ложь, "");
	
	Если ВремяОжиданияВыполненияРегламентныхЗаданийВСекундах = 0 Тогда
		ВремяОжиданияВыполненияРегламентныхЗаданийВСекундах = 30;
	КонецЕсли;
	
	РегистрируемыеСостояния = Новый Массив;
	РегистрируемыеСостояния.Добавить(СостояниеФоновогоЗадания.Активно);
	РегистрируемыеСостояния.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	РегистрируемыеСостояния.Добавить(СостояниеФоновогоЗадания.Отменено);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить(ИмяМетода,,, ПолноеИмяРегламентногоЗадания);
	ФоновоеЗадание = ФоновоеЗадание.ОжидатьЗавершенияВыполнения(ВремяОжиданияВыполненияРегламентныхЗаданийВСекундах);
	
	СтруктураРезультат.Успешно = (РегистрируемыеСостояния.Найти(ФоновоеЗадание.Состояние) = Неопределено);
	
	Если СтруктураРезультат.Успешно Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	ЗаголовокОшибки = СтрШаблон(НСтр("ru = '%1
		|ИмяМетода: %2
		|Состояние регламентного задания: %3';
		|en = '%1
		|ИмяМетода: %2
		|Состояние регламентного задания: %3';"),
		ПолноеИмяРегламентногоЗадания,
		ИмяМетода,
		ФоновоеЗадание.Состояние);
	
	Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		СтруктураРезультат.ТекстОшибки = СтрШаблон(
			НСтр("ru = '%1
				|По истечении %2 секунд фоновое задание продолжает выполняться';
				|en = '%1
				|По истечении %2 секунд фоновое задание продолжает выполняться'"),
			ЗаголовокОшибки,
			ВремяОжиданияВыполненияРегламентныхЗаданийВСекундах);
		
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	// Формируем структуру отбора для получения ошибок ЖР.
	СтруктураОтбораОшибок = Новый Структура;
	СтруктураОтбораОшибок.Вставить("ДатаНачала", ДатаНачала);
	СтруктураОтбораОшибок.Вставить("Уровень", УровеньЖурналаРегистрации.Ошибка);
	СтруктураОтбораОшибок.Вставить("Данные", ПолноеИмяРегламентногоЗадания);
	
	// Получаем ошибки журнала регистрации.
	ТаблицаОшибокЖР = ТаблицаЖурналаРегистрации(СтруктураОтбораОшибок);
	
	// Формируем структуру отбора для получения предупреждений ЖР.
	СтруктураОтбораПредупреждений = Новый Структура;
	СтруктураОтбораПредупреждений.Вставить("ДатаНачала", ДатаНачала);
	СтруктураОтбораПредупреждений.Вставить("Уровень",    УровеньЖурналаРегистрации.Предупреждение);
	
	// Делаем отбор по метаданным, т.к. при отборе по данным в предупреждении пустой комментарий.
	ФрагментыИмени = СтрРазделить(ПолноеИмяРегламентногоЗадания, ".");
	Если ФрагментыИмени.Количество() > 1 Тогда
		ИмяРегламентногоЗадания = ФрагментыИмени.Получить(1);
	Иначе
		ИмяРегламентногоЗадания = СтрЗаменить(ПолноеИмяРегламентногоЗадания, ПеревестиЗначение("РегламентноеЗадание.", Словарь), "");
	КонецЕсли;
	СтруктураОтбораПредупреждений.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяРегламентногоЗадания]);
	
	// Получаем предупреждения для анализа регламентных заданий со статусом "Отменено пользователем".
	ТаблицаПредупрежденийЖР = ТаблицаЖурналаРегистрации(СтруктураОтбораПредупреждений);
	
	// Объединяем ошибки и предупреждения в общую таблицу.
	ТаблицаЖР = ТаблицаОшибокЖР.Скопировать();
	Для Каждого СтрокаПредупреждения Из ТаблицаПредупрежденийЖР Цикл
		НоваяСтрокаТаблицы = ТаблицаЖР.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаПредупреждения);
	КонецЦикла;
	
	СтруктураРезультат.ТекстОшибки = ЗаголовокОшибки;
	
	ТекстСообщенияПустойКомментарий = НСтр("
		|ru = 'Дополнительная информация отсутствует, т.к. не заполнен комментарий в журнале регистрации';
		|en = 'Дополнительная информация отсутствует, т.к. не заполнен комментарий в журнале регистрации'");
	
	ОтсутствуетКомментарий = Истина;
	
	ИмяКолонкиКомментарий = ПеревестиЗначение("Комментарий", Словарь);
	
	Для Каждого СтрокаТЗ Из ТаблицаЖР Цикл
		Если ПустаяСтрока(СтрокаТЗ[ИмяКолонкиКомментарий]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтсутствуетКомментарий = Ложь;
		СтруктураРезультат.ТекстОшибки = СтрШаблон("%1
			|%2",
			СтруктураРезультат.ТекстОшибки,
			СтрокаТЗ[ИмяКолонкиКомментарий]);
	КонецЦикла;
	
	Если ОтсутствуетКомментарий Тогда
		СтруктураРезультат.ТекстОшибки = СтрШаблон("%1
			|%2",
			СтруктураРезультат.ТекстОшибки,
			ТекстСообщенияПустойКомментарий);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьОткрытиеФормы()
	
	СчетчикПоискаОткрытойФормы = СчетчикПоискаОткрытойФормы + 1;
	ОткрытоеОкно               = АктивноеОкно();
	
	Если (ОткрытоеОкно = Неопределено)
		Или ((ОткрытоеОкно.Содержимое.Количество() > 0)
			И (ОткрытоеОкно.Содержимое[0] = ЭтаФорма)) Тогда
		ТекстАвтозакрытие = НСтр("ru='(автозакрытие формы)'; en='(автозакрытие формы)'", КодЯзыкаТекущейПроверки);
		ЗавершитьЗамер(ТекстАвтозакрытие);
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed",,, ТекстАвтозакрытие);
		
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецЕсли;
	
	ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
	
	Если МассивПроверокБезОткрытияФормы.Найти(ОткрытаяТестируемаяФорма.ТипФормы) <> Неопределено Тогда
		ТекстЗавершениеТестаБезОткрытияФормы = НСтр("ru='(выполнена проверка без открытия формы)'; en='(выполнена проверка без открытия формы)'");
		ЗавершитьЗамер(ТекстЗавершениеТестаБезОткрытияФормы);
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed",,, ТекстАвтозакрытие);
		
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецЕсли;
	
	Если ОткрытоеОкно.Содержимое.Количество() > 0
		И ОткрытоеОкно.Содержимое[0].Открыта()
		И ОткрытоеОкно.Содержимое[0].ИмяФормы = ИмяОткрываемойФормы Тогда
		
		Форма = ОткрытоеОкно.Содержимое[0];
		
		ИнформацияОбОкне = ОткрытоеОкно.Заголовок;
		Если ОткрытоеОкно.Содержимое.Количество() > 1 Тогда
			ИнформацияОбОкне = ИнформацияОбОкне + НСтр("ru='Несколько окон:'; en='Несколько окон:'");
			Для Каждого ДочерниеОткрытоеОкно Из ОткрытоеОкно.Содержимое Цикл
				ИнформацияОбОкне = ИнформацияОбОкне + ", " + ДочерниеОткрытоеОкно.Заголовок;
			КонецЦикла;
			
		КонецЕсли;
		ЗавершитьЗамер(ИнформацияОбОкне);
		
		Если СтрНачинаетсяС(ОткрытаяТестируемаяФорма.ТипФормы, "ОсновнаяФормаОбъекта") Тогда
			
			// Прочитать (аналог команды перечитать на форме).
			Попытка
				Форма.Прочитать(); // АПК:566 - дымовой тест выполняется в синхронном режиме.
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				
				ЗаписатьОшибку("ОткрытиеФормы", ИмяОткрываемойФормы, ОшибкаОбновленияФормы(), ИнформацияОбОшибке,, ОткрытаяТестируемаяФорма);
			КонецПопытки;
			
			// Записать (аналог нажатия кнопки записать на форме).
			Если (Форма.ТолькоПросмотр = Ложь) И (Не СтрЗаканчиваетсяНа(ОткрытаяТестируемаяФорма.ТипФормы, "Создание")) Тогда
				ВыполнитьЗаписьНаФорме(Форма, ОткрытаяТестируемаяФорма);
			КонецЕсли;
			
			ОткрытьФормыВводаНаОсновании(ОткрытаяТестируемаяФорма, Форма);
			Возврат;
			
		ИначеЕсли СтрНачинаетсяС(ОткрытаяТестируемаяФорма.ТипФормы, "Копирование") Тогда
			
			// Прочитать (аналог команды перечитать на форме).
			Попытка
				Форма.Прочитать();
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаписатьОшибку("ОткрытиеФормы", ИмяОткрываемойФормы, ОшибкаОбновленияСкопированнойФормы(), ИнформацияОбОшибке,, ОткрытаяТестируемаяФорма);
			КонецПопытки;
			
			// Записать (аналог нажатия кнопки записать на форме)
			Если Форма.ТолькоПросмотр = Ложь Тогда
				ВыполнитьЗаписьНаФорме(Форма, ОткрытаяТестируемаяФорма);
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(ОткрытаяТестируемаяФорма.ТипФормы, "ОсновнаяФормаСписка") Тогда
			
			Попытка
				
				Если Форма.Элементы.Найти("Список") <> Неопределено Тогда
					Если СчетчикПоискаОткрытойФормы < 2 Тогда
						Форма.Элементы.Список.Обновить();
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				
				ЗаписатьОшибку("ОткрытиеФормы", ИмяОткрываемойФормы, ОшибкаОбновленияСпискаФормы(), ИнформацияОбОшибке(),, ОткрытаяТестируемаяФорма);
				
			КонецПопытки;
			
		КонецЕсли;
		
		ЗакрытьФорму(Форма);
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed");
		
		ОткрытьСледующуюТестируемуюФорму();
		
	Иначе
		
		РезультатПроверки = ПроверитьСоответствиеТестируемойИОткрытойФормы();
		
		Если Не РезультатПроверки.ОткрытаТестируемаяФорма Тогда
			Если Не РезультатПроверки.ОткрытаОжидаемаяФорма Тогда
				Ожидание = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОткрытия) / 1000;
				ДобавитьВЛогВремениОткрытияФорм(Строка(Ожидание), Ложь);
				ЗаписатьОшибкуОткрытияФормыОтличнойОтТестируемой(РезультатПроверки.МассивОткрытыхФорм);
			КонецЕсли;
			Форма = ОткрытоеОкно.Содержимое[0];
			ЗакрытьФорму(Форма);
			ОтключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормы");
			ОткрытьСледующуюТестируемуюФорму();
			
		ИначеЕсли СчетчикПоискаОткрытойФормы > 50 Тогда
			Ожидание = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОткрытия) / 1000;
			ДобавитьВЛогВремениОткрытияФорм(Строка(Ожидание), Ложь);
			Если Ожидание > ДлительностьОткрытияФормы Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Время открытия формы %1 более %2 сек.'; en='Время открытия формы %1 более %2 сек.'", КодЯзыкаТекущейПроверки), ИмяОткрываемойФормы, ДлительностьОткрытияФормы);
				ЗаписатьОшибкуВремениОткрытияФормы(1, ТекстОшибки, Ожидание);
			Иначе
				ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "skipped");
			КонецЕсли;
			Если Ожидание > ДлительностьОткрытияФормы + 10 Тогда
				ЗаписатьОшибкуВремениОткрытияФормы(1,
					НСтр("ru='Не удалось зафиксировать открытие формы. Замер прекращен.';
						|en='Не удалось зафиксировать открытие формы. Замер прекращен.'", КодЯзыкаТекущейПроверки),
					Ожидание,
					Ложь);
			КонецЕсли;
			ОтключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормы");
			ОткрытьСледующуюТестируемуюФорму();
			
		Иначе
			ПодключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормы", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаписьНаФорме(Форма, ОткрытаяТестируемаяФорма)
	
	СтруктураНегативногоСценария = ПолучитьНегативныйСценарий(ИмяФормы, ПеревестиЗначение("Запись", Словарь));
	
	Попытка
		
		Если СтруктураНегативногоСценария.Найден И Форма.Параметры.Свойство("Ключ") Тогда
			Если Не ЕстьПравоНаЗапись(Форма.Параметры.Ключ) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Форма.Записать();
		
		Если СтруктураНегативногоСценария.Найден И ЗначениеЗаполнено(СтруктураНегативногоСценария.ТекстОшибки) Тогда
			ТипОшибки = ОшибкаТестированияНегативногоСценария();
			ИнформацияОбОшибке = СтрШаблон(НСтр("ru='Ожидалась следующая ошибка при записи формы: %1'; en='Ожидалась следующая ошибка при записи формы: %1'", КодЯзыкаТекущейПроверки),
				СтруктураНегативногоСценария.ТекстОшибки);
			ЗаписатьОшибку("ОткрытиеФормы", ИмяФормы, ТипОшибки, ИнформацияОбОшибке,, ОткрытаяТестируемаяФорма);
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Если ЭтоОжидаемаяОшибка(ОткрытаяТестируемаяФорма, ТекстОшибки, СтруктураНегативногоСценария) Тогда
			Возврат;
		КонецЕсли;
		
		// Исключение. Недостаточно прав по RLS.
		// У пользователя недостаточно прав на исполнение операции над базой данных.
		
		Если СтрНайти(ТекстОшибки, "У пользователя недостаточно прав на исполнение операции над базой данных") = 0 Тогда // АПК:1297 - не локализуется
			ЗаписатьОшибку("ОткрытиеФормы", ИмяОткрываемойФормы, ОшибкаЗаписиСкопированнойФормы(), ИнформацияОбОшибке,, ОткрытаяТестируемаяФорма);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОжидаемаяОшибка(Знач ОткрытаяТестируемаяФорма, Знач ТекстОшибки, СтруктураНегативногоСценария = Неопределено)
	
	Если СтруктураНегативногоСценария <> Неопределено Тогда
		Если СтрНайти(ТекстОшибки, СтруктураНегативногоСценария.ТекстОшибки) > 0 Тогда
			ЗавершитьЗамер(НСтр("ru='(автозакрытие, ожидаемая ошибка)'; en='(автозакрытие, ожидаемая ошибка)'", КодЯзыкаТекущейПроверки));
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОткрытаяТестируемаяФорма.Поведение.Количество() > 0 Тогда
		
		Если ЭтоМеждународнаяБСП() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого ОписаниеПоведения Из ОткрытаяТестируемаяФорма.Поведение Цикл
			Если ОписаниеПоведения.Представление = "ОжидаемаяОшибка" Тогда
				Если СтрНайти(ТекстОшибки, ОписаниеПоведения.Значение) > 0 Тогда
					ЗавершитьЗамер(НСтр("ru='(автозакрытие, ожидаемая ошибка)'; en='(автозакрытие, ожидаемая ошибка)'", КодЯзыкаТекущейПроверки));
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ОшибкаОбновленияФормы()
	
	Возврат НСтр("ru='Ошибка при обновлении формы'; en='Ошибка при обновлении формы'", КодЯзыкаТекущейПроверки);

КонецФункции

&НаКлиенте
Функция ОшибкаОбновленияСкопированнойФормы()
	
	Возврат НСтр("ru='Ошибка при обновлении скопированной формы'; en='Ошибка при обновлении скопированной формы'", КодЯзыкаТекущейПроверки);

КонецФункции

&НаКлиенте
Функция ОшибкаОбновленияСпискаФормы()
	
	Возврат НСтр("ru='Ошибка при обновлении списка формы'; en='Ошибка при обновлении списка формы'", КодЯзыкаТекущейПроверки);

КонецФункции

&НаКлиенте
Функция ОшибкаЗаписиСкопированнойФормы()
	
	Возврат НСтр("ru='Ошибка при записи скопированной формы'; en='Ошибка при записи скопированной формы'", КодЯзыкаТекущейПроверки);

КонецФункции

&НаКлиенте
Процедура ЗавершитьЗамер(ДополнительнаяИнформация = "")
	
	ВремяОткрытияФормы = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОткрытия) / 1000;
	Если ВремяОткрытияФормы > ДлительностьОткрытияФормы Тогда
		ТекстЛога = СтрШаблон(" %1: %2 сек.%3",
			НСтр("ru = 'Внимание, время открытия'; en = 'Внимание, время открытия'", КодЯзыкаТекущейПроверки),
			Строка(ВремяОткрытияФормы),
			ДополнительнаяИнформация);
		ДобавитьВЛогВремениОткрытияФорм(ТекстЛога, Ложь);
		ТекстОшибки = СтрШаблон(НСтр("ru='Время открытия формы %1 более %2 сек.';
									|en='Время открытия формы %1 более %2 сек.'", КодЯзыкаТекущейПроверки),
			ИмяОткрываемойФормы,
			ДлительностьОткрытияФормы);
		ЗаписатьОшибкуВремениОткрытияФормы(1, ТекстОшибки, ВремяОткрытияФормы);
	Иначе
		ДобавитьВЛогВремениОткрытияФорм(Строка(ВремяОткрытияФормы) + ";" + ДополнительнаяИнформация, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Знач Форма, ТипПроверки = "ОткрытиеФормы")
	
	Попытка
		ЗакрытьОткрывшиесяОкна(Форма);
		Если (Форма <> Неопределено) И Форма.Открыта() Тогда
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
			
			ИмяФормыНапоминания = "РегистрСведений.НапоминанияПользователя.Форма.Напоминание";
			Если СтрСравнить(Форма.ИмяФормы, ИмяФормыНапоминания) = 0 Тогда
				ВыключитьНапоминанияПользователя(Словарь);
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		// В момент закрытия формы возникла ошибка.
		ЗаписатьОшибку(ТипПроверки, ИмяОткрываемойФормы, ОшибкаЗакрытияФормы(), ИнформацияОбОшибке(),
			НСтр("ru='В момент закрытия формы возникла ошибка'; en='В момент закрытия формы возникла ошибка'", КодЯзыкаТекущейПроверки));
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для ИндексОкна = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[ИндексОкна] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Окошко = Окна[ИндексОкна];
		
		Если (ОткрытыеОкна.Найти(Окошко) <> Неопределено) Или (ТекущееОкно = Окошко) Тогда
			Продолжить;
		КонецЕсли;
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла;
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				Если Форма.Открыта() Тогда
					Форма.Модифицированность = Ложь;
					Форма.Закрыть();
				КонецЕсли;
			Исключение
				// В момент закрытия формы возникла ошибка.
				ТипПроверки = "ОткрытиеФормы";
				ЗаписатьОшибку(ТипПроверки, ИмяОткрываемойФормы, ОшибкаЗакрытияФормы(), ИнформацияОбОшибке(),
					НСтр("ru='В момент закрытия связанной формы возникла ошибка'; en='В момент закрытия связанной формы возникла ошибка'", КодЯзыкаТекущейПроверки));
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеНастроек

// Читает yaml файл в структуру и возвращает ее.
// При отсутствии файла возвращает пустую структуру.
// По умолчанию - КодировкаТекста.ANSI.
// Показывает в какой строке произошла ошибка чтения.
//
&НаКлиенте
Функция ПрочитатьНастройки()
	
	ПараметрыФормыИОбъектов = Новый Соответствие;
	
	ОписаниеНастроек = НастройкиПроверки();
	
	ИмяСекции            = Неопределено;
	ИмяФормыСПараметрами = Неопределено;
	НоваяСтрока          = Неопределено;
	СтрокаВариантаОтчета = Неопределено;
	
	МассивДобавляемыхСекцийНастроек = Новый Массив;
	МассивДобавляемыхСекцийНастроек.Добавить("НепроверяемыеФормы");
	МассивДобавляемыхСекцийНастроек.Добавить("ПараметрическиеРегламентныеЗадания");
	МассивДобавляемыхСекцийНастроек.Добавить("ОбъектыЗахватываемыеДляРедактирования");
	
	Если ТипЗнч(ОписаниеНастроек) <> Тип("Строка") Тогда
		Возврат ПараметрыФормыИОбъектов;
	КонецЕсли;
	
	СформироватьКлючиДляПроверкиОбъектов();
	
	НомерСтроки = 0;
	Пока НомерСтроки < СтрЧислоСтрок(ОписаниеНастроек) Цикл
		
		Попытка
			
			НомерСтроки = НомерСтроки + 1;
			СтрокаИзФайла = СтрокаОписанияНастроек(ОписаниеНастроек, НомерСтроки,, Символы.ПС);
			
			Если ПустаяСтрока(СтрокаИзФайла) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНачинаетсяС(СтрокаИзФайла, "#Область") Тогда
				ИмяСекции = СокрЛП(Сред(СтрокаИзФайла, 9));
				ИмяФормыСПараметрами = Неопределено;
				НоваяСтрока          = Неопределено;
				
			ИначеЕсли СтрНачинаетсяС(СтрокаИзФайла, "[") И СтрЗаканчиваетсяНа(СтрокаИзФайла, "]") Тогда
				
				ИмяФормыСПараметрами = Сред(СтрокаИзФайла, 2, СтрДлина(СтрокаИзФайла) - 2);
				
				РезультатПроверки = ОбъектМетаданныхСуществует(ИмяФормыСПараметрами, Словарь);
				Если Не РезультатПроверки.Успешно Тогда
					
					ЗаписатьОшибкуНекорректныхНастроек(РезультатПроверки.ИмяОбъектаМетаданных, ИмяФормыСПараметрами);
					
					ЗаписыватьПараметрыФормы = Ложь;// Форма не найдена, дальнейшие параметры не записываем.
					
					Продолжить;
				КонецЕсли;
				
				ЗаписыватьПараметрыФормы = Истина;
				
				Если МассивДобавляемыхСекцийНастроек.Найти(ИмяСекции) <> Неопределено Тогда
					ДобавитьНастройкиФормыДляТестирования(ПараметрыФормыИОбъектов, СокрЛП(ИмяФормыСПараметрами), ИмяСекции);
				КонецЕсли;
				
				НоваяСтрока = Неопределено;
				
			ИначеЕсли СтрНачинаетсяС(СтрокаИзФайла, "&") Тогда
				
				Если Не ЗаписыватьПараметрыФормы Тогда
					Продолжить;
				КонецЕсли;
				
				Если НоваяСтрока = Неопределено Тогда
					НоваяСтрока = ДобавитьНастройкиФормыДляТестирования(ПараметрыФормыИОбъектов, ИмяФормыСПараметрами, ИмяСекции);
				КонецЕсли;
				
				КлючИЗначение = СтрРазделить(СтрокаИзФайла, ":");
				ИмяКлюча = СокрЛП(КлючИЗначение[0]);
				Если КлючИЗначение.Количество() = 2 Тогда
					Значение = СокрЛП(КлючИЗначение[1]);
					
					// Проверка существования объектов, указанных в параметрах. Например, "&ОжидаемаяФорма:".
					ОбъектНайденПоЗначениюКлюча = ОбъектПоЗначениюКлючаСуществует(ИмяКлюча, Значение, ИмяФормыСПараметрами, НомерСтроки);
					Если Не ОбъектНайденПоЗначениюКлюча Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока.Поведение.Добавить(СокрЛП(Значение), Сред(ИмяКлюча, 2));
					НоваяСтрока.ПраваСтрокой = НоваяСтрока.ПраваСтрокой + СокрЛП(Значение) + ": " + Сред(ИмяКлюча, 2) + Символы.ПС;
				Иначе
					НоваяСтрока.Поведение.Добавить(Сред(СтрокаИзФайла, 2), "Права");
					НоваяСтрока.ПраваСтрокой = НоваяСтрока.ПраваСтрокой + НСтр("ru='Пользователь'; en='Пользователь'", КодЯзыкаТекущейПроверки) + ": " + Сред(СтрокаИзФайла, 2) + Символы.ПС;
				КонецЕсли;
				
				НоваяСтрока.ПараметрыСтрокой = НоваяСтрока.ПараметрыСтрокой + СтрокаИзФайла + Символы.ПС;
				
			ИначеЕсли ИмяСекции <> Неопределено Тогда
				
				Если Не ЗаписыватьПараметрыФормы Тогда
					Продолжить;
				КонецЕсли;
				
				Если НоваяСтрока = Неопределено И ЗначениеЗаполнено(ИмяФормыСПараметрами) Тогда
					НоваяСтрока = ДобавитьНастройкиФормыДляТестирования(ПараметрыФормыИОбъектов, ИмяФормыСПараметрами, ИмяСекции);
				КонецЕсли;
				
				КлючИЗначение = СтрРазделить(СтрокаИзФайла, ":");
				ИмяКлюча = СокрЛП(КлючИЗначение[0]);
				
				Если КлючИЗначение.Количество() = 2 Тогда
					
					Значение = СокрЛП(КлючИЗначение[1]);
					
					ОбъектНайденПоЗначениюКлюча = ОбъектПоЗначениюКлючаСуществует(ИмяКлюча, Значение, ИмяФормыСПараметрами, НомерСтроки);
					Если Не ОбъектНайденПоЗначениюКлюча Тогда
						Продолжить;
					КонецЕсли;
					
				ИначеЕсли КлючИЗначение.Количество() > 2 Тогда
					
					КлючИЗначение.Удалить(0);
					Значение = СокрЛП(СтрСоединить(КлючИЗначение, ":"));
					
				ИначеЕсли ИмяСекции = "Объекты" Тогда
					НоваяСтрока = ДобавитьНастройкиФормыДляТестирования(ПараметрыФормыИОбъектов, ИмяКлюча, ИмяСекции);
					Продолжить;
				Иначе
					Значение = "";
				КонецЕсли;
				
				Значение = ПреобразоватьПараметрыКТипам(Значение, УникальныйИдентификатор);
				
				НоваяСтрока.Параметры.Добавить(Значение, ИмяКлюча);
				НоваяСтрока.ПараметрыСтрокой = НоваяСтрока.ПараметрыСтрокой + СтрокаИзФайла + Символы.ПС;
				
			ИначеЕсли ИмяСекции = Неопределено Тогда
				// Глобальные настройки
				КлючИЗначение = СтрРазделить(СтрокаИзФайла, ":");
				ИмяКлюча = СокрЛП(КлючИЗначение[0]);
				
				Если СтрСравнить(ИмяКлюча, "Расширения") = 0 Тогда
					КлючИЗначение.Удалить(0);
					ПараметрыФормыИОбъектов.Вставить("СтрокаРасширений", СокрЛП(СтрСоединить(КлючИЗначение, ":")));
					Продолжить;
				КонецЕсли;
				
				Если РеквизитФормыСуществует(ИмяКлюча) Тогда
					
					Если Не ЗначениеЗаполнено(ЭтотОбъект[ИмяКлюча]) Или ТипЗнч(ЭтотОбъект[ИмяКлюча]) = Тип("Булево") Тогда
						
						Если КлючИЗначение.Количество() = 2 Тогда
							Значение = СокрЛП(КлючИЗначение[1]);
						Иначе
							КлючИЗначение.Удалить(0);
							Значение = СокрЛП(СтрСоединить(КлючИЗначение, ":"));
						КонецЕсли;
						
						ЭтотОбъект[ИмяКлюча] = ПреобразоватьПараметрыКТипам(Значение, УникальныйИдентификатор);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			ШаблонСтекаОшибки = НСтр("
				|ru = 'ИмяКлюча = %1
				|Значение = %2
				|
				|%3';
				|en = 'ИмяКлюча = %1
				|Значение = %2
				|
				|%3'");
			
			СтекОшибки = СтрШаблон(ШаблонСтекаОшибки,
				ИмяКлюча,
				Значение,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			НастройкаСОшибкой = СтрШаблон(НСтр("
				|ru = 'Принадлежность: %1
				|Строка с ошибкой: ""%2""';
				|en = 'Принадлежность: %1
				|Строка с ошибкой: ""%2""'"),
				?(ИмяФормыСПараметрами = Неопределено, "Общие настройки", ИмяФормыСПараметрами),
				СтрокаИзФайла);
			
			СформироватьXMLФайлОшибки(НСтр("ru = 'Чтение настроек открытия форм'; en = 'Чтение настроек открытия форм'"),
				НастройкаСОшибкой,
				НСтр("ru = 'Запуск теста'; en = 'Запуск теста'"), СтекОшибки,
				НСтр("ru = 'При чтении yaml-файла настроек произошла ошибка. Необходимо исправить настройки в файле.';
					|en = 'При чтении yaml-файла настроек произошла ошибка. Необходимо исправить настройки в файле.'"),
				Ложь,
				ОписаниеНастроек);
			ЗавершитьРаботуСистемы(Ложь);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ПараметрыФормыИОбъектов;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьОшибкуНекорректныхНастроек(ИмяОбъектаМетаданных, ИмяФормыСПараметрами)
	
	ТипОшибки = ОшибкаНекорректныеНастройки();
	
	Уточнение = СтрШаблон(
		НСтр("ru = 'В файле настроек дымового теста обнаружен объект метаданных %1, который отсутствует в конфигурации.
			|В случае, когда имя написано с ошибкой, то следует исправить его.
			|Если указано имя объекта не входящего в состав конфигурации, то удалите его из файла настроек.';
			|en = 'В файле настроек дымового теста обнаружен объект метаданных %1, который отсутствует в конфигурации.
			|В случае, когда имя написано с ошибкой, то следует исправить его.
			|Если указано имя объекта не входящего в состав конфигурации, то удалите его из файла настроек.'",
			КодЯзыкаТекущейПроверки),
		ИмяОбъектаМетаданных);
	
	Комментарий = НСтр("ru = 'Объект метаданных верхнего уровня необходимо указывать в единственном числе.
		|Например: Справочник, Перечисление и т.п.';
		|en = 'Объект метаданных верхнего уровня необходимо указывать в единственном числе.
		|Например: Справочник, Перечисление и т.п.'", КодЯзыкаТекущейПроверки);
	
	ДобавитьВПротоколТестирования(Уточнение);
	
	ДобавитьОшибкуВТаблицуРезультатаТестирования(ИмяФормыСПараметрами, ПараметрыФормы,
		ТекущаяУниверсальнаяДатаВМиллисекундах(), "failed", ТипОшибки, Уточнение);
	
	СформироватьXMLФайлОшибки(ИмяФормыСПараметрами, ПараметрыФормы, ТипОшибки, Уточнение, Комментарий, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ОбъектМетаданныхСуществует(Знач ИмяОбъектаМетаданных, Словарь)
	
	ДанныеОбъектаМетаданных = ДанныеОбъектаМетаданныхДляПроверкиСуществования(ИмяОбъектаМетаданных, Словарь);
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОбщегоНазначения", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбъектМетаданных = ОбщийМодульБСП.MetadataObjectByFullName(ДанныеОбъектаМетаданных.ИмяОбъектаМетаданных);
	Иначе
		ОбъектМетаданных = ОбщийМодульБСП.ОбъектМетаданныхПоПолномуИмени(ДанныеОбъектаМетаданных.ИмяОбъектаМетаданных);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", (ОбъектМетаданных <> Неопределено));
	Результат.Вставить("ИмяОбъектаМетаданных", ДанныеОбъектаМетаданных.ИмяОбъектаМетаданных);
	
	// Для всех объектов метаданных, кроме перечислений, достаточно проверить существование.
	Если Не ДанныеОбъектаМетаданных.ЭтоПеречисление Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Для перечисления нужно проверить существование значения, указанного в настройках.
	ПолеЗначенияПеречисления = ПеревестиЗначение("ЗначенияПеречисления", Словарь);
	ЗначениеПеречисления = ОбъектМетаданных[ПолеЗначенияПеречисления].Найти(ДанныеОбъектаМетаданных.ЗначениеПеречисления);
	
	Результат.Успешно = (ЗначениеПеречисления <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеОбъектаМетаданныхДляПроверкиСуществования(ИсходноеИмяОбъектаМетаданных, Словарь)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОбъектаМетаданных", ИсходноеИмяОбъектаМетаданных);
	Результат.Вставить("ЭтоПеречисление",      Ложь);
	Результат.Вставить("ЗначениеПеречисления", "");
	
	Если ПустаяСтрока(ИсходноеИмяОбъектаМетаданных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Преобразование имени объекта метаданных верхнего уровня в единственное число.
	МассивИмени = СтрРазделить(ИсходноеИмяОбъектаМетаданных, ".");
	МассивИмени[0] = ИмяОбъектаМетаданныхВЕдинственномЧисле(МассивИмени[0], Словарь);
	Результат.ИмяОбъектаМетаданных = СтрСоединить(МассивИмени, ".");
	
	Если СтрНачинаетсяС(Результат.ИмяОбъектаМетаданных, ПеревестиЗначение("Перечисление", Словарь)) Тогда
		Результат.ЭтоПеречисление = Истина;
		
		МассивИмени = СтрРазделить(Результат.ИмяОбъектаМетаданных, ".");
		
		// Не указано значение перечисления.
		Если МассивИмени.Количество() < 3 Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Существование значения перечисления проверяется отдельно через "ЗначенияПеречисления".
		Результат.ЗначениеПеречисления = МассивИмени[МассивИмени.ВГраница()];
		
		// Оставляем в имени объекта метаданных только "Перечисление.ИмяПеречисления".
		МассивИмени.Удалить(МассивИмени.ВГраница());
		Результат.ИмяОбъектаМетаданных = СтрСоединить(МассивИмени, ".");
		
		Возврат Результат;
	КонецЕсли;
	
	// Для идентификаторов команды печати оставляем только объект метаданных, к которому относится идентификатор.
	Если (МассивИмени.Количество() > 2) И (СтрСравнить(МассивИмени[2], "ИдентификаторКомандыПечати") = 0) Тогда
		Результат.ИмяОбъектаМетаданных = МассивИмени[0] + "." + МассивИмени[1];
		Возврат Результат;
	КонецЕсли;
	
	// Для внешних отчетов заменяем "ВнешнийОтчет." на "Отчет.".
	ЭтоВнешнийОтчет = Ложь;
	ВнешнийОтчетСтрока = ПеревестиЗначение("ВнешнийОтчет", Словарь) + ".";
	Если СтрНачинаетсяС(Результат.ИмяОбъектаМетаданных, ВнешнийОтчетСтрока) Тогда
		Результат.ИмяОбъектаМетаданных = СтрЗаменить(Результат.ИмяОбъектаМетаданных, ВнешнийОтчетСтрока, ПеревестиЗначение("Отчет", Словарь) + ".");
		ЭтоВнешнийОтчет = Истина;
	КонецЕсли;
	
	ОтчетСтрока = ПеревестиЗначение("Отчет", Словарь);
	Если СтрНачинаетсяС(Результат.ИмяОбъектаМетаданных, ОтчетСтрока) Тогда
		МассивИмени = СтрРазделить(Результат.ИмяОбъектаМетаданных, ".");
		Если МассивИмени.Количество() < 2 Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Если у отчета указан вариант, то проверяем только наличие самого объекта метаданных отчета.
		// В том числе при формировании отчета без формы.
		
		КлючевыеСловаФормыОтчета = Новый Массив;
		КлючевыеСловаФормыОтчета.Добавить("ФормированиеОтчетаБезФормы");
		КлючевыеСловаФормыОтчета.Добавить("ФормаОбъекта");
		КлючевыеСловаФормыОтчета.Добавить("ФормаНастроек");
		КлючевыеСловаФормыОтчета.Добавить("_");
		
		Если СтрНайтиПоМассиву(МассивИмени[МассивИмени.ВГраница()], КлючевыеСловаФормыОтчета).Успешно
				Или ЭтоВнешнийОтчет Тогда
			Результат.ИмяОбъектаМетаданных = МассивИмени[0] + "." + МассивИмени[1];
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Для действий над элементами нужно убрать само действие из имени объекта метаданных.
	ДействияНадЭлементами = Новый Массив;
	ДействияНадЭлементами.Добавить(".КопированиеЭлемента");
	ДействияНадЭлементами.Добавить(".ПометкаНаУдалениеЭлемента");
	ДействияНадЭлементами.Добавить(".УдалениеПомеченногоЭлемента");
	
	Если Не СтрЗаканчиваетсяНаПоМассиву(Результат.ИмяОбъектаМетаданных, ДействияНадЭлементами).Успешно Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивИмени = СтрРазделить(Результат.ИмяОбъектаМетаданных, ".");
	МассивИмени.Удалить(МассивИмени.ВГраница());
	Результат.ИмяОбъектаМетаданных = СтрСоединить(МассивИмени, ".");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяОбъектаМетаданныхВЕдинственномЧисле(ИсходноеИмяОбъектаМетаданных, Словарь)
	
	Имена = Новый Соответствие();
	Имена.Вставить(ПеревестиЗначение("ПланыОбмена",             Словарь), ПеревестиЗначение("ПланОбмена", Словарь));
	Имена.Вставить(ПеревестиЗначение("Справочники",             Словарь), ПеревестиЗначение("Справочник", Словарь));
	Имена.Вставить(ПеревестиЗначение("Документы",               Словарь), ПеревестиЗначение("Документ", Словарь));
	Имена.Вставить(ПеревестиЗначение("Задачи",                  Словарь), ПеревестиЗначение("Задача", Словарь));
	Имена.Вставить(ПеревестиЗначение("БизнесПроцессы",          Словарь), ПеревестиЗначение("БизнесПроцесс", Словарь));
	Имена.Вставить(ПеревестиЗначение("ПланыВидовХарактеристик", Словарь), ПеревестиЗначение("ПланВидовХарактеристик", Словарь));
	Имена.Вставить(ПеревестиЗначение("ПланыСчетов",             Словарь), ПеревестиЗначение("ПланСчетов", Словарь));
	Имена.Вставить(ПеревестиЗначение("ПланыВидовРасчета",       Словарь), ПеревестиЗначение("ПланВидовРасчета", Словарь));
	Имена.Вставить(ПеревестиЗначение("Перечисления",            Словарь), ПеревестиЗначение("Перечисление", Словарь));
	Имена.Вставить(ПеревестиЗначение("РегламентныеЗадания",     Словарь), ПеревестиЗначение("РегламентноеЗадание", Словарь));
	
	ИмяВЕдинственномЧисле = Имена.Получить(ИсходноеИмяОбъектаМетаданных);
	Если ИмяВЕдинственномЧисле = Неопределено Тогда
		Возврат ИсходноеИмяОбъектаМетаданных;
	КонецЕсли;
	
	Возврат ИмяВЕдинственномЧисле;
	
КонецФункции

&НаКлиенте
Процедура СформироватьКлючиДляПроверкиОбъектов()
	
	// Ключи параметров, в которых могут быть указаны объекты метаданных.
	МассивПроверяемыхКлючей = Новый Массив;
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("ТипВопроса",                      Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("ИмяТаблицыВыбора",                Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("СпособОтображенияПодсказки",      Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("ТипТабличногоВопроса",            Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("ИмяОбъектаМетаданныхМакета",      Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("ОбластьПоискаДублей",             Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("ФорматХраненияОдностраничный",    Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("ФорматХраненияМногостраничный",   Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("Разрешение",                      Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("Цветность",                       Словарь));
	МассивПроверяемыхКлючей.Добавить(ПеревестиЗначение("ФорматСканированногоИзображения", Словарь));
	
	МассивПроверяемыхКлючей.Добавить("&ОжидаемаяФорма");
	
КонецПроцедуры

&НаКлиенте
Функция ОбъектПоЗначениюКлючаСуществует(ИмяКлюча, Значение, ИмяФормыСПараметрами, НомерСтроки)
	
	Если МассивПроверяемыхКлючей.Найти(ИмяКлюча) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Исключение для ожидаемой формы MessageBox.
	Если (СтрСравнить(ИмяКлюча, "&ОжидаемаяФорма") = 0) И (СтрСравнить(Значение, "MessageBox") = 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроверяемыйОбъект = СтрЗаменить(Значение, """", "");
	
	РезультатПроверки = ОбъектМетаданныхСуществует(ПроверяемыйОбъект, Словарь);
	
	Если РезультатПроверки.Успешно Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗаписатьОшибкуНекорректныхНастроек(РезультатПроверки.ИмяОбъектаМетаданных, ИмяФормыСПараметрами);
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция РеквизитФормыСуществует(ИмяРеквизита)
	
	РеквизитыФормы = ЭтотОбъект.ПолучитьРеквизиты();
	
	Для Каждого Реквизит Из РеквизитыФормы Цикл
		
		Если СтрСравнить(Реквизит.Имя, ИмяРеквизита) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция НастройкиПроверки()
	
	СписокФайловНастроек = Новый СписокЗначений;
	
	ДобавитьВПротоколТестирования(НСтр("ru='Чтение настроек'; en='Чтение настроек'", КодЯзыкаТекущейПроверки));
	
	Если ПустаяСтрока(ПолныйПутьКФайлуНастроек) Тогда
		
		// Файл доступен только на стороне клиента.
		ПолныйПутьКФайлуНастроек = ?( КонтекстЗапуска <> Неопределено,
			КонтекстЗапуска.ПолноеИмяФайлаПроверки, ПолноеИмяФайлаЭтойОбработки());
			
		ФайлНастроек = Новый Файл(ПолныйПутьКФайлуНастроек);
		
		ПолныйПутьКФайлуНастроек = ФайлНастроек.Путь;
	КонецЕсли;
	
	ПутиФайлов = СтрРазделить(ПолныйПутьКФайлуНастроек, ";", Ложь);
	
	Для Каждого ПутьКФайлуНастроек Из ПутиФайлов Цикл
		
		ФайлНастроек = Новый Файл(ПутьКФайлуНастроек);
		
		Если Не ФайлНастроек.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
			ДобавитьВПротоколТестирования(СтрШаблон(НСтр("ru='Файла настроек %1 отсутствует'; en='Файла настроек %1 отсутствует'",
				КодЯзыкаТекущейПроверки), ПолныйПутьКФайлуНастроек));
				Продолжить;
		КонецЕсли;
			
		Если ФайлНастроек.ЭтоКаталог() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
			// Основной файл настроек/
			ШаблонаПутиИмениФайла = ФайлНастроек.ПолноеИмя + ПолучитьРазделительПутиКлиента() + НСтр("ru = 'Дымовой тест всех форм и объектов%1.yaml';
				|en = 'Дымовой тест всех форм и объектов%1.yaml'");
			
			ИмяФайла = СтрШаблон(ШаблонаПутиИмениФайла,
				?(ЭтоМеждународнаяБСП(), "_en", ""));
			
			ДобавитьВПротоколТестирования(СтрШаблон(НСтр("ru='Файл настроек: %1'; en='Файл настроек: %1'", КодЯзыкаТекущейПроверки),
				ИмяФайла));
				
				
			Если ФайлСуществует(ИмяФайла) Тогда
				СписокФайловНастроек.Добавить(ИмяФайла);
			КонецЕсли;
			
			// Дополнительный файл настроек. Совпадает по имени с вариантом запуска.
			// Дымовой тест всех форм и объектов_Администратор_ФункциональныеОпцииВыключены.yaml
			СуффиксДополнительногоФайла = СтрШаблон("_%1_%2%3",
				ИмяПользователя(), ВариантЗапуска, ?(ЭтоМеждународнаяБСП(), "_en", ""));
				
			ИмяФайла = СтрШаблон(ШаблонаПутиИмениФайла,
				СуффиксДополнительногоФайла);
				
			ДобавитьВПротоколТестирования(СтрШаблон(НСтр("ru='Проверка файла настроек: %1'; en='Проверка файла настроек: %1'", КодЯзыкаТекущейПроверки),
				ИмяФайла));
			Если ФайлСуществует(ИмяФайла) Тогда
				СписокФайловНастроек.Добавить(ИмяФайла);
			КонецЕсли;
			
		Иначе
			
			СписокФайловНастроек.Добавить(ПутьКФайлуНастроек);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если СписокФайловНастроек.Количество() > 0 Тогда
		
		НастройкиПроверки = "";
		Для Каждого ФайлНастроек Из СписокФайловНастроек Цикл
			ДобавитьВПротоколТестирования(СтрШаблон(НСтр("ru='Чтение файла настроек: %1'; en='Чтение файла настроек: %1'", КодЯзыкаТекущейПроверки),
				ФайлНастроек.Значение));
			
			ТекстИзФайлаСНастройками = Новый ЧтениеТекста(ФайлНастроек.Значение, КодировкаТекста.UTF8);
			НастройкиПроверки = НастройкиПроверки + ТекстИзФайлаСНастройками.Прочитать() + Символы.ПС;
			ТекстИзФайлаСНастройками.Закрыть();
		КонецЦикла;
		
	Иначе
		ДобавитьВПротоколТестирования(НСтр("ru='Чтение настроек из макета обработки'; en='Чтение настроек из макета обработки'",
			КодЯзыкаТекущейПроверки));
		НастройкиПроверки = НастройкиИзМакета();
	КонецЕсли;
	
	Возврат НастройкиПроверки;
	
КонецФункции

&НаКлиенте
Функция СтрокаОписанияНастроек(ОписаниеНастроек, НомерСтроки, СтрокаИзФайла = "", Разделитель = Неопределено)
	
	ПолнаяСтрокаИзФайла = СтрПолучитьСтроку(ОписаниеНастроек, НомерСтроки);
	
	Если (Не СтрНачинаетсяС(ПолнаяСтрокаИзФайла, "//")) И (СтрНайти(ПолнаяСтрокаИзФайла, Символы.Таб) > 0) Тогда
		ТипОшибки = ОшибкаСимволТабуляцииВФайлеНастроек();
		ШаблонОшибки = НСтр("ru = 'Обнаружен символ табуляции в строке %1 файла настроек:';
			|en = 'Обнаружен символ табуляции в строке %1 файла настроек:'") + Символы.ПС + ПолнаяСтрокаИзФайла;
		ОписаниеОшибки = СтрШаблон(ШаблонОшибки, Формат(НомерСтроки, НСтр("ru = 'ЧГ=0'; en = 'NG=0'")));
		ЗаписатьОшибку("ФайлНастроек", "ФайлНастроек", ТипОшибки, Неопределено, ОписаниеОшибки,, Ложь);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаИзФайла) Тогда
		СтрокаИзФайла = СокрЛП(ПолнаяСтрокаИзФайла);
		Если СтрНачинаетсяС(СтрокаИзФайла, " ")
		 Или СтрНачинаетсяС(СтрокаИзФайла, "//")
		 Или СтрНачинаетсяС(СтрокаИзФайла, "#КонецОбласти") Тогда
			Возврат "";
		КонецЕсли;
	Иначе
		СтрокаИзФайла = СтрокаИзФайла + Разделитель + ПолнаяСтрокаИзФайла;
	КонецЕсли;
	
	Если СтрНачинаетсяС(СтрПолучитьСтроку(ОписаниеНастроек, НомерСтроки + 1), " ") Тогда
		НомерСтроки = НомерСтроки + 1;
		СтрокаОписанияНастроек(ОписаниеНастроек, НомерСтроки, СтрокаИзФайла, Разделитель);
	КонецЕсли;
	
	Возврат СтрокаИзФайла;

КонецФункции

&НаСервере
Функция НастройкиИзМакета()
	
	ОписаниеНастроек = "";
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Если ОбъектОбработка.Метаданные().Макеты.Найти("Настройки") <> Неопределено Тогда
		ДокументИзМакета = ОбъектОбработка.ПолучитьМакет("Настройки");
		ОписаниеНастроек = ДокументИзМакета.ПолучитьТекст();
	КонецЕсли;
	
	Возврат ОписаниеНастроек;

КонецФункции

// Подготовить список форм и их параметры открытия.

&НаКлиенте
Функция ВидимостьПоФильтру(ДеревоЭлементов, ИскомыйТекст)
	
	Скрыть = Неопределено;
	
	Для Каждого ЭлементДерева Из ДеревоЭлементов Цикл
		
			ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
			Если ЭлементыДерева.Количество() > 0 Тогда
				Скрываем = ВидимостьПоФильтру(ЭлементыДерева, ИскомыйТекст);
			КонецЕсли;
			
			Если Скрываем = Ложь Тогда
				ЭлементДерева.Скрыть = Ложь;
			Иначе
				
				Если СтрНайти(ВРег(ЭлементДерева.ПолноеИмя), ИскомыйТекст) > 0 Тогда
					ЭлементДерева.Скрыть = Ложь;
				Иначе
					ЭлементДерева.Скрыть = СтрНайти(ВРег(ЭлементДерева.Наименование), ИскомыйТекст) = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭлементДерева.Скрыть = Ложь Тогда
				Скрыть = Ложь;
			КонецЕсли;
		
	КонецЦикла;
	
	Возврат Скрыть;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьВсемЭлементам(ДеревоЭлементов)
	
	Для Каждого ЭлементДерева Из ДеревоЭлементов Цикл
		ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() > 0 Тогда
			УстановитьВидимостьВсемЭлементам(ЭлементыДерева);
		КонецЕсли;
		
		ЭлементДерева.Скрыть = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоФормПослеВыбора()
	
	ВыбраннаяФорма = ДеревоФорм.НайтиПоИдентификатору(Элементы.ДеревоФорм.ТекущаяСтрока);
	
	ЭлементыНаЭтомУровне = ВыбраннаяФорма.ПолучитьЭлементы();
	Родитель = ВыбраннаяФорма.ПолучитьРодителя();
	
	Если Элементы.ДеревоФорм.ТекущиеДанные.Выбор = 2 Тогда
		Элементы.ДеревоФорм.ТекущиеДанные.Выбор = 0;
	КонецЕсли;
	
	УстановкаПометокВниз(ЭлементыНаЭтомУровне, Элементы.ДеревоФорм.ТекущиеДанные.Выбор);
	Если Родитель <> Неопределено Тогда
		УстановкаПометокВверх(Родитель);
	КонецЕсли;
	
	ОпределитьКоличествоФормДляТестирования();

КонецПроцедуры

&НаКлиенте
Процедура УстановкаПометокВниз(Ветка, Значение)
	
	Для Каждого ЭлементВетки Из Ветка Цикл
		
		Если СтрСравнить(ЭлементВетки.ТипФормы, "Недоступна") = 0 Тогда
			ЭлементВетки.Выбор = 0;
			Продолжить;
		КонецЕсли;
		
		ЭлементВетки.Выбор = Значение;
		ЭлементыУровня = ЭлементВетки.ПолучитьЭлементы();
		Если ЭлементыУровня.Количество() > 0 Тогда
			УстановкаПометокВниз(ЭлементыУровня, Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаПометокВверх(Ветка)
	
	ЕстьИстина = Ложь;
	ЕстьЛожь   = Ложь;
	Для Каждого ЭлементВетки Из Ветка.ПолучитьЭлементы() Цикл
		
		Если ЭлементВетки.Выбор = 1 Тогда
			ЕстьИстина = Истина;
		КонецЕсли;
		
		Если ЭлементВетки.Выбор = 0 Тогда
			ЕстьЛожь = Истина;
		КонецЕсли;
		
		Если ЭлементВетки.Выбор = 2 Тогда
			ЕстьИстина = Истина;
			ЕстьЛожь = Истина;
		КонецЕсли;
		
		Если (ЕстьИстина = Истина) И (ЕстьЛожь = Истина) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИстина И ЕстьЛожь Тогда
		ЗначениеВыбора = 2;
	ИначеЕсли ЕстьИстина И (Не ЕстьЛожь) Тогда
		ЗначениеВыбора = 1;
	Иначе
		ЗначениеВыбора = 0;
	КонецЕсли;
	
	Ветка.Выбор = ЗначениеВыбора;
	
	Родитель = Ветка.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		УстановкаПометокВверх(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервичнаяЗагрузкаНастроек()
	
	ОпределитьФормыДляТестирования();
	
	Элементы.Показать.СписокВыбора.Добавить("По умолчанию", НСтр("ru='По умолчанию'; en='По умолчанию'", КодЯзыкаТекущейПроверки)); // АПК:1297 - значение не локализуется
	Элементы.Показать.СписокВыбора.Добавить("Выбранные", НСтр("ru='Выбранные'; en='Выбранные'", КодЯзыкаТекущейПроверки));
	Элементы.Показать.СписокВыбора.Добавить("Все", НСтр("ru='Все'; en='Все'", КодЯзыкаТекущейПроверки));
	ТестируемыеФормы.Сортировать("ПолноеИмя");
	
	СсылочныеТипы = СсылочныеТипы();
	
	ЗапуститьПроверку = Ложь;
	ЗавершатьРаботу   = Ложь;
	
	ОчиститьСообщения();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокФорм;
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСправаГоризонтально;
	Элементы.СтраницаЗагрузка.Видимость = Ложь;
	Элементы.ЭмулироватьМодельСервиса.Доступность = Истина;
	
	ВыполнитьПереходНаСтраницуОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокФормИИхПараметрыОткрытия(НастройкиФорм, Словарь)
	
	ДеревоФорм.ПолучитьЭлементы().Очистить();
	НепроверяемыеФормы = ПодготовитьСписокНепроверяемыхФорм(НастройкиФорм, Словарь);
	НедоступныеМетаданные = МетаданныеНедоступныеПоФункциональнымОпциям(Словарь);
	ТаблицаВариантовОтчета = ВариантыОтчета(Словарь);
	ПараметрическиеРегламентныеЗадания = ПодготовитьСписокПараметрическихРегламентныхЗаданий(НастройкиФорм, Словарь);
	МассивОбъектовМетаданныхСОсновнойФормойСписка = ОбъектыМетаданныхСОсновнойФормойСписка();
	
	ИскатьПоРасширениям = Ложь;
	ДоступныеРасширения = Новый Соответствие;
	СтрокаРасширений = НастройкиФорм["СтрокаРасширений"];
	Если СтрокаРасширений <> Неопределено И Не ПустаяСтрока(СтрокаРасширений) Тогда
		ИскатьПоРасширениям = Истина;
		ДоступныеРасширения = ОпределитьСписокДоступныхРасширений(СтрокаРасширений, Словарь);
	КонецЕсли;
	
	НастройкиФорм.Вставить("ДоступныеРасширения", ДоступныеРасширения);
	НастройкиФорм.Вставить("ИскатьПоРасширениям", ИскатьПоРасширениям);
	
	ПодготовитьСписокНегативныхСценариев(НастройкиФорм);
	
	УзелКорень = ДобавитьЭлементМетаданныхВДерево(Метаданные.Имя, ДеревоФорм);
	УзелКорень.Выбор = 2;
	
	УзелМетаданных = ДобавитьЭлементМетаданныхВДерево(НСтр("ru='Общие формы'; en='Common forms'", КодЯзыкаТекущейПроверки), УзелКорень);
	УзелМетаданных.Картинка = БиблиотекаКартинок.Форма;
	УзелМетаданных.Выбор = 2;
	
	ПодготовитьСписокОбщихФорм(НастройкиФорм, НедоступныеМетаданные, НепроверяемыеФормы, УзелМетаданных);
	
	УзелОтчеты = Неопределено;
	
	СписокИменПроверяемыхОбъектов = ПодготовитьСписокИменПроверяемыхОбъектов();
	
	Для Каждого ОписаниеОбъектаМетаданных Из СписокИменПроверяемыхОбъектов Цикл
		
		ИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных.ИмяМнЧ;
		
		УзелМетаданных = ДобавитьЭлементМетаданныхВДерево(ИмяОбъектаМетаданных, УзелКорень);
		УзелМетаданных.Картинка = ОписаниеОбъектаМетаданных.Картинка;
		УзелМетаданных.Выбор = 2;
		
		Если ИмяОбъектаМетаданных = "Отчеты" Тогда
			УзелОтчеты = УзелМетаданных;
		КонецЕсли;
		
		Для Индекс = 0 По Метаданные[ИмяОбъектаМетаданных].Количество() - 1 Цикл
			
			ОбъектМетаданных = Метаданные[ИмяОбъектаМетаданных].Получить(Индекс);
			
			УзелОбъектовМетаданных = ДобавитьЭлементМетаданныхВДерево(ОбъектМетаданных.Имя, УзелМетаданных);
			УзелОбъектовМетаданных.Картинка = ОписаниеОбъектаМетаданных.Картинка;
			УзелОбъектовМетаданных.Выбор = 2;
			
			Если (НедоступныеМетаданные.Получить(ОбъектМетаданных.ПолноеИмя()) = Истина)
			 Или (Не ПравоДоступа("Просмотр", ОбъектМетаданных)) Тогда
				УзелОбъектовМетаданных.ТипФормы = "Недоступна";
				Продолжить;
			КонецЕсли;
			
			// Записываем форму списка в ПолноеИмя, чтобы была возможность открыть ее по нажатию на "Запустить".
			Если МассивОбъектовМетаданныхСОсновнойФормойСписка.Найти(ИмяОбъектаМетаданных) <> Неопределено
					И ОбъектМетаданных.ОсновнаяФормаСписка <> Неопределено Тогда
				УзелОбъектовМетаданных.ТипФормы = "ОткрытиеФормы";
				УзелОбъектовМетаданных.ПолноеИмя = СтрШаблон("%1.%2.%3.%4",
					ОписаниеОбъектаМетаданных.Имя,
					ОбъектМетаданных.Имя,
					ПеревестиЗначение("Форма", Словарь),
					ОбъектМетаданных.ОсновнаяФормаСписка.Имя);
			КонецЕсли;
			
			// отчет
			Если ИмяОбъектаМетаданных = "Отчеты" Тогда
				
				Если Не ПроверитьРасширениеОбъекта(ОбъектМетаданных, ИскатьПоРасширениям, ДоступныеРасширения) Тогда
					УзелОбъектовМетаданных.ТипФормы = "Недоступна";
					Продолжить;
				КонецЕсли;
				
				ПодготовитьСписокФормОтчетаДляТестирования(НастройкиФорм, НепроверяемыеФормы, ОбъектМетаданных.Имя,
					УзелОбъектовМетаданных, ТаблицаВариантовОтчета, Словарь);
				
			Иначе
				
				ПодготовитьСписокФормДляОткрытияИКопирования(ИмяОбъектаМетаданных, НастройкиФорм, НепроверяемыеФормы, ОбъектМетаданных,
					УзелОбъектовМетаданных, Словарь);
				
			КонецЕсли;
			
			ПодготовитьСписокПечатныхФорм(НастройкиФорм, НепроверяемыеФормы, ОбъектМетаданных,
				УзелОбъектовМетаданных, Словарь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДобавитьВДеревоДополнительныеОтчеты(УзелОтчеты, НастройкиФорм, НепроверяемыеФормы, Словарь);
	
	Если ЭтоПолноправныйПользователь(Словарь) Тогда
		УзелМетаданных = ДобавитьЭлементМетаданныхВДерево(НСтр("ru='Регламентные задания'; en='Scheduled jobs'", КодЯзыкаТекущейПроверки), УзелКорень);
		УзелМетаданных.Картинка = БиблиотекаКартинок.РегламентныеЗадания;
		УзелМетаданных.Выбор = 2;
		
		ДобавитьВДеревоРегламентныеЗадания(УзелМетаданных, НастройкиФорм, ПараметрическиеРегламентныеЗадания, НепроверяемыеФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоРегламентныеЗадания(ЭлементыДерева, НастройкиФорм, ПараметрическиеРегламентныеЗадания, НепроверяемыеФормы)
	
	Для Каждого РегламентноеЗадание Из Метаданные.РегламентныеЗадания Цикл
		
		ЭлементДерева = ДобавитьЭлементМетаданныхВДерево(РегламентноеЗадание.Имя, ЭлементыДерева);
		ЭлементДерева.Картинка = БиблиотекаКартинок.РегламентноеЗадание;
		ЭлементДерева.ПолноеИмя = РегламентноеЗадание.ПолноеИмя();
		ЭлементДерева.ИмяМетода = РегламентноеЗадание.ИмяМетода;
		
		Если ((НепроверяемыеФормы[ЭлементДерева.ПолноеИмя] <> Неопределено) И (НепроверяемыеФормы[ЭлементДерева.ПолноеИмя]))
				Или (ПараметрическиеРегламентныеЗадания.Найти(ЭлементДерева.ПолноеИмя) <> Неопределено) Тогда
			ЭлементДерева.ТипФормы = "Недоступна";
			ЭлементДерева.Выбор = Ложь;
			
			Продолжить;
		КонецЕсли;
		
		ЭлементДерева.ТипФормы = "РегламентноеЗадание";
		ЭлементДерева.Выбор = Истина;
		
		// Добавим в поведение ожидаемые ошибки, если они есть.
		РазделНастроекФорм = НастройкиФорм["Открытие.ПараметризуемыеФормы"];
		Если РазделНастроекФорм = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиРегламентногоЗадания = РазделНастроекФорм[ЭлементДерева.ПолноеИмя];
		Если НастройкиРегламентногоЗадания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого НастройкаРегламентногоЗадания Из НастройкиРегламентногоЗадания Цикл
			Для Каждого Поведение Из НастройкаРегламентногоЗадания.Поведение Цикл
				ЭлементДерева.Поведение.Добавить(Поведение.Значение, Поведение.Представление);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоДополнительныеОтчеты(УзелОтчеты, Знач НастройкиФорм, Знач НепроверяемыеФормы, Словарь)
	
	Если УзелОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОбъектовМетаданных = ПодготовитьСписокИменПроверяемыхОбъектов();
	КартинкаОтчета = ТаблицаОбъектовМетаданных.Найти("Отчет", "Имя").Картинка;
	
	ТаблицаДополнительныхОтчетов = ВариантыОтчета(Словарь, Истина);
	
	ТаблицаРазличныхОтчетов = ТаблицаДополнительныхОтчетов.Скопировать(, "ИмяОтчета");
	ТаблицаРазличныхОтчетов.Свернуть("ИмяОтчета");
	Для Каждого СтрокаОтчета Из ТаблицаРазличныхОтчетов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОтчета.ИмяОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		УзелОбъектовМетаданных = ДобавитьЭлементМетаданныхВДерево(СтрокаОтчета.ИмяОтчета + " (дополнительный)", УзелОтчеты);
		УзелОбъектовМетаданных.Картинка = КартинкаОтчета;
		УзелОбъектовМетаданных.Выбор = 2;
		
		ПодготовитьСписокФормОтчетаДляТестирования(НастройкиФорм, НепроверяемыеФормы, СтрокаОтчета.ИмяОтчета, УзелОбъектовМетаданных,
			ТаблицаДополнительныхОтчетов, Словарь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементМетаданныхВДерево(Знач ИмяОбъектМетаданных, Знач УзелДерева)
	
	ЭлементыДерева = УзелДерева.ПолучитьЭлементы();
	НовыйУзел = ЭлементыДерева.Добавить();
	НовыйУзел.Наименование = ИмяОбъектМетаданных;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ПодготовитьСписокФормДляОткрытияИКопирования(Знач ИмяОбъектаМетаданных, Знач НастройкиФорм, Знач НепроверяемыеФормы, Знач ОбъектМетаданных, ЭлементыДерева, Словарь)
	
	ИскатьПоРасширениям = НастройкиФорм["ИскатьПоРасширениям"];
	ДоступныеРасширения = НастройкиФорм["ДоступныеРасширения"];
	
	Для ИндексФормы = 0 По ОбъектМетаданных.Формы.Количество() - 1 Цикл
		
		ТекущаяФорма       = ОбъектМетаданных.Формы.Получить(ИндексФормы);
		ПолноеИмяФормы     = ТекущаяФорма.ПолноеИмя();
		
		ЭлементыФорм  = ДобавитьЭлементМетаданныхВДерево(ТекущаяФорма.Имя, ЭлементыДерева);
		ЭлементыФорм.ПолноеИмя = ПолноеИмяФормы;
		
		Если НепроверяемыеФормы[ПолноеИмяФормы] <> Неопределено
			Или (Не ПроверитьРасширениеОбъекта(ТекущаяФорма, ИскатьПоРасширениям, ДоступныеРасширения)) Тогда
			ЭлементыФорм.ТипФормы = "Недоступна";
			Продолжить;
		КонецЕсли;
		
		Если НастройкиФорм["Открытие.ПараметризуемыеФормы"] <> Неопределено Тогда
			ПараметрыОткрытияФормы = НастройкиФорм["Открытие.ПараметризуемыеФормы"][ПолноеИмяФормы];
		Иначе
			ПараметрыОткрытияФормы = Неопределено;
		КонецЕсли;
		
		Если НастройкиФорм["Копирование.ПараметризуемыеФормы"] <> Неопределено Тогда
			ПараметрыКопированияФормы = НастройкиФорм["Копирование.ПараметризуемыеФормы"][ПолноеИмяФормы];
		Иначе
			ПараметрыКопированияФормы = Неопределено;
		КонецЕсли;
		
		ТипОсновнойФормы = ОпределитьОсновнуюФорму(ТекущаяФорма, ОбъектМетаданных, ИмяОбъектаМетаданных);
		
		Ключи = Новый Массив;
		Если ((ТипОсновнойФормы = "ОсновнаяФормаОбъекта") Или (ТипОсновнойФормы = "ОсновнаяФормаГруппы") Или (ТипОсновнойФормы = "ОсновнаяФормаУзла"))
		   И ((ПараметрыОткрытияФормы = Неопределено) Или (ПараметрыКопированияФормы = Неопределено)) Тогда
			
			Ключи = СлучайныеОбъектыДляТестирования(ИмяОбъектаМетаданных, ОбъектМетаданных, ТекущаяФорма, ТипОсновнойФормы, Словарь);
			
		КонецЕсли;
		
		ПравоДобавления = ЕстьПравоДобавленияУОбъекта(ИмяОбъектаМетаданных, ОбъектМетаданных);
		
		ПодготовитьСписокФормДляОткрытия(ПараметрыОткрытияФормы, Ключи, ТипОсновнойФормы, ПравоДобавления, ЭлементыФорм);
		ПодготовитьСписокФормДляКопирования(ПараметрыКопированияФормы, Ключи, ТипОсновнойФормы, ПравоДобавления, ЭлементыФорм, Словарь);
		
	КонецЦикла;
	
	Если ПроверятьКопированиеИУдаление И ЭтоПолноправныйПользователь(Словарь) Тогда
		
		Если (ВариантЗапуска) <> "Полный" Или (РежимФО = "По умолчанию") Тогда // АПК:1297 - не локализуется
			
			ПараметрыДляКопированияИУдаления = Новый Структура;
			ПараметрыДляКопированияИУдаления.Вставить("ИмяОбъектаМетаданных", ИмяОбъектаМетаданных);
			ПараметрыДляКопированияИУдаления.Вставить("ОбъектМетаданных",     ОбъектМетаданных);
			ПараметрыДляКопированияИУдаления.Вставить("ПравоДобавления",      ПравоДобавления);
			ПараметрыДляКопированияИУдаления.Вставить("ЭлементыДерева",       ЭлементыДерева);
			ПараметрыДляКопированияИУдаления.Вставить("ТипОсновнойФормы",     ТипОсновнойФормы);
			ПараметрыДляКопированияИУдаления.Вставить("НепроверяемыеФормы",   НепроверяемыеФормы);
			ПараметрыДляКопированияИУдаления.Вставить("НастройкиФорм",        НастройкиФорм);
			
			ПодготовитьОбъектыДляКопированияИУдаления(ПараметрыДляКопированияИУдаления, Словарь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОбъектыДляКопированияИУдаления(ПараметрыДляКопированияИУдаления, Словарь)
	
	ИмяОбъектаМетаданных = ПараметрыДляКопированияИУдаления.ИмяОбъектаМетаданных;
	ОбъектМетаданных     = ПараметрыДляКопированияИУдаления.ОбъектМетаданных;
	ПравоДобавления      = ПараметрыДляКопированияИУдаления.ПравоДобавления;
	ЭлементыДерева       = ПараметрыДляКопированияИУдаления.ЭлементыДерева;
	ТипОсновнойФормы     = ПараметрыДляКопированияИУдаления.ТипОсновнойФормы;
	НепроверяемыеФормы   = ПараметрыДляКопированияИУдаления.НепроверяемыеФормы;
	НастройкиФорм        = ПараметрыДляКопированияИУдаления.НастройкиФорм;
	
	Если (ПравоДобавления = Неопределено) Или (Не ПравоДобавления) Тогда
		Возврат;
	КонецЕсли;
	
	МассивДопустимыхОбъектов = Новый Массив;
	МассивДопустимыхОбъектов.Добавить(ПеревестиЗначение("ПланыОбмена",             Словарь));
	МассивДопустимыхОбъектов.Добавить(ПеревестиЗначение("Справочники",             Словарь));
	МассивДопустимыхОбъектов.Добавить(ПеревестиЗначение("Документы",               Словарь));
	МассивДопустимыхОбъектов.Добавить(ПеревестиЗначение("ПланыВидовХарактеристик", Словарь));
	МассивДопустимыхОбъектов.Добавить(ПеревестиЗначение("ПланыВидовРасчета",       Словарь));
	МассивДопустимыхОбъектов.Добавить(ПеревестиЗначение("БизнесПроцессы",          Словарь));
	МассивДопустимыхОбъектов.Добавить(ПеревестиЗначение("Задачи",                  Словарь));
	
	Если МассивДопустимыхОбъектов.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДереваДействияНадЭлементами = ДобавитьЭлементМетаданныхВДерево(
		НСтр("ru='ДействияНадЭлементами'; en='ДействияНадЭлементами'"),
		ЭлементыДерева);
	
	ЭлементДереваДействияНадЭлементами.Выбор = Истина;
	
	ИмяЭлемента       = ОбъектМетаданных.ПолноеИмя();
	ИмяОперации       = "КопированиеЭлемента";
	ТипФормы          = ИмяОперации;
	ПолноеИмяЭлемента = ИмяЭлемента + "." + ИмяОперации;
	
	// Проверим, есть ли указанные элементы для проверки копирования.
	НастройкиКопирования = Неопределено;
	ДействияНадЭлементами = НастройкиФорм["ДействияНадЭлементами"];
	Если ДействияНадЭлементами <> Неопределено Тогда
		НастройкиКопирования = ДействияНадЭлементами[ПолноеИмяЭлемента];
	КонецЕсли;
	
	Если НепроверяемыеФормы[ПолноеИмяЭлемента] <> Неопределено Тогда
		ТипФормы = "Недоступна";
		
		ЭлементДерева = ДобавитьЭлементМетаданныхВДерево(ИмяОперации, ЭлементДереваДействияНадЭлементами);
		ЭлементДерева.ПолноеИмя = ПолноеИмяЭлемента;
		ЭлементДерева.Выбор     = Ложь;
		ЭлементДерева.ТипФормы  = ТипФормы;
		
	ИначеЕсли НастройкиКопирования <> Неопределено Тогда
		// Если указаны ссылки элементов для копирования - добавляем в дерево форм каждую.
		Для Каждого НастройкаКопирования Из НастройкиКопирования Цикл
			
			Для Каждого ПараметрКопирования Из НастройкаКопирования.Параметры Цикл
				ЭлементДерева = ДобавитьЭлементМетаданныхВДерево(ИмяОперации, ЭлементДереваДействияНадЭлементами);
				ЭлементДерева.ПолноеИмя = ИмяЭлемента + "." + ИмяОперации;
				ЭлементДерева.Выбор     = Истина;
				ЭлементДерева.Параметры.Добавить(ПараметрКопирования.Значение, ПеревестиЗначение(ИмяОперации, Словарь));
				ЭлементДерева.ПараметрыСтрокой = ПеревестиЗначение(ИмяОперации, Словарь) + " = " + ПолучитьНавигационнуюСсылку(ПараметрКопирования.Значение);
				ЭлементДерева.Наименование     = ЭлементДерева.ПараметрыСтрокой;
				ЭлементДерева.ТипФормы         = ИмяОперации;
				
				Если Не НастройкаКопирования.Свойство("Поведение") Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого Поведение Из НастройкаКопирования.Поведение Цикл
					ЭлементДерева.Поведение.Добавить(Поведение.Значение, Поведение.Представление);
				КонецЦикла;
			КонецЦикла;
			
			ТипФормы = "ПометкаНаУдалениеЭлемента";
			ДобавитьЭлементыДереваПоИменамЭлементаИОперации(ИмяЭлемента,
				НСтр("ru='ПометкаНаУдалениеЭлемента'; en='ПометкаНаУдалениеЭлемента'"),
				ТипФормы,
				ЭлементДереваДействияНадЭлементами,
				НастройкиФорм,
				Словарь,
				НастройкаКопирования);
			
			ТипФормы = "УдалениеПомеченногоЭлемента";
			ДобавитьЭлементыДереваПоИменамЭлементаИОперации(ИмяЭлемента,
				НСтр("ru='УдалениеПомеченногоЭлемента'; en='УдалениеПомеченногоЭлемента'"),
				ТипФормы,
				ЭлементДереваДействияНадЭлементами,
				НастройкиФорм,
				Словарь,
				НастройкаКопирования);
			
		КонецЦикла;
		
	Иначе
		Ключи = СлучайныеОбъектыДляТестирования(ИмяОбъектаМетаданных, ОбъектМетаданных, ИмяОперации, ТипОсновнойФормы, Словарь, 50);
		
		// Для удаления нужно использовать ключ нового элемента, который мы скопируем.
		Для Каждого Ключ Из Ключи Цикл
			
			// Не копируем предопределенные элементы, т.к. их нельзя помечать на удаление.
			Если ЭтоПредопределенныеДанные(Ключ, ИмяОбъектаМетаданных, Словарь) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНачинаетсяС(ИмяЭлемента, ПеревестиЗначение("ПланОбмена", Словарь)) И (Не Ключ.ЭтотУзел) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДерева = ДобавитьЭлементМетаданныхВДерево(ИмяОперации, ЭлементДереваДействияНадЭлементами);
			ЭлементДерева.ПолноеИмя = ИмяЭлемента + "." + ИмяОперации;
			ЭлементДерева.Выбор     = Истина;
			ЭлементДерева.Параметры.Добавить(Ключ, ПеревестиЗначение(ИмяОперации, Словарь));
			ЭлементДерева.ПараметрыСтрокой = ПеревестиЗначение(ИмяОперации, Словарь) + " = " + ПолучитьНавигационнуюСсылку(Ключ);
			ЭлементДерева.Наименование     = ЭлементДерева.ПараметрыСтрокой;
			ЭлементДерева.ТипФормы         = ИмяОперации;
			
			Если ОбъектМожноЗахватитьДляРедактирования(ИмяЭлемента, НастройкиФорм) Тогда
				ЭлементДерева.ИмяМетода = "ОсобаяПроверка";
			КонецЕсли;
			
			// Добавим в поведение ожидаемые ошибки, если они есть.
			РазделНастроекФорм = НастройкиФорм["Копирование.ПараметризуемыеФормы"];
			Если РазделНастроекФорм = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			НастройкиКопированияЭлемента = РазделНастроекФорм[ЭлементДерева.ПолноеИмя];
			Если НастройкиКопированияЭлемента = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого НастройкаКопированияЭлемента Из НастройкиКопированияЭлемента Цикл
				Если Не НастройкаКопированияЭлемента.Свойство("Поведение") Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого Поведение Из НастройкаКопированияЭлемента.Поведение Цикл
					ЭлементДерева.Поведение.Добавить(Поведение.Значение, Поведение.Представление);
				КонецЦикла;
			КонецЦикла;
			
			// Нам нужен только один элемент, поэтому прерываем цикл, как только нашли не предопределенный элемент.
			Прервать;
		КонецЦикла;
		
		ТипФормы = "ПометкаНаУдалениеЭлемента";
		ДобавитьЭлементыДереваПоИменамЭлементаИОперации(ИмяЭлемента,
			НСтр("ru='ПометкаНаУдалениеЭлемента'; en='ПометкаНаУдалениеЭлемента'"),
			ТипФормы,
			ЭлементДереваДействияНадЭлементами,
			НастройкиФорм,
			Словарь);
		
		ТипФормы = "УдалениеПомеченногоЭлемента";
		ДобавитьЭлементыДереваПоИменамЭлементаИОперации(ИмяЭлемента,
			НСтр("ru='УдалениеПомеченногоЭлемента'; en='УдалениеПомеченногоЭлемента'"),
			ТипФормы,
			ЭлементДереваДействияНадЭлементами,
			НастройкиФорм,
			Словарь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыДереваПоИменамЭлементаИОперации(ИмяЭлемента, ИмяОперации, ТипФормы, ЭлементыДерева,
		НастройкиФорм, Словарь, НастройкаКопирования = Неопределено)
	
	ПолноеИмяЭлемента            = ИмяЭлемента + "." + ИмяОперации;
	ПолноеИмяЭлементаКопирование = ИмяЭлемента + ".КопированиеЭлемента";
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ЭлементыДерева",    ЭлементыДерева);
	СтруктураПараметры.Вставить("ПолноеИмяЭлемента", ПолноеИмяЭлемента);
	СтруктураПараметры.Вставить("ИмяЭлемента",       ИмяЭлемента);
	СтруктураПараметры.Вставить("ИмяОперации",       ИмяОперации);
	СтруктураПараметры.Вставить("ТипФормы",          ТипФормы);
	СтруктураПараметры.Вставить("ИмяМетода",         "");
	
	Если ОбъектМожноЗахватитьДляРедактирования(ИмяЭлемента, НастройкиФорм) Тогда
		СтруктураПараметры.ИмяМетода = "ОсобаяПроверка";
	КонецЕсли;
	
	НастройкиОперации = НастройкиФорм["ДействияНадЭлементами"];
	Если НастройкиОперации = Неопределено Тогда
		ДобавитьЭлементДереваПоИмениЭлементаИНастройкам(СтруктураПараметры, Словарь);
		Возврат;
	КонецЕсли;
	
	НастройкиТестируемогоЭлемента = НастройкиОперации[ПолноеИмяЭлементаКопирование];
	Если НастройкиТестируемогоЭлемента = Неопределено Тогда
		// Если не указаны параметры для удаления помеченных, проверим параметры для пометки на удаление.
		ПолноеИмяЭлемента = ИмяЭлемента + ".ПометкаНаУдалениеЭлемента";
		НастройкиТестируемогоЭлемента = НастройкиОперации[ПолноеИмяЭлемента];
		Если НастройкиТестируемогоЭлемента = Неопределено Тогда
			ДобавитьЭлементДереваПоИмениЭлементаИНастройкам(СтруктураПараметры, Словарь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаКопирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры.Вставить("Поведение", НастройкаКопирования.Поведение);
	ДобавитьЭлементДереваПоИмениЭлементаИНастройкам(СтруктураПараметры, Словарь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементДереваПоИмениЭлементаИНастройкам(ПараметрыДобавления, Словарь)
	
	ЭлементДерева = ДобавитьЭлементМетаданныхВДерево(ПараметрыДобавления.ИмяОперации, ПараметрыДобавления.ЭлементыДерева);
	ЭлементДерева.ПолноеИмя    = ПараметрыДобавления.ПолноеИмяЭлемента;
	ЭлементДерева.Наименование = ПараметрыДобавления.ИмяОперации;
	ЭлементДерева.ТипФормы     = ?(ПустаяСтрока(ПараметрыДобавления.ТипФормы), ПараметрыДобавления.ИмяОперации, ПараметрыДобавления.ТипФормы);
	ЭлементДерева.Выбор        = (ПараметрыДобавления.ТипФормы <> "Недоступна");
	
	Если ПараметрыДобавления.Свойство("Параметр") Тогда
		ЭлементДерева.Параметры.Добавить(ПараметрыДобавления.Параметр, ПеревестиЗначение(ПараметрыДобавления.ИмяОперации, Словарь));
		ЭлементДерева.ПараметрыСтрокой = СтрШаблон("%1 = %2",
			ПеревестиЗначение(ПараметрыДобавления.ИмяОперации, Словарь),
			ПолучитьНавигационнуюСсылку(ПараметрыДобавления.Параметр));
		ЭлементДерева.Наименование = ЭлементДерева.ПараметрыСтрокой;
	КонецЕсли;
	
	Если ПараметрыДобавления.Свойство("Поведение") Тогда
		Для Каждого Поведение Из ПараметрыДобавления.Поведение Цикл
			ЭлементДерева.Поведение.Добавить(Поведение.Значение, Поведение.Представление);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокФормОтчетаДляТестирования(Знач НастройкиФорм, Знач НепроверяемыеФормы, Знач ИмяОбъектаМетаданных,
	Знач УзелОбъектовМетаданных, ТаблицаВариантовОтчета, Словарь)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяОтчета", ИмяОбъектаМетаданных);
	
	МассивСтрокВариантовОтчетов = ТаблицаВариантовОтчета.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаВариантаОтчета Из МассивСтрокВариантовОтчетов Цикл
		
		ЭлементВариантОтчета = ДобавитьЭлементМетаданныхВДерево(СтрокаВариантаОтчета.ВариантОтчета, УзелОбъектовМетаданных);
		
		ПолноеИмяФормы = СтрокаВариантаОтчета.ПолноеИмяОтчета + "." + ПеревестиЗначение("ФормаОбъекта", Словарь);
		ДобавитьВариантОтчетаВСписокФормДляПроверки(ПолноеИмяФормы, НастройкиФорм, НепроверяемыеФормы, ЭлементВариантОтчета,
			"ФормаОтчета", СтрокаВариантаОтчета.ВариантОтчета, Словарь);
		
		ПолноеИмяФормы = СтрокаВариантаОтчета.ПолноеИмяОтчета + "." + ПеревестиЗначение("ФормаНастроек", Словарь);
		ДобавитьВариантОтчетаВСписокФормДляПроверки(ПолноеИмяФормы, НастройкиФорм, НепроверяемыеФормы, ЭлементВариантОтчета,
			"ФормаНастроек", СтрокаВариантаОтчета.ВариантОтчета, Словарь);
		
		ПолноеИмяФормы = СтрокаВариантаОтчета.ПолноеИмяОтчета + "." + "ФормированиеОтчетаБезФормы";
		ДобавитьВариантОтчетаВСписокФормДляПроверки(ПолноеИмяФормы, НастройкиФорм, НепроверяемыеФормы, ЭлементВариантОтчета,
			"ФормированиеОтчетаБезФормы", СтрокаВариантаОтчета.ВариантОтчета, Словарь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВариантОтчетаВСписокФормДляПроверки(ПолноеИмяФормы, НастройкиФорм, НепроверяемыеФормы, УзелОбъектовМетаданных,
	ТипФормы, ВариантОтчета, Словарь)
	
	Если НепроверяемыеФормы[ПолноеИмяФормы] = Неопределено Тогда
		
		ПараметрыОткрытияФорм = НастройкиФорм["Открытие.ПараметризуемыеФормы"];
		
		Ключ = ПолноеИмяФормы + "_" + ВариантОтчета[ПеревестиЗначение("КлючВарианта", Словарь)];
		Если (ПараметрыОткрытияФорм <> Неопределено) И (ПараметрыОткрытияФорм[Ключ] <> Неопределено) Тогда
			Для Каждого НастройкаФормы Из ПараметрыОткрытияФорм[Ключ] Цикл
				ДобавитьФормуОтчетаДляТестирования(УзелОбъектовМетаданных, ПолноеИмяФормы, ТипФормы, ВариантОтчета, Словарь, НастройкаФормы);
			КонецЦикла;
		Иначе
			ДобавитьФормуОтчетаДляТестирования(УзелОбъектовМетаданных, ПолноеИмяФормы, ТипФормы, ВариантОтчета, Словарь);
		КонецЕсли;
		
		УзелОбъектовМетаданных.Выбор = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФормуОтчетаДляТестирования(ЭлементыФорм, Знач ПолноеИмяФормы, ТипФормы, ВариантОтчета, Словарь, НастройкаФормы = Неопределено)
	
	Если ПустаяСтрока(ПолноеИмяФормы) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим проверку формирования отчета без формы:
	// 1. У отчета должна быть указана основная СКД.
	// 2. Отчет не должен входить в исключаемые (РассылкаОтчетовПереопределяемый.ОпределитьИсключаемыеОтчеты).
	Если (ТипФормы = "ФормированиеОтчетаБезФормы") И (Не ОтчетМожетБытьВключенВРассылкуОтчетов(ПолноеИмяФормы, Словарь)) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаФормы <> Неопределено Тогда
		ПараметрыОткрытияФормы = НастройкаФормы.Параметры;
		Поведение = НастройкаФормы.Поведение;
		ПараметрыСтрокой = НастройкаФормы.ПараметрыСтрокой;
		
		Если Не ПользовательИмеетПравоДоступаКФорме(НастройкаФормы) Тогда
			ЭлементыФорм.ТипФормы = "Недоступна";
			Возврат;
		КонецЕсли;
		
	Иначе
		ПараметрыОткрытияФормы = Неопределено;
		Поведение = Новый СписокЗначений;
		ПараметрыСтрокой = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСтрокой) Тогда
		СценарийЗапуска = "(" + СтрСоединить(СтрРазделить(ПараметрыСтрокой, Символы.ПС), ", ") + ")";
	Иначе
		СценарийЗапуска = НСтр("ru='(без параметров)'; en='(без параметров)'", КодЯзыкаТекущейПроверки);
	КонецЕсли;
	
	СценарийЗапуска = ТипФормы + " " + СценарийЗапуска;
	
	ОписаниеФормыВДереве                  = ДобавитьЭлементМетаданныхВДерево(СценарийЗапуска, ЭлементыФорм);
	ОписаниеФормыВДереве.Выбор            = Истина;
	ОписаниеФормыВДереве.ПолноеИмя        = ПолноеИмяФормы;
	ОписаниеФормыВДереве.Параметры        = ПараметрыОткрытияФормы;
	ОписаниеФормыВДереве.Поведение        = Поведение;
	ОписаниеФормыВДереве.ТипФормы         = ТипФормы;
	ОписаниеФормыВДереве.ПараметрыСтрокой = ПараметрыСтрокой;
	ОписаниеФормыВДереве.ВариантОтчета    = ВариантОтчета;
	
КонецПроцедуры

&НаСервере
Функция ОтчетИмеетОсновнуюСКД(ПолноеИмяОтчета)
	
	МассивПолногоИмениОтчета = СтрРазделить(ПолноеИмяФормы, ".");
	Если МассивПолногоИмениОтчета.Количество() < 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОтчета = МассивПолногоИмениОтчета[1];
	
	МетаданныеОтчета = Метаданные.Отчеты.Найти(ИмяОтчета);
	Если МетаданныеОтчета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных <> Неопределено);
	
КонецФункции

&НаСервере
Функция ОтчетМожетБытьВключенВРассылкуОтчетов(ПолноеИмяОтчета, Словарь)
	
	// Если у отчета не указана основная СКД - он не может быть включен в рассылку.
	Если Не ОтчетИмеетОсновнуюСКД(ПолноеИмяФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получим имя отчета.
	МассивПолногоИмениОтчета = СтрРазделить(ПолноеИмяОтчета, ".");
	Если МассивПолногоИмениОтчета.Количество() < 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОтчета = МассивПолногоИмениОтчета[1];
	
	// Получим отчеты, исключаемые из рассылки.
	МассивМетаданныхИсключаемыхОтчетов = Новый Массив;
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("РассылкаОтчетовПереопределяемый", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.DetermineReportsToExclude(МассивМетаданныхИсключаемыхОтчетов);
	Иначе
		ОбщийМодульБСП.ОпределитьИсключаемыеОтчеты(МассивМетаданныхИсключаемыхОтчетов);
	КонецЕсли;
	
	// Если отчет не входит в исключения - его можно включить в рассылку.
	Возврат (МассивМетаданныхИсключаемыхОтчетов.Найти(Метаданные.Отчеты[ИмяОтчета]) = Неопределено);
	
КонецФункции

&НаСервере
Функция ПодготовитьСписокНепроверяемыхФорм(НастройкиФорм, Словарь)
	
	НепроверяемыеФормы = Новый Соответствие;
	Если НастройкиФорм["НепроверяемыеФормы"] = Неопределено Тогда
		Возврат НепроверяемыеФормы;
	КонецЕсли;
	
	Для Каждого НепроверяемаяФормаИлиПодсистема Из НастройкиФорм["НепроверяемыеФормы"] Цикл
		
		ПолноеИмя = НепроверяемаяФормаИлиПодсистема.Ключ;
		
		Если СтрНачинаетсяС(ВРег(ПолноеИмя), ПеревестиЗначение("ПОДСИСТЕМА", Словарь)) Тогда
			ДобавитьФормыПодсистемыВИсключение(ПолноеИмя, НепроверяемыеФормы, Словарь);
		ИначеЕсли СтрНайти(ПолноеИмя, ".") > 0 Тогда
			НепроверяемыеФормы.Вставить(ПолноеИмя, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроверяемыеФормы;
	
КонецФункции

&НаСервере
Функция ПодготовитьСписокПараметрическихРегламентныхЗаданий(НастройкиФорм, Словарь)
	
	ПараметрическиеРегламентныеЗадания = Новый Массив;
	Если НастройкиФорм["ПараметрическиеРегламентныеЗадания"] = Неопределено Тогда
		Возврат ПараметрическиеРегламентныеЗадания;
	КонецЕсли;
	
	Для Каждого ПараметрическоеРегламентноеЗадание Из НастройкиФорм["ПараметрическиеРегламентныеЗадания"] Цикл
		ПараметрическиеРегламентныеЗадания.Добавить(ПараметрическоеРегламентноеЗадание.Ключ);
	КонецЦикла;
	
	Возврат ПараметрическиеРегламентныеЗадания;
	
КонецФункции

&НаСервере
Процедура ПодготовитьСписокОбщихФорм(Знач НастройкиФорм, Знач НедоступныеМетаданные, Знач НепроверяемыеФормы, ЭлементыДерева)
	
	ИскатьПоРасширениям = НастройкиФорм["ИскатьПоРасширениям"];
	ДоступныеРасширения = НастройкиФорм["ДоступныеРасширения"];
	
	// Общие формы
	Для ИндексФормы = 0 По Метаданные.ОбщиеФормы.Количество() - 1 Цикл
		
		ОбъектМетаданных = Метаданные.ОбщиеФормы.Получить(ИндексФормы);
		ПолноеИмяФормы = ОбъектМетаданных.ПолноеИмя();
		
		ЭлементФорма = ДобавитьЭлементМетаданныхВДерево(ОбъектМетаданных.Имя, ЭлементыДерева);
		ЭлементФорма.Картинка = БиблиотекаКартинок.Форма;
		ЭлементФорма.ПолноеИмя = ПолноеИмяФормы;
		
		Если (НепроверяемыеФормы[ПолноеИмяФормы] <> Неопределено)
		 Или (НедоступныеМетаданные[ПолноеИмяФормы] = Истина)
		 Или (Не ПравоДоступа("Просмотр", ОбъектМетаданных))
		 Или (Не ПроверитьРасширениеОбъекта(ОбъектМетаданных, ИскатьПоРасширениям, ДоступныеРасширения)) Тогда
			ЭлементФорма.ТипФормы = "Недоступна";
			Продолжить;
		КонецЕсли;
		
		ПараметрыОткрытияФормы = НастройкиФорм["Открытие.ПараметризуемыеФормы"];
		Если (ПараметрыОткрытияФормы <> Неопределено) И (ПараметрыОткрытияФормы[ПолноеИмяФормы] <> Неопределено) Тогда
			
			Если Не ПользовательИмеетПравоДоступаКФорме(ПараметрыОткрытияФормы[ПолноеИмяФормы]) Тогда
				ЭлементФорма.ТипФормы = "Недоступна";
				Возврат;
			КонецЕсли;
			
			Для Каждого НастройкаФормы Из НастройкиФорм["Открытие.ПараметризуемыеФормы"][ПолноеИмяФормы] Цикл
				ДобавитьФормуДляТестирования(ЭлементФорма, ПолноеИмяФормы, "Параметры", НастройкаФормы);
			КонецЦикла;
			ЭлементФорма.Выбор = Истина;
			
			Продолжить;
		Иначе
			ДобавитьФормуДляТестирования(ЭлементФорма, ПолноеИмяФормы, "Обычная");
			ЭлементФорма.Выбор = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокФормДляКопирования(Знач ПараметрыКопированияФормы, Знач Ключи, Знач ТипФормы, Знач ПравоДобавления, ЭлементыФорм, Словарь)
	
	Если Не ПравоДобавления Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыКопированияФормы <> Неопределено Тогда
		
		Если Не ПользовательИмеетПравоДоступаКФорме(ПараметрыКопированияФормы) Тогда
			ЭлементыФорм.ТипФормы = "Недоступна";
			Возврат;
		КонецЕсли;
		
		Если Не ЭтаФормаСоздаетНовыйОбъект(ТипФормы) Тогда
			ТипОшибки = НСтр("ru='Ошибка описания параметров в yaml-файле.'; en='Ошибка описания параметров в yaml-файле.'");
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Произвольная форма %1 указана в качестве объекта копирования'; en='Произвольная форма %1 указана в качестве объекта копирования'"),
				ЭлементыФорм.ПолноеИмя);
			ДобавитьОшибкуВТаблицуРезультатаТестирования(ЭлементыФорм.ПолноеИмя, ПараметрыКопированияФормы,
				ТекущаяУниверсальнаяДатаВМиллисекундах(), "failed", ТипОшибки, ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Для Каждого НастройкаФормы Из ПараметрыКопированияФормы Цикл
			ДобавитьФормуДляТестирования(ЭлементыФорм, ПолноеИмяФормы, "Копирование.Параметры", НастройкаФормы);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтаФормаСоздаетНовыйОбъект(ТипФормы) Тогда
		
		Для Каждого Ключ Из Ключи Цикл
			
			ПараметрыФормыОткрытия = ОписательПараметровОткрытияФормы();
			ПараметрыФормыОткрытия.Параметры.Добавить(Ключ, ПеревестиЗначение("ЗначениеКопирования", Словарь));
			ПараметрыФормыОткрытия.ПараметрыСтрокой = ПеревестиЗначение("ЗначениеКопирования", Словарь) + " = " + ПолучитьНавигационнуюСсылку(Ключ);
			
			ДобавитьФормуДляТестирования(ЭлементыФорм, ПолноеИмяФормы, "Копирование", ПараметрыФормыОткрытия);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокФормДляОткрытия(Знач ПараметрыОткрытияФормы, Знач Ключи, Знач ТипФормы, Знач ПравоДобавления, ЭлементыФорм)
	
	ФлагВыбор = Ложь;
	
	Если ПараметрыОткрытияФормы <> Неопределено Тогда
		
		Если Не ПользовательИмеетПравоДоступаКФорме(ПараметрыОткрытияФормы) Тогда
			ЭлементыФорм.ТипФормы = "Недоступна";
			Возврат;
		КонецЕсли;
		
		ФормаДобавленаВСписок = Ложь;
		Для Каждого НастройкаФормы Из ПараметрыОткрытияФормы Цикл
			Если НастройкаФормы.Параметры.Количество() > 0 Тогда
				ДобавитьФормуДляТестирования(ЭлементыФорм, ПолноеИмяФормы, СтрШаблон("%1.Параметры", Строка(ТипФормы)), НастройкаФормы);
				ФормаДобавленаВСписок = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ФормаДобавленаВСписок И ПравоДобавления Тогда
			ДобавитьФормуДляТестирования(ЭлементыФорм, ПолноеИмяФормы, СтрШаблон("%1.Создание", Строка(ТипФормы)), НастройкаФормы);
			ФормаДобавленаВСписок = Истина;
		КонецЕсли;
		
		ЭлементыФорм.Выбор = ФормаДобавленаВСписок;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтаФормаСоздаетНовыйОбъект(ТипФормы) Тогда
		
		Если ПравоДобавления Тогда
			ДобавитьФормуДляТестирования(ЭлементыФорм, ПолноеИмяФормы, СтрШаблон("%1.Создание", Строка(ТипФормы)));
			ФлагВыбор = Истина;
		КонецЕсли;
		
		Для Каждого Ключ Из Ключи Цикл
			ПараметрыФормыОткрытия = ОписательПараметровОткрытияФормы();
			ПараметрыФормыОткрытия.Параметры.Добавить(Ключ, "Ключ");
			ПараметрыФормыОткрытия.ПараметрыСтрокой = СтрШаблон("Ключ = %1", ПолучитьНавигационнуюСсылку(Ключ));
			
			ДобавитьФормуДляТестирования(ЭлементыФорм, ПолноеИмяФормы, Строка(ТипФормы) + ".Ключ", ПараметрыФормыОткрытия); // Открытие
			
			ФлагВыбор = Истина;
		КонецЦикла;
		
	Иначе
		
		ДобавитьФормуДляТестирования(ЭлементыФорм, ПолноеИмяФормы, Строка(ТипФормы) + ".Открытие");
		ФлагВыбор = Истина;
		
	КонецЕсли;
	
	Если Не ФлагВыбор Тогда
		ЭлементыФорм.ТипФормы = "Недоступна";
	КонецЕсли;
	
	ЭлементыФорм.Выбор = ФлагВыбор;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокПечатныхФорм(Знач НастройкиФорм, Знач НепроверяемыеФормы, Знач ОбъектМетаданных,
	Знач УзелОбъектовМетаданных, Словарь)
	
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Если СтрНачинаетсяС(ПолноеИмяОбъектаМетаданных, ПеревестиЗначение("Отчет", Словарь))
		Или СтрНачинаетсяС(ПолноеИмяОбъектаМетаданных, ПеревестиЗначение("Обработка", Словарь)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьСтандартныйРеквизитСсылка(ОбъектМетаданных, Словарь) Тогда
		Возврат;
	КонецЕсли;
	
	КомандыПечати = КомандыПечати(ОбъектМетаданных, Словарь);
	Если (КомандыПечати = Неопределено) Или (КомандыПечати.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Иерархический = Ложь;
	Если СтрНачинаетсяС(ПолноеИмяОбъектаМетаданных, ПеревестиЗначение("Справочник", Словарь))
		Или СтрНачинаетсяС(ПолноеИмяОбъектаМетаданных, ПеревестиЗначение("ПланВидовХарактеристик", Словарь)) Тогда
		Иерархический = ОбъектМетаданных.Иерархический;
	КонецЕсли;
	
	ЭлементПечатныеФормы = ДобавитьЭлементМетаданныхВДерево("ПечатныеФормы", УзелОбъектовМетаданных);
	
	Для Каждого СтрокаКоманды Из КомандыПечати Цикл
		
		ИдентификаторКоманды = СтрокаКоманды[ПеревестиЗначение("Идентификатор", Словарь)];
		ПредставлениеКоманды = СтрокаКоманды[ПеревестиЗначение("Представление", Словарь)];
		
		ИмяПечатнойКоманды = СтрШаблон("%1 (%2)", ПредставлениеКоманды, ИдентификаторКоманды);
		
		НастройкаФормыПоУмолчанию = СформироватьНастройкуПечатнойФормыПоУмолчанию(СтрокаКоманды, ПолноеИмяОбъектаМетаданных, Иерархический, Словарь);
		
		ЭлементПечатнаяФорма = ДобавитьЭлементМетаданныхВДерево(ИмяПечатнойКоманды, ЭлементПечатныеФормы);
		
		ПараметрыОткрытияФорм = НастройкиФорм["Открытие.ПараметризуемыеФормы"];
		
		ТекстШаблона = "%1." + ПеревестиЗначение("ИдентификаторКомандыПечати", Словарь) + ".%2";
		ПолноеИмя = СтрШаблон(ТекстШаблона, ПолноеИмяОбъектаМетаданных, ИдентификаторКоманды);
		
		Если НепроверяемыеФормы[ПолноеИмя] = Неопределено Тогда
			Если (ПараметрыОткрытияФорм <> Неопределено) И (ПараметрыОткрытияФорм[ПолноеИмя] <> Неопределено) Тогда
				Для Каждого НастройкаФормы Из ПараметрыОткрытияФорм[ПолноеИмя] Цикл
					ДополнитьСписокЗначений(НастройкаФормы.Параметры, НастройкаФормыПоУмолчанию.Параметры);
					ДобавитьФормуДляТестирования(ЭлементПечатнаяФорма, ПолноеИмя, "ПечатнаяФорма", НастройкаФормы);
				КонецЦикла;
			Иначе
				ДобавитьФормуДляТестирования(ЭлементПечатнаяФорма, ПолноеИмя, "ПечатнаяФорма", НастройкаФормыПоУмолчанию);
			КонецЕсли;
			
			ЭлементПечатныеФормы.Выбор = Истина;
			ЭлементПечатнаяФорма.Выбор = Истина;
			
		Иначе
			ЭлементПечатнаяФорма.ТипФормы = "Недоступна";
		КонецЕсли;
		
		// Добавим элемент дерева для проверки редактирования макета.
		// Путь к макету будет заполнен после проверки печатной формы.
		НастройкаФормы = Новый Структура;
		НастройкаФормы.Вставить("Параметры", Новый Структура("ПутьКМакету", ""));
		НастройкаФормы.Вставить("Поведение", Новый СписокЗначений);
		НастройкаФормы.Вставить("ПараметрыСтрокой", "ПутьКМакету = ");
		
		ТекстШаблона = "%1." + ПеревестиЗначение("РедактированиеМакета", Словарь) + ".%2";
		ПолноеИмя = СтрШаблон(ТекстШаблона, ПолноеИмяОбъектаМетаданных, ИдентификаторКоманды);
		
		ДобавитьФормуДляТестирования(ЭлементПечатнаяФорма, ПолноеИмя, "РедактированиеМакета", НастройкаФормы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокНегативныхСценариев(НастройкиФорм)
	
	СоответствиеНегативныхСценариев = НастройкиФорм["НегативныеСценарии"];
	Если СоответствиеНегативныхСценариев = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СоответствиеНегативныхСценариев Цикл
		МассивНастроекФормы = ЭлементСоответствия.Значение;
		Если МассивНастроекФормы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПараметров = МассивНастроекФормы[0].Параметры;
		
		ПользовательСценария = "";
		ТекстОшибки = "";
		Действие = "";
		Для Каждого ЭлементСписка Из СписокПараметров Цикл
			Если СтрСравнить(ЭлементСписка.Представление, "Пользователь") = 0 Тогда
				ПользовательСценария = ЭлементСписка.Значение;
			ИначеЕсли СтрСравнить(ЭлементСписка.Представление, "ТекстОшибки") = 0 Тогда
				ТекстОшибки = ЭлементСписка.Значение;
			ИначеЕсли СтрСравнить(ЭлементСписка.Представление, "Действие") = 0 Тогда
				Действие = ЭлементСписка.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ПользовательСценария) Или СтрСравнить(ПользовательСценария, ТекущийПользователь) = 0 Тогда
			НоваяСтрока = ТаблицаНегативныхСценариев.Добавить();
			НоваяСтрока.ИмяФормы = ЭлементСоответствия.Ключ;
			НоваяСтрока.ТекстОшибки = ТекстОшибки;
			НоваяСтрока.Действие = Действие;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСтандартныйРеквизитСсылка(ОбъектМетаданных, Словарь)
	
	Для Каждого ТекущийСтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если СтрСравнить(ТекущийСтандартныйРеквизит.Имя, ПеревестиЗначение("Ссылка", Словарь)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция КомандыПечати(ОбъектМетаданных, Словарь)
	
	Попытка
		КомандыПечати = КомандыПечатиОбъекта(ОбъектМетаданных, Словарь);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат КомандыПечати;
	
КонецФункции

&НаСервере
Функция СформироватьНастройкуПечатнойФормыПоУмолчанию(СтрокаКоманды, ПолноеИмяОбъектаМетаданных, Иерархический, Словарь)
	
	ПараметрыКомандыПечати = Новый СписокЗначений;
	ПараметрыКомандыПечати.Добавить(СтрокаКоманды[ПеревестиЗначение("Идентификатор", Словарь)], ПеревестиЗначение("Идентификатор", Словарь));
	ПараметрыКомандыПечати.Добавить(СтрокаКоманды[ПеревестиЗначение("МенеджерПечати", Словарь)], ПеревестиЗначение("МенеджерПечати", Словарь));
	ПараметрыКомандыПечати.Добавить(СтрокаКоманды[ПеревестиЗначение("ДополнительныеПараметры", Словарь)], ПеревестиЗначение("ДополнительныеПараметры", Словарь));
	ПараметрыКомандыПечати.Добавить(СтрокаКоманды[ПеревестиЗначение("УсловияВидимости", Словарь)], ПеревестиЗначение("УсловияВидимости", Словарь));
	ПараметрыКомандыПечати.Добавить(СтрокаКоманды[ПеревестиЗначение("Обработчик", Словарь)], ПеревестиЗначение("Обработчик", Словарь));
	ПараметрыКомандыПечати.Добавить(СтрокаКоманды[ПеревестиЗначение("Представление", Словарь)], ПеревестиЗначение("Представление", Словарь));
	ПараметрыКомандыПечати.Добавить(ПолноеИмяОбъектаМетаданных, "ИмяОбъектаМетаданных");
	ПараметрыКомандыПечати.Добавить(Иерархический, "Иерархический");
	
	НастройкаФормы = Новый Структура;
	НастройкаФормы.Вставить("Параметры", ПараметрыКомандыПечати);
	НастройкаФормы.Вставить("Поведение", Новый СписокЗначений);
	НастройкаФормы.Вставить("ПараметрыСтрокой", "");
	
	Возврат НастройкаФормы;
	
КонецФункции

&НаСервере
Процедура ДополнитьСписокЗначений(ТекущиеПараметрыФормы, ПараметрыКомандыПечатиПоУмолчанию)
	
	Для Каждого ЭлементСпискаПоУмолчанию Из ПараметрыКомандыПечатиПоУмолчанию Цикл
		ЭлементНайден = Ложь;
		Для Каждого ЭлементСписка Из ТекущиеПараметрыФормы Цикл
			Если СтрСравнить(ЭлементСписка.Представление, ЭлементСпискаПоУмолчанию.Представление) = 0 Тогда
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭлементНайден Тогда
			ТекущиеПараметрыФормы.Добавить(ЭлементСпискаПоУмолчанию.Значение, ЭлементСпискаПоУмолчанию.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьРасширениеОбъекта(ОбъектМетаданных, ИскатьПоРасширениям, ДоступныеРасширения)
	
	Если Не ИскатьПоРасширениям Тогда
		Возврат Истина;
	КонецЕсли;
	
	РасширениеКонфигурации = ОбъектМетаданных.РасширениеКонфигурации();
	Если РасширениеКонфигурации = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДоступныеРасширения[РасширениеКонфигурации.Имя] <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОписательПараметровОткрытияФормы()
	
	ПараметрыФормыОткрытия = Новый Структура;
	ПараметрыФормыОткрытия.Вставить("Параметры", Новый СписокЗначений);
	ПараметрыФормыОткрытия.Вставить("ПараметрыСтрокой", "");
	ПараметрыФормыОткрытия.Вставить("Поведение", Новый СписокЗначений);
	
	Возврат ПараметрыФормыОткрытия;
	
КонецФункции

&НаСервере
Функция ПользовательИмеетПравоДоступаКФорме(Знач ПараметрыОткрытияФормы)
	
	Если ТипЗнч(ПараметрыОткрытияФормы) = Тип("Структура") Тогда
		
		Для Каждого ОписаниеПрав Из ПараметрыОткрытияФормы.Поведение Цикл
				Если (ОписаниеПрав.Представление = "Права")
					И (Не ТекущийПользовательИмеетПравоДоступа(ОписаниеПрав.Значение, ТекущийПользователь)) Тогда
					Возврат Ложь;
				КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ОписаниеПоведения Из ПараметрыОткрытияФормы Цикл
			Для Каждого ОписаниеПрав Из ОписаниеПоведения.Поведение Цикл
				Если (ОписаниеПрав.Представление = "Права")
					И (Не ТекущийПользовательИмеетПравоДоступа(ОписаниеПрав.Значение, ТекущийПользователь)) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СлучайныеОбъектыДляТестирования(Знач ИмяОбъектаМетаданных, Знач ОбъектМетаданных, Знач ТекущаяФорма, ТипОсновнойФормы, Словарь, Количество = 3)
	
	ТекущаяФормаПараметры = Новый Структура();
	ТекущаяФормаПараметры.Вставить("Имя", ТекущаяФорма);
	ТекущаяФормаПараметры.Вставить("ОсновнаяФорма", ТипОсновнойФормы);
	ТекущаяФормаПараметры.Вставить("Иерархический", Ложь);
	
	Если ((СтрНачинаетсяС(ПолноеИмяФормы, "Справочник") Или СтрНачинаетсяС(ПолноеИмяФормы, ПеревестиЗначение("Справочник", Словарь)))
		И (ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов))
		Или (СтрНачинаетсяС(ПолноеИмяФормы, "ПланВидовХарактеристик") Или СтрНачинаетсяС(ПолноеИмяФормы, ПеревестиЗначение("ПланВидовХарактеристик", Словарь))) Тогда
		ТекущаяФормаПараметры.Вставить("Иерархический", ОбъектМетаданных.Иерархический);
	КонецЕсли;
	
	Ключи = СлучайныеЭлементыОбъекта(ИмяОбъектаМетаданных, ОбъектМетаданных.Имя, ТекущаяФормаПараметры, Количество);
	
	Возврат Ключи;
	
КонецФункции

&НаСервере
Функция ЕстьПравоДобавленияУОбъекта(Знач ИмяОбъектаМетаданных, Знач ОбъектМетаданных)
	
	ПравоИнтерактивноеДобавление = Неопределено;
	
	Если ИмяОбъектаМетаданных = "РегистрыСведений" Тогда
		ПравоДобавления = ПравоДоступа("Изменение", ОбъектМетаданных);
	ИначеЕсли ИмяОбъектаМетаданных <> "Отчеты"
		И ИмяОбъектаМетаданных <> "Обработки"
		И ИмяОбъектаМетаданных <> "РегистрыНакопления"
		И ИмяОбъектаМетаданных <> "РегистрыБухгалтерии"
		И ИмяОбъектаМетаданных <> "РегистрыРасчета"
		И ИмяОбъектаМетаданных <> "ЖурналыДокументов"
		Тогда
		ПравоДобавления = ПравоДоступа("Добавление", ОбъектМетаданных);
		ПравоИнтерактивноеДобавление = ПравоДоступа("ИнтерактивноеДобавление", ОбъектМетаданных);
		Если ПравоДобавления <> ПравоИнтерактивноеДобавление Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='У объекта %1 ПравоДобавления не совпадает с правом ИнтерактивноеДобавление'; en='У объекта %1 ПравоДобавления не совпадает с правом ИнтерактивноеДобавление'", КодЯзыкаТекущейПроверки), ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
	Иначе
		ПравоДобавления = Истина;
	КонецЕсли;
	
	Возврат ПравоДобавления;

КонецФункции

&НаСервере
Функция ПодготовитьСписокИменПроверяемыхОбъектов()
	
	ПроверяемыеОбъекты = Новый ТаблицаЗначений;
	ПроверяемыеОбъекты.Колонки.Добавить("Имя");
	ПроверяемыеОбъекты.Колонки.Добавить("ИмяМнЧ");
	ПроверяемыеОбъекты.Колонки.Добавить("Картинка");
	
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "ПланОбмена",             "ПланыОбмена",             БиблиотекаКартинок.ПланОбмена);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "Справочник",             "Справочники",             БиблиотекаКартинок.Справочник);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "Документ",               "Документы",               БиблиотекаКартинок.Документ);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "ЖурналДокументов",       "ЖурналыДокументов",       БиблиотекаКартинок.ЖурналДокументов);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "Перечисление",           "Перечисления",            БиблиотекаКартинок.Перечисление);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "Отчет",                  "Отчеты",                  БиблиотекаКартинок.Отчет);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "Обработка",              "Обработки",               БиблиотекаКартинок.Обработка);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "ПланВидовХарактеристик", "ПланыВидовХарактеристик", БиблиотекаКартинок.ПланВидовХарактеристик);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "ПланСчетов",             "ПланыСчетов",             БиблиотекаКартинок.ПланСчетов);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "ПланВидовРасчета",       "ПланыВидовРасчета",       БиблиотекаКартинок.ПланВидовРасчета);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "РегистрСведений",        "РегистрыСведений",        БиблиотекаКартинок.РегистрСведений);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "РегистрНакопления",      "РегистрыНакопления",      БиблиотекаКартинок.РегистрНакопления);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "РегистрБухгалтерии",     "РегистрыБухгалтерии",     БиблиотекаКартинок.РегистрБухгалтерии);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "РегистрРасчета",         "РегистрыРасчета",         БиблиотекаКартинок.РегистрРасчета);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "БизнесПроцесс",          "БизнесПроцессы",          БиблиотекаКартинок.БизнесПроцесс);
	ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, "Задача",                 "Задачи",                  БиблиотекаКартинок.Задача);
	
	Возврат ПроверяемыеОбъекты;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицуПроверяемыхОбъектов(ПроверяемыеОбъекты, Имя, ИмяМнЧ, Картинка)
	
	НоваяСтрока = ПроверяемыеОбъекты.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.ИмяМнЧ = ИмяМнЧ;
	НоваяСтрока.Картинка = Картинка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьНастройкиФормыДляТестирования(ТестируемыеФормы, Знач ПолноеИмяФормы, Знач ИмяОбласти, Знач Ключ = "$неопределенно$")
	
	Если ПустаяСтрока(ПолноеИмяФормы) Тогда
		Возврат "";
	КонецЕсли;
	
	Область = ТестируемыеФормы[ИмяОбласти];
	Если Область = Неопределено Тогда
		ТестируемыеФормы.Вставить(ИмяОбласти, Новый Соответствие);
		Область = ТестируемыеФормы[ИмяОбласти];
	КонецЕсли;
	
	ОписаниеФормы = Новый Структура;
	ОписаниеФормы.Вставить("Параметры", Новый СписокЗначений);
	ОписаниеФормы.Вставить("Поведение", Новый СписокЗначений);
	ОписаниеФормы.Вставить("ПараметрыСтрокой", "");
	ОписаниеФормы.Вставить("ПраваСтрокой", "");
	
	ОписаниеМетаданных = Область.Получить(ПолноеИмяФормы);
	Если ОписаниеМетаданных = Неопределено Тогда
		Область.Вставить(ПолноеИмяФормы, Новый Массив);
		ОписаниеМетаданных = Область.Получить(ПолноеИмяФормы);
	КонецЕсли;
	
	ОписаниеМетаданных.Добавить(ОписаниеФормы);
	
	Если Ключ <> "$неопределенно$" Тогда
		ОписаниеФормы.Параметры.Добавить("Ключ", Ключ);
	КонецЕсли;
	
	Возврат ОписаниеФормы;
	
КонецФункции

&НаСервере
Процедура ДобавитьФормуДляТестирования(ЭлементыФорм, Знач ПолноеИмяФормы, ТипФормы, НастройкаФормы = Неопределено)
	
	Если ПустаяСтрока(ПолноеИмяФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаФормы <> Неопределено Тогда
		ПараметрыОткрытияФормы = НастройкаФормы.Параметры;
		Поведение = НастройкаФормы.Поведение;
		ПараметрыСтрокой = НастройкаФормы.ПараметрыСтрокой;
	Иначе
		ПараметрыОткрытияФормы = Неопределено;
		Поведение = Новый СписокЗначений;
		ПараметрыСтрокой = "";
	КонецЕсли;
	
	ПараметрыФормы = Новый СписокЗначений;
	Если СтрЗаканчиваетсяНа(ТипФормы, "Создание") Тогда
		СценарийЗапуска = НСтр("ru='(открытие/создание, без параметров)'; en='(открытие/создание, без параметров)'", КодЯзыкаТекущейПроверки);
	Иначе
		СценарийЗапуска = НСтр("ru='(без параметров)'; en='(без параметров)'", КодЯзыкаТекущейПроверки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСтрокой) Тогда
		СценарийЗапуска = СтрСоединить(СтрРазделить(ПараметрыСтрокой, Символы.ПС), ", ");
	КонецЕсли;
	
	ОписаниеФормыВДереве                  = ДобавитьЭлементМетаданныхВДерево(СценарийЗапуска, ЭлементыФорм);
	ОписаниеФормыВДереве.Выбор            = Истина;
	ОписаниеФормыВДереве.ПолноеИмя        = ПолноеИмяФормы;
	ОписаниеФормыВДереве.Параметры        = ПараметрыОткрытияФормы;
	ОписаниеФормыВДереве.Поведение        = Поведение;
	ОписаниеФормыВДереве.ТипФормы         = ТипФормы;
	ОписаниеФормыВДереве.ПараметрыСтрокой = ПараметрыСтрокой;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьФормыДляТестирования()
	
	ПодготовитьСписокФормИИхПараметрыОткрытия(ПрочитатьНастройки(), Словарь);
	УстановитьВидимостьВсемЭлементам(ДеревоФорм.ПолучитьЭлементы());
	
	ОчиститьСообщения();
	
	ТестируемыеФормы.Сортировать("ПолноеИмя");
	ОпределитьКоличествоФормДляТестирования();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийПользовательИмеетПравоДоступа(ПраваДоступаКФорме, ТекущийПользователь)
	
	Если СтрНачинаетсяС(ВРег(ПраваДоступаКФорме), "КРОМЕ") Тогда
		Возврат СтрСравнить(ТекущийПользователь, Сред(ПраваДоступаКФорме, 6)) <> 0;
	КонецЕсли;
		
	СписокПользователей = СтрРазделить(ПраваДоступаКФорме, ",");
	
	Для Каждого ИмяПользователя Из СписокПользователей Цикл
		Если СтрСравнить(ИмяПользователя, ТекущийПользователь) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// подготовка

&НаСервереБезКонтекста
Функция ОпределитьСписокДоступныхРасширений(СтрокаРасширений, Словарь)
	
	РазрешенныеРасширения = Новый Соответствие;
	
	Если ЭтоСеансВнешнегоПользователя(Словарь) Тогда
		Возврат РазрешенныеРасширения;
	КонецЕсли;
	
	МассивРасширений = РасширенияКонфигурации.Получить();
	
	МассивМасок = СтрРазделить(СтрокаРасширений, ";", Ложь);
	Для Каждого Расширение Из МассивРасширений Цикл
		Для Каждого Маска Из МассивМасок Цикл
			Маска = СокрЛП(Маска);
			Если СтрНачинаетсяС(Маска, "*") И СтрЗаканчиваетсяНа(Маска, "*") Тогда
				СтрокаПоиска = Сред(Маска, 2, СтрДлина(Маска) - 2);
				Если СтрНайти(Расширение.Имя, СокрЛП(СтрокаПоиска)) > 0 Тогда
					РазрешенныеРасширения.Вставить(Расширение.Имя, Истина);
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(Маска, "*") Тогда
				СтрокаПоиска = Сред(Маска, 2);
				Если СтрЗаканчиваетсяНа(Расширение.Имя, СокрЛП(СтрокаПоиска)) Тогда
					РазрешенныеРасширения.Вставить(Расширение.Имя, Истина);
				КонецЕсли;
			ИначеЕсли СтрЗаканчиваетсяНа(Маска, "*") Тогда
				СтрокаПоиска = Лев(Маска, СтрДлина(Маска) - 1);
				Если СтрНачинаетсяС(Расширение.Имя, СокрЛП(СтрокаПоиска)) Тогда
					РазрешенныеРасширения.Вставить(Расширение.Имя, Истина);
				КонецЕсли;
			Иначе
				Если СтрСравнить(Расширение.Имя, СокрЛП(Маска)) = 0 Тогда
					РазрешенныеРасширения.Вставить(Расширение.Имя, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РазрешенныеРасширения;
	
КонецФункции

&НаСервере
Функция СлучайныеЭлементыОбъекта(ТипОбъекта, ИмяОбъекта, ТекущаяФормаОбъекта, Количество = 3)
	
	Результат = Новый Массив;
	
	Если ТипОбъекта = "РегистрыСведений"
		Или ТипОбъекта = "РегистрыНакопления"
		Или ТипОбъекта = "РегистрыБухгалтерии"
		Или ТипОбъекта = "РегистрыРасчета" Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаСоответствие = ТаблицаСоответствияТиповОбъектов();
	ЭтоСправочник = СтрСравнить(ТипОбъекта, "Справочники") = 0;
	ЭтоПВХ = СтрСравнить(ТипОбъекта, "ПланыВидовХарактеристик") = 0;
	
	ТаблицаВыборки = ?(ТаблицаСоответствие[ТипОбъекта] = Неопределено, ТипОбъекта, ТаблицаСоответствие[ТипОбъекта]) + "." + ИмяОбъекта;
	
	Запрос = Новый Запрос;
	
	Если ЭтоСправочник Или ЭтоПВХ Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таб.Ссылка КАК Ссылка,
		|	Таб.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	&Таб КАК Таб";
		
		Если ТекущаяФормаОбъекта.Иерархический И ТекущаяФормаОбъекта.ОсновнаяФорма = "ОсновнаяФормаГруппы" Тогда
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	Таб.ЭтоГруппа
			|	И Не Таб.ПометкаУдаления";
		ИначеЕсли ТекущаяФормаОбъекта.Иерархический Тогда
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	Не Таб.ЭтоГруппа
			|	И Не Таб.ПометкаУдаления";
		КонецЕсли;
		
		// Не копируем предопределенные элементы.
		Если ТекущаяФормаОбъекта.Имя = "КопированиеЭлемента" Тогда
			Если СтрНайти(Запрос.Текст, "ГДЕ") > 0 Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И Не Таб.Предопределенный";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	Не Таб.Предопределенный";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таб.Ссылка КАК Ссылка
		|ИЗ
		|	&Таб КАК Таб";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таб", ТаблицаВыборки);
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		ТекстОшибки = Строка(ТипОбъекта) + " " + Строка(ИмяОбъекта) + "
			|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + "
			|" +Запрос.Текст;
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	ВсегоСсылок = ВыборкаДетальныеЗаписи.Количество();
	
	ВсегоФорм = 1;
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	Для Индекс = 1 По ВсегоСсылок Цикл
		ИндексФормы = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, ВсегоСсылок - ВсегоФорм);
		
		Если ЭтоСправочник Или ЭтоПВХ Тогда
			Если СтрНачинаетсяС(ВРег(ВыборкаДетальныеЗаписи[ИндексФормы].ИмяПредопределенныхДанных), "УДАЛИТЬ_") Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Результат.Добавить(ВыборкаДетальныеЗаписи[ИндексФормы].Ссылка);
		ВыборкаДетальныеЗаписи.Удалить(ИндексФормы);
		ВсегоФорм = ВсегоФорм + 1;
		
		Если ВсегоФорм > Количество Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаСоответствияТиповОбъектов()
	
	Перем ТаблицаСоответствие;
	
	ТаблицаСоответствие = Новый Соответствие();
	ТаблицаСоответствие.Вставить("ПланыОбмена",             "ПланОбмена");
	ТаблицаСоответствие.Вставить("Справочники",             "Справочник");
	ТаблицаСоответствие.Вставить("Документы",               "Документ");
	ТаблицаСоответствие.Вставить("Задачи",                  "Задача");
	ТаблицаСоответствие.Вставить("БизнесПроцессы",          "БизнесПроцесс");
	ТаблицаСоответствие.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	ТаблицаСоответствие.Вставить("ПланыСчетов",             "ПланСчетов");
	ТаблицаСоответствие.Вставить("ПланыВидовРасчета",       "ПланВидовРасчета");
	Возврат ТаблицаСоответствие;
	
КонецФункции

&НаСервере
Функция ОпределитьОсновнуюФорму(ТекущаяФорма, ОбъектМетаданных, ИмяМетаданных)
	
	Если ИмяМетаданных = "ПланыОбмена" Тогда
		
		Если ОбъектМетаданных.ОсновнаяФормаОбъекта = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаУзла";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаСписка = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаДляВыбора = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаДляВыбора";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных = "Справочники" Тогда
		
		Если ОбъектМетаданных.ОсновнаяФормаОбъекта = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаОбъекта";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаСписка = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаГруппы = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаГруппы";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаДляВыбора = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаДляВыбора";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаДляВыбораГруппы = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаДляВыбораГруппы";
		КонецЕсли;
		
	ИначеЕсли (ИмяМетаданных = "Документы")
		  Или (ИмяМетаданных = "Задачи")
		  Или (ИмяМетаданных = "БизнесПроцессы")
		  Или (ИмяМетаданных = "ПланыВидовХарактеристик")
		  Или (ИмяМетаданных = "ПланыСчетов")
		  Или (ИмяМетаданных = "ПланыВидовРасчета") Тогда
		
		Если ОбъектМетаданных.ОсновнаяФормаОбъекта = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаОбъекта";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаСписка = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаДляВыбора = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаДляВыбора";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных = "РегистрыСведений" Тогда
		
		Если ОбъектМетаданных.ОсновнаяФормаЗаписи = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаЗаписи";
		ИначеЕсли ОбъектМетаданных.ОсновнаяФормаСписка = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		КонецЕсли;
		
	ИначеЕсли (ИмяМетаданных = "РегистрыНакопления")
		  Или (ИмяМетаданных = "РегистрыБухгалтерии")
		  Или (ИмяМетаданных = "РегистрыРасчета") Тогда
		
		Если ОбъектМетаданных.ОсновнаяФормаСписка = ТекущаяФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных = "Обработка" Тогда
		
		Если ОбъектМетаданных.ОсновнаяФорма = ТекущаяФорма Тогда
			Возврат "ОсновнаяФорма";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылочныеТипы()
	
	Ответ = Новый Массив;
	
	ИменаТиповМетаданных = Новый Массив;
	ИменаТиповМетаданных.Добавить("Справочники");
	ИменаТиповМетаданных.Добавить("Документы");
	ИменаТиповМетаданных.Добавить("Задачи");
	ИменаТиповМетаданных.Добавить("БизнесПроцессы");
	ИменаТиповМетаданных.Добавить("ПланыВидовХарактеристик");
	ИменаТиповМетаданных.Добавить("ПланыСчетов");
	ИменаТиповМетаданных.Добавить("ПланыВидовРасчета");
	
	Для Каждого ИмяМетаданного Из ИменаТиповМетаданных Цикл
		
		// АПК:486-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
		УстановитьБезопасныйРежим(Истина);
		МенеджерМетаданного = Вычислить(ИмяМетаданного);
		// АПК:486-вкл
		Для Каждого Тип Из МенеджерМетаданного.ТипВсеСсылки().Типы() Цикл
			Ответ.Добавить(Тип);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Функция ПреобразоватьПараметрыКТипам(Знач Значение, УникальныйИдентификатор, Знач НеобходимоПоместитьВоВременноеХранилище = Неопределено, Уровень = 2)
	
	Если НеобходимоПоместитьВоВременноеХранилище = Неопределено Тогда
		НеобходимоПоместитьВоВременноеХранилище = Ложь;
		Если СтрНачинаетсяС(Значение, "*") Тогда
			НеобходимоПоместитьВоВременноеХранилище = Истина;
			Значение = Сред(Значение, 2);
		КонецЕсли;
	Иначе
		НеобходимоПоместитьВоВременноеХранилище = Неопределено;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Значение, "!!ОписаниеТипов(")
	 Или СтрНачинаетсяС(Значение, "ОписаниеТипов(")
	 Или СтрНачинаетсяС(Значение, "!!TypeDescription(")
	 Или СтрНачинаетсяС(Значение, "TypeDescription(") Тогда
		
		ИмяМетаданных = СтрЗаменить(Сред(Значение, 15, СтрДлина(Значение) - 15), """", "");
		СписокТипов = СтрРазделить(ИмяМетаданных, ",",);
		Попытка
			МассивТипов = Новый Массив;
			Для Каждого ИмяТипа Из СписокТипов Цикл
				МассивТипов.Добавить(Тип(СокрЛП(ИмяТипа)));
			КонецЦикла;
			Результат = Новый ОписаниеТипов(МассивТипов);
		Исключение
			Результат = Новый ОписаниеТипов("Строка");
		КонецПопытки;
		
		Возврат ПоместитьВоВременноеХранилищеЕслиТребуется(Результат, НеобходимоПоместитьВоВременноеХранилище, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(Значение, "!!СтандартныйПериод(")
	 Или СтрНачинаетсяС(Значение, "СтандартныйПериод(")
	 Или СтрНачинаетсяС(Значение, "!!StandardPeriod(")
	 Или СтрНачинаетсяС(Значение, "StandardPeriod(") Тогда
		
		Результат = Значение;
		
		ДатыПериодаСтрокой = Сред(Значение, 19, СтрДлина(Значение) - 19);
		МассивДат = СтрРазделить(ДатыПериодаСтрокой, "-");
		Если МассивДат.Количество() = 2 Тогда
			
			ДатаНачала = ПреобразоватьПараметрКПримитивнымТипам(МассивДат[0]);
			ДатаОкончания = ПреобразоватьПараметрКПримитивнымТипам(МассивДат[1]);
			Если ТипЗнч(ДатаНачала) = Тип("Дата") И ТипЗнч(ДатаОкончания) = Тип("Дата") Тогда
				Результат = Новый СтандартныйПериод;
				Результат.ДатаНачала = ДатаНачала;
				Результат.ДатаОкончания = ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Значение, "!!Картинка")
	 Или СтрНачинаетсяС(Значение, "Картинка")
	 Или СтрНачинаетсяС(Значение, "!!Picture")
	 Или СтрНачинаетсяС(Значение, "Picture") Тогда
		Возврат ПоместитьВоВременноеХранилищеЕслиТребуется(Новый Картинка,
			НеобходимоПоместитьВоВременноеХранилище, УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтрНачинаетсяС(Значение, "!!ТабличныйДокумент")
	 Или СтрНачинаетсяС(Значение, "ТабличныйДокумент") 
	 Или СтрНачинаетсяС(Значение, "!!SpreadsheetDocument")
	 Или СтрНачинаетсяС(Значение, "SpreadsheetDocument") Тогда
		Возврат ПоместитьВоВременноеХранилищеЕслиТребуется(Новый ТабличныйДокумент,
			НеобходимоПоместитьВоВременноеХранилище, УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтрНачинаетсяС(Значение, "!!ДвоичныеДанные")
	 Или СтрНачинаетсяС(Значение, "ДвоичныеДанные")
	 Или СтрНачинаетсяС(Значение, "!!BinaryData")
	 Или СтрНачинаетсяС(Значение, "BinaryData") Тогда
		
		Значение = Сред(Значение, ?(СтрНачинаетсяС(Значение, "!!"), 17, 15));
		ЭтоВременныйФайл = Ложь;
		Если ПустаяСтрока(Значение) Тогда
			ИмяФайла = ПолучитьИмяВременногоФайла("txt");
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Записать(ИмяФайла);
			ЭтоВременныйФайл = Истина;
		Иначе
			ИмяФайла = Сред(Значение, 2, СтрДлина(Значение) - 2);
		КонецЕсли;
		
		ДвоичныеДанные = ПоместитьВоВременноеХранилищеЕслиТребуется(Новый ДвоичныеДанные(ИмяФайла),
			НеобходимоПоместитьВоВременноеХранилище,
			УникальныйИдентификатор);
		
		Если ЭтоВременныйФайл Тогда
			Файл = Новый Файл(ИмяФайла);
			УдалитьФайлы(ИмяФайла); // АПК:566 - дымовой тест выполняется в синхронном режиме.
		КонецЕсли;
		
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Значение, "!!НастройкиКомпоновкиДанных")
	 Или СтрНачинаетсяС(Значение, "НастройкиКомпоновкиДанных") 
	 Или СтрНачинаетсяС(Значение, "!!DataCompositionSettings")
	 Или СтрНачинаетсяС(Значение, "DataCompositionSettings") Тогда
		Возврат ПоместитьВоВременноеХранилищеЕслиТребуется(Новый НастройкиКомпоновкиДанных,
			НеобходимоПоместитьВоВременноеХранилище, УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтрНачинаетсяС(Значение, "!!СхемаКомпоновкиДанных")
	 Или СтрНачинаетсяС(Значение, "СхемаКомпоновкиДанных")
	 Или СтрНачинаетсяС(Значение, "!!DataCompositionSchema")
	 Или СтрНачинаетсяС(Значение, "DataCompositionSchema") Тогда
		Возврат ПоместитьВоВременноеХранилищеЕслиТребуется(Новый СхемаКомпоновкиДанных,
			НеобходимоПоместитьВоВременноеХранилище, УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтрНачинаетсяС(Значение, "!!Перечисления")
	 Или СтрНачинаетсяС(Значение, "!!Перечисление")
	 Или СтрНачинаетсяС(Значение, "Перечисления")
	 Или СтрНачинаетсяС(Значение, "Перечисление")
	 Или СтрНачинаетсяС(Значение, "!!Enums")
	 Или СтрНачинаетсяС(Значение, "!!Enum")
	 Или СтрНачинаетсяС(Значение, "Enums")
	 Или СтрНачинаетсяС(Значение, "Enum") Тогда
		СоставПеречисления = СтрРазделить(Значение, ".");
		
		Если СтрНачинаетсяС(НРег(СоставПеречисления[2]), НРег("ПустаяСсылка"))
		 Или СтрНачинаетсяС(НРег(СоставПеречисления[2]), НРег("EmptyRef")) Тогда
			Возврат Перечисления[СоставПеречисления[1]].ПустаяСсылка();
		КонецЕсли;
		
		Результат = Перечисления[СоставПеречисления[1]][СоставПеречисления[2]];
		Возврат ПоместитьВоВременноеХранилищеЕслиТребуется(Результат,
			НеобходимоПоместитьВоВременноеХранилище,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
	РезультатПреобразования = ПреобразоватьПараметрКПримитивнымТипам(Значение);
	Если РезультатПреобразования <> Символы.ВТаб Тогда
		Возврат РезультатПреобразования;
	КонецЕсли;
	
	Результат = Значение;
	
	ЭтоНавигационнаяСсылка = ПроверитьЭтоНавигационнаяСсылка(Значение);
	
	Если СтрНачинаетсяС(Значение, "!!")
		Или СтрНачинаетсяС(Значение, "[")
		Или СтрНачинаетсяС(Значение, "{")
		Или СтрНачинаетсяС(Значение, "- ")
		Или (СтрНайти(Значение, Символы.ПС) > 0 И Не СтрНачинаетсяС(Значение, """")) Тогда
		Результат = ПреобразоватьСтрокуВКоллекцию(Значение, НеобходимоПоместитьВоВременноеХранилище, Уровень);
		Возврат Результат;
	ИначеЕсли ЭтоНавигационнаяСсылка Тогда
		Результат = ПолучитьСсылкуИзНавигационной(Значение);
	КонецЕсли;
	
	Если НеобходимоПоместитьВоВременноеХранилище = Истина Тогда
		Результат = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьЭтоНавигационнаяСсылка(Значение)
	
	Если СтрНачинаетсяС(Значение, "e1c") И (СтрНайти(Значение, "?ref=") > 0) Тогда
		Позиция = СтрНайти(Значение, "=");
		Если (Позиция > 5) И (СтрСравнить(Сред(Значение, Позиция - 4, 5), "?ref=") = 0) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПреобразоватьСтрокуВКоллекцию(Знач Значение, НеобходимоПоместитьВоВременноеХранилище = Неопределено, Уровень = 2)
	
	Если НеобходимоПоместитьВоВременноеХранилище = Неопределено Тогда
		НеобходимоПоместитьВоВременноеХранилище = Ложь;
		Если СтрНачинаетсяС(Значение, "*") Тогда
			НеобходимоПоместитьВоВременноеХранилище = Истина;
			Значение = Сред(Значение, 2);
		КонецЕсли;
	КонецЕсли;
	
	ИменаКолонокТаблицыВОтдельнойСтроке = Ложь;
	
	МассивСтрок = СтрРазделить(Значение, Символы.ПС);
	ТипыКолонок = Неопределено;
	Коллекция = Неопределено;
	Для НомерСтроки = 0 По МассивСтрок.ВГраница() Цикл
		
		Строка = МассивСтрок[НомерСтроки];
		
		Если НомерСтроки = 0 Тогда
			Строка = СокрЛП(Строка);
			Если СтрНачинаетсяС(Строка, "- ") Тогда
				Строка = СокрЛП(Сред(Строка, 3));
			КонецЕсли;
			
			Коллекция = ОпределитьТипКоллекции(Строка);
			
			Если Коллекция = Неопределено Тогда
				// Массив по шаблону: [<Элемент1>, <Элемент2>]
				Если СтрНачинаетсяС(Строка, "[")
					И СтрНайти(Строка, "]") > 0 Тогда
					Коллекция = Новый Массив;
					Строка = Сред(Строка, СтрНайти(Строка, "[") + 1);
					Строка = Сред(Строка, 1, СтрНайти(Строка, "]", НаправлениеПоиска.СКонца) - 1);
					
					ПривестиСтрокуККоллекции(Строка, Коллекция, Уровень);
					Прервать;
					
				// Структура по шаблону: {<Ключ>: <Значение>}
				ИначеЕсли СтрНачинаетсяС(Строка, "{")
					И СтрНайти(Строка, "}") > 0 Тогда
					Коллекция = Новый Структура;
					Строка = Сред(Строка, СтрНайти(Строка, "{") + 1);
					Строка = Сред(Строка, 1, СтрНайти(Строка, "}", НаправлениеПоиска.СКонца) - 1);
					
					ПривестиСтрокуККоллекции(Строка, Коллекция, Уровень);
					Прервать;
					
				ИначеЕсли СтрНайти(УдалитьТекстВнутриКавычек(Строка), ":") > 0 Тогда
					Коллекция = Новый Структура;
					
				// Многострочная строка.
				ИначеЕсли Строка = "|" Тогда
					МногострочнаяСтрока = СформироватьСтрокуДляДобавленияВКоллекцию(МассивСтрок, НомерСтроки + 1, Уровень);
					МассивМногострочнойСтроки = СтрРазделить(МногострочнаяСтрока, Символы.ПС);
					Для Каждого ЭлементМассива Из МассивМногострочнойСтроки Цикл
						ЭлементМассива = СокрЛП(МассивМногострочнойСтроки);
					КонецЦикла;
					МногострочнаяСтрока = СтрСоединить(МассивМногострочнойСтроки, Символы.ПС);
					Возврат МногострочнаяСтрока;
				КонецЕсли;
			КонецЕсли;
			
			Если Коллекция = Неопределено Тогда
				Возврат Значение;
			КонецЕсли;
			
			Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений")
				Или ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
				
				ТипыКолонок = Новый Соответствие();
				
				СтрокаСИменамиКолонок = Строка;
				Если ПустаяСтрока(Строка) Тогда
					Если МассивСтрок.ВГраница() = 0 Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаСИменамиКолонок = МассивСтрок[НомерСтроки + 1];
					// Пустая таблица без колонок.
					Если ПолучитьУровень(СтрокаСИменамиКолонок) <> Уровень Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрНачинаетсяС(СокрЛП(СтрокаСИменамиКолонок), "- ") Тогда
					МассивИменКолонок = ПолучитьИменаКолонокТаблицы(МассивСтрок, НомерСтроки + 1, Уровень + 2);
				Иначе
					МассивИменКолонок = СтрРазделить(СтрокаСИменамиКолонок, ",");
					НомерСтроки = НомерСтроки + 1;
					ИменаКолонокТаблицыВОтдельнойСтроке = Истина;
				КонецЕсли;
				
				Для Каждого Колонка Из МассивИменКолонок Цикл
					
					ОписаниеТиповКолонки = Новый Массив;
					Колонка = СокрЛП(Колонка);
					ОписаниеКолонки = СтрРазделить(Колонка, ":");
					
					Если ОписаниеКолонки.Количество() > 1 Тогда
						
						ТипКолонки = ПреобразоватьПараметрыКТипам(ОписаниеКолонки[1], УникальныйИдентификатор, НеобходимоПоместитьВоВременноеХранилище, Уровень);
						ОписаниеТиповКолонки.Добавить(ТипЗнч(ТипКолонки));
						Коллекция.Колонки.Добавить(ОписаниеКолонки[0], Новый ОписаниеТипов(ОписаниеТиповКолонки));
					Иначе
						Коллекция.Колонки.Добавить(ОписаниеКолонки[0]);
					КонецЕсли;
					
					ТипыКолонок.Вставить(ОписаниеКолонки[0], ОписаниеТиповКолонки);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийУровень = ПолучитьУровень(Строка);
		Если ТекущийУровень <> Уровень Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = СокрЛП(Строка);
		Если СтрНачинаетсяС(Строка, "- ") Тогда
			Строка = СокрЛП(Сред(Строка, 3));
		КонецЕсли;
		
		Если ТипЗнч(Коллекция) = Тип("Структура")
			Или ТипЗнч(Коллекция) = Тип("Соответствие")
			Или ТипЗнч(Коллекция) = Тип("СписокЗначений") Тогда
			СтруктураКлючЗначение = ПолучитьКлючИЗначениеСтруктуры(Строка);
			Ключ = СтруктураКлючЗначение.Ключ;
			ЗначениеСтруктуры = СтруктураКлючЗначение.Значение;
			
			СтрокаДляДобавленияВКоллекцию = СформироватьСтрокуДляДобавленияВКоллекцию(МассивСтрок, НомерСтроки + 1, Уровень + 2);
			СтрокаДляДобавленияВКоллекцию = ЗначениеСтруктуры + Символы.ПС + СтрокаДляДобавленияВКоллекцию;
			
			ЗначениеЭлемента = ПреобразоватьПараметрыКТипам(СокрЛП(СтрокаДляДобавленияВКоллекцию), УникальныйИдентификатор,, Уровень + 2);
			
			Коллекция.Вставить(Ключ, ЗначениеЭлемента);
			
		ИначеЕсли ТипЗнч(Коллекция) = Тип("Массив") Тогда
			
			СтрокаДляДобавленияВКоллекцию = СформироватьСтрокуДляДобавленияВКоллекцию(МассивСтрок, НомерСтроки + 1, Уровень + 2);
			СтрокаДляДобавленияВКоллекцию = Строка + Символы.ПС + СтрокаДляДобавленияВКоллекцию;
			ЗначениеЭлемента = ПреобразоватьПараметрыКТипам(СокрЛП(СтрокаДляДобавленияВКоллекцию), УникальныйИдентификатор,, Уровень + 2);
			Коллекция.Добавить(ЗначениеЭлемента);
			
		ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
			СтруктураСоЗначениемКолонок = СформироватьСтруктуруСоЗначениемКолонокТаблицы(МассивСтрок, НомерСтроки, Уровень + 2,
				ИменаКолонокТаблицыВОтдельнойСтроке, Коллекция);
			
			НоваяСтрока = Коллекция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСоЗначениемКолонок);
		ИначеЕсли ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
			СтруктураСоЗначениемКолонок = СформироватьСтруктуруСоЗначениемКолонокТаблицы(МассивСтрок, НомерСтроки, Уровень + 2,
				ИменаКолонокТаблицыВОтдельнойСтроке, Коллекция);
			
			НоваяСтрока = Коллекция.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСоЗначениемКолонок);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений")
		Или ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		Коллекция = СформироватьТаблицуИзКоллекции(Коллекция, ТипыКолонок);
		
		Если (НеобходимоПоместитьВоВременноеХранилище = Ложь) И (Уровень = 2) Тогда
			
			//ДанныеФормыКоллекция
			ОписаниеТипа = Новый ОписаниеТипов(?(ТипЗнч(Коллекция) = Тип("ТаблицаЗначений"), "ТаблицаЗначений", "ДеревоЗначений"));
			
			Реквизиты = Новый Массив;
			Реквизиты.Добавить(Новый РеквизитФормы("ТаблицаНаФорме", ОписаниеТипа));
			Для Каждого СтрокаТаблицы Из Коллекция.Колонки Цикл
				Реквизиты.Добавить(Новый РеквизитФормы(СтрокаТаблицы.Имя, СтрокаТаблицы.ТипЗначения, "ТаблицаНаФорме"));
			КонецЦикла;
			
			ИзменитьРеквизиты(Реквизиты);
			
			ЗначениеВРеквизитФормы(Коллекция, "ТаблицаНаФорме");
			Коллекция = ЭтотОбъект["ТаблицаНаФорме"];
			
			Реквизиты = Новый Массив;
			Реквизиты.Добавить("ТаблицаНаФорме");
			ИзменитьРеквизиты(, Реквизиты);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимоПоместитьВоВременноеХранилище = Истина Тогда
		Коллекция = ПоместитьВоВременноеХранилище(Коллекция, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

&НаСервере
Функция ОпределитьТипКоллекции(Строка)
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("!!Массив", Новый Массив);
	СоответствиеТипов.Вставить("!!Структура", Новый Структура);
	СоответствиеТипов.Вставить("!!СписокЗначений", Новый СписокЗначений);
	СоответствиеТипов.Вставить("!!Соответствие", Новый Соответствие);
	СоответствиеТипов.Вставить("!!ТаблицаЗначений", Новый ТаблицаЗначений);
	СоответствиеТипов.Вставить("!!ДеревоЗначений", Новый ДеревоЗначений);
	СоответствиеТипов.Вставить("!!Array", Новый Массив);
	СоответствиеТипов.Вставить("!!Structure", Новый Структура);
	СоответствиеТипов.Вставить("!!ValueList", Новый СписокЗначений);
	СоответствиеТипов.Вставить("!!Map", Новый Соответствие);
	СоответствиеТипов.Вставить("!!ValueTable", Новый ТаблицаЗначений);
	СоответствиеТипов.Вставить("!!ValueTree", Новый ДеревоЗначений);
	
	Для Каждого ЭлементСоответствия Из СоответствиеТипов Цикл
		ЭлементТип = ЭлементСоответствия.Ключ;
		Если СтрНачинаетсяС(Строка, ЭлементТип) Тогда
			Строка = Сред(Строка, СтрДлина(ЭлементТип) + 1);
			Возврат ЭлементСоответствия.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПривестиСтрокуККоллекции(Значение, Коллекция, Уровень)
	
	ЗначениеБезТекстаВКавычках = УдалитьТекстВнутриКавычек(Значение);
	
	МассивЭлементов = СтрРазделить(ЗначениеБезТекстаВКавычках, ",");
	Позиция = 1;
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		
		ТекстЭлемента = Сред(Значение, Позиция, СтрДлина(ЭлементМассива));
		
		Если ТипЗнч(Коллекция) = Тип("Массив") Тогда
			Коллекция.Добавить(ПреобразоватьПараметрыКТипам(СокрЛП(ТекстЭлемента), УникальныйИдентификатор,, Уровень + 2));
		ИначеЕсли ТипЗнч(Коллекция) = Тип("Структура") Тогда
			СтруктураКлючЗначение = ПолучитьКлючИЗначениеСтруктуры(ТекстЭлемента);
			ЗначениеСтруктуры = ПреобразоватьПараметрыКТипам(СтруктураКлючЗначение.Значение, УникальныйИдентификатор,, Уровень + 2);
			Коллекция.Вставить(СтруктураКлючЗначение.Ключ, ЗначениеСтруктуры);
		КонецЕсли;
		
		Позиция = Позиция + СтрДлина(ЭлементМассива) + 1;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьКлючИЗначениеСтруктуры(Строка)
	
	МассивЗначения = СтрРазделить(Строка, ":");
	Ключ = СокрЛП(МассивЗначения[0]);
	Если МассивЗначения.Количество() = 1 Тогда
		ЗначениеСтруктуры = "";
	Иначе
		МассивЗначения.Удалить(0);
		ЗначениеСтруктуры = СокрЛП(СтрСоединить(МассивЗначения, ":"));
	КонецЕсли;
	
	Возврат Новый Структура("Ключ, Значение", Ключ, ЗначениеСтруктуры);
	
КонецФункции

&НаСервере
Функция СформироватьСтрокуДляДобавленияВКоллекцию(МассивСтрок, НомерСтроки, Уровень)
	
	Если НомерСтроки > МассивСтрок.ВГраница() Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаДляДобавленияВКоллекцию = МассивСтрок[НомерСтроки];
	Если ПолучитьУровень(СтрокаДляДобавленияВКоллекцию) < Уровень Тогда
		Возврат "";
	КонецЕсли;
	
	ИсходныйНомерСтроки = НомерСтроки;
	ИсходныйНомерСтроки = ИсходныйНомерСтроки + 1;
	Для Счет = ИсходныйНомерСтроки По МассивСтрок.ВГраница() Цикл
		
		ТекущаяСтрока = МассивСтрок[Счет];
		
		Если ПолучитьУровень(ТекущаяСтрока) < Уровень Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаДляДобавленияВКоллекцию = СтрокаДляДобавленияВКоллекцию + Символы.ПС + ТекущаяСтрока;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат СтрокаДляДобавленияВКоллекцию;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруСоЗначениемКолонокТаблицы(МассивСтрок, НомерСтроки, Уровень, ИменаКолонокТаблицыВОтдельнойСтроке, Коллекция)
	
	СтруктураЗначений = Новый Структура;
	
	ТекущаяСтрока = СокрЛП(МассивСтрок[НомерСтроки]);
	Если СтрНачинаетсяС(СтрЗаменить(ТекущаяСтрока, " ", ""), "-[")
		И СтрЗаканчиваетсяНа(ТекущаяСтрока, "]") Тогда
		ТекущаяСтрока = Сред(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, "[") + 1);
		ТекущаяСтрока = Сред(ТекущаяСтрока, 1, СтрНайти(ТекущаяСтрока, "]", НаправлениеПоиска.СКонца) - 1);
		
		МассивЗначений = Новый Массив;
		ПривестиСтрокуККоллекции(ТекущаяСтрока, МассивЗначений, Уровень);
		
		Для НомерКолонки = 0 По Коллекция.Колонки.Количество() - 1 Цикл
			Если НомерКолонки > МассивЗначений.ВГраница() Тогда
				Прервать;
			КонецЕсли;
			
			ЗначениеКолонки = МассивЗначений[НомерКолонки];
			ИмяКолонки = Коллекция.Колонки[НомерКолонки].Имя;
			СтруктураЗначений.Вставить(ИмяКолонки, ЗначениеКолонки);
		КонецЦикла;
		
		Возврат СтруктураЗначений;
	КонецЕсли;
	
	ЗначениеСтруктуры = "";
	НомерКолонки = 0;
	ИсходныйНомерСтроки = НомерСтроки;
	Для Счет = ИсходныйНомерСтроки По МассивСтрок.ВГраница() Цикл
		
		ИсходнаяТекущаяСтрока = МассивСтрок[Счет];
		ТекущийУровень = ПолучитьУровень(ИсходнаяТекущаяСтрока);
		
		Если Счет > ИсходныйНомерСтроки И ТекущийУровень < Уровень Тогда
			НомерСтроки = НомерСтроки - 1;
			Прервать;
		КонецЕсли;
		
		ТекущаяСтрока = СокрЛП(ИсходнаяТекущаяСтрока);
		Если СтрНачинаетсяС(ТекущаяСтрока, "- ") Тогда
			ТекущаяСтрока = СокрЛП(Сред(ТекущаяСтрока, 3));
		КонецЕсли;
		
		Если (Счет = ИсходныйНомерСтроки) Тогда
			ЗначениеСтруктуры = ТекущаяСтрока;
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		Если ТекущийУровень > Уровень Тогда
			ЗначениеСтруктуры = ЗначениеСтруктуры + Символы.ПС + ИсходнаяТекущаяСтрока;
		ИначеЕсли ТекущийУровень = Уровень Тогда
			Если ИменаКолонокТаблицыВОтдельнойСтроке Тогда
				
				Если НомерКолонки > (Коллекция.Колонки.Количество() - 1) Тогда
					Прервать;
				КонецЕсли;
				
				ИмяКолонки = Коллекция.Колонки[НомерКолонки].Имя;
				Значение = ПреобразоватьПараметрыКТипам(СокрЛП(ЗначениеСтруктуры), УникальныйИдентификатор,, Уровень + 2);
				СтруктураЗначений.Вставить(ИмяКолонки, Значение);
				НомерКолонки = НомерКолонки + 1;
			Иначе
				СтруктураКлючЗначение = ПолучитьКлючИЗначениеСтруктуры(ЗначениеСтруктуры);
				Значение = ПреобразоватьПараметрыКТипам(СокрЛП(СтруктураКлючЗначение.Значение), УникальныйИдентификатор,, Уровень + 2);
				СтруктураЗначений.Вставить(СтруктураКлючЗначение.Ключ, Значение);
			КонецЕсли;
			ЗначениеСтруктуры = ТекущаяСтрока;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если (Не ПустаяСтрока(ЗначениеСтруктуры)) Тогда
		Если ИменаКолонокТаблицыВОтдельнойСтроке И (НомерКолонки = (Коллекция.Колонки.Количество() - 1)) Тогда
			ИмяКолонки = Коллекция.Колонки[НомерКолонки].Имя;
			Значение = ПреобразоватьПараметрыКТипам(СокрЛП(ЗначениеСтруктуры), УникальныйИдентификатор,, Уровень + 2);
			СтруктураЗначений.Вставить(ИмяКолонки, Значение);
		Иначе
			СтруктураКлючЗначение = ПолучитьКлючИЗначениеСтруктуры(ЗначениеСтруктуры);
			Значение = ПреобразоватьПараметрыКТипам(СокрЛП(СтруктураКлючЗначение.Значение), УникальныйИдентификатор,, Уровень + 2);
			СтруктураЗначений.Вставить(СтруктураКлючЗначение.Ключ, Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураЗначений;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуИзКоллекции(Коллекция, ТипыКолонок)
	
	ЭтоДерево = Ложь;
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		ЭтоДерево = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ?(ЭтоДерево, Коллекция.Строки, Коллекция) Цикл
		Для Каждого Колонка Из Коллекция.Колонки Цикл
			ТипЗначения = ТипЗнч(СтрокаТаблицы[Колонка.Имя]);
			Если ТипыКолонок.Получить(Колонка.Имя).Найти(ТипЗначения) = Неопределено Тогда
				ТипыКолонок.Получить(Колонка.Имя).Добавить(ТипЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Таблица 2 с нужным типом колонок.
	Если ЭтоДерево Тогда
		Результат = Новый ДеревоЗначений;
	Иначе
		Результат = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Колонка Из ТипыКолонок Цикл
		Результат.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов(Колонка.Значение));
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ?(ЭтоДерево, Коллекция.Строки, Коллекция) Цикл
		ЗаполнитьЗначенияСвойств(?(ЭтоДерево, Результат.Строки.Добавить(), Результат.Добавить()), СтрокаТаблицы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьУровень(СтрокаЗначения)
	
	Уровень = 0;
	
	Если Не ПустаяСтрока(СтрокаЗначения) Тогда
		ПереборОкончен = Истина;
		НомСимвола = 1;
		Пока ПереборОкончен Цикл
			Если Сред(СтрокаЗначения, НомСимвола, 1) = " " Тогда
				НомСимвола = НомСимвола + 1;
				Уровень    = Уровень + 1;
			Иначе
				ПереборОкончен = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Уровень;
	
КонецФункции

&НаСервере
Функция ПолучитьИменаКолонокТаблицы(МассивСтрок, Знач НомерСтроки, Уровень)
	
	МассивИменКолонок = Новый Массив;
	
	ЭтоПерваяСтрока = Истина;
	Для Счет = НомерСтроки По МассивСтрок.ВГраница() Цикл
		
		ТекущаяСтрока = МассивСтрок[Счет];
		
		Если (Не ЭтоПерваяСтрока) И ПолучитьУровень(ТекущаяСтрока) < Уровень Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока);
		
		Если СтрНачинаетсяС(ТекущаяСтрока, "- ") Тогда
			ТекущаяСтрока = СокрЛП(Сред(ТекущаяСтрока, 3));
		КонецЕсли;
		
		СтруктураКлючЗначение = ПолучитьКлючИЗначениеСтруктуры(ТекущаяСтрока);
		МассивИменКолонок.Добавить(СтруктураКлючЗначение.Ключ);
		
		ЭтоПерваяСтрока = Ложь;
	КонецЦикла;
	
	Возврат МассивИменКолонок;
	
КонецФункции

&НаСервере
Функция УдалитьТекстВнутриКавычек(Знач ТекстМеждуСкобок)
	
	Кавычка = """";
	ИтоговаяСтрока = "";
	
	КавычкаОткрыта = Ложь;
	ДлинаСтроки = СтрДлина(ТекстМеждуСкобок);
	Для Счет = 1 По ДлинаСтроки Цикл
		Символ = Сред(ТекстМеждуСкобок, Счет, 1);
		Если Символ = Кавычка Тогда
			КавычкаОткрыта = Не КавычкаОткрыта;
		КонецЕсли;
		
		Если КавычкаОткрыта Тогда
			Символ = " ";
		КонецЕсли;
		
		ИтоговаяСтрока = ИтоговаяСтрока + Символ;
	КонецЦикла;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеЕслиТребуется(Результат, НеобходимоПоместитьВоВременноеХранилище, УникальныйИдентификатор)
	Если НеобходимоПоместитьВоВременноеХранилище = Истина Тогда
		Результат = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПреобразоватьПараметрКПримитивнымТипам(Знач Значение)
	
	ЗначениеДляПреобразования = СокрЛП(Значение);
	
	ДлинаЗначения = СтрДлина(ЗначениеДляПреобразования);
	
	// Строка (явное указание кавычками)
	Если СтрНачинаетсяС(ЗначениеДляПреобразования, """") И СтрЗаканчиваетсяНа(ЗначениеДляПреобразования, """") Тогда
		Возврат Сред(ЗначениеДляПреобразования, 2, СтрДлина(ЗначениеДляПреобразования) - 2);
	КонецЕсли;
	
	ПозицияRef = СтрНайти(Значение, "?ref=");
	Если ПозицияRef > 0 И СтрНачинаетсяС(Значение, "e1c") И СтрДлина(Сред(Значение, ПозицияRef + 5)) = 32 Тогда
		
		Позиция = СтрНайти(Значение, "=");
		Если Позиция > 5 И СтрСравнить(Сред(Значение, Позиция - 4, 5), "?ref=") = 0 Тогда
			Возврат ПолучитьСсылкуИзНавигационной(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	// Число
	Если СтрРазделить(ЗначениеДляПреобразования, "1234567890", Ложь).Количество() = 0 Тогда
		ТипЧисло = Новый ОписаниеТипов("Число");
		Возврат ТипЧисло.ПривестиЗначение(ЗначениеДляПреобразования);
	КонецЕсли;
	
	// Дата
	Если ДлинаЗначения = 10 И Сред(ЗначениеДляПреобразования, 5, 1) = "/" И Сред(ЗначениеДляПреобразования, 8, 1) = "/" Тогда
		Возврат Дата(СтрСоединить(СтрРазделить(ЗначениеДляПреобразования, "/")));
	КонецЕсли;
	
	// Дата и время
	Если ДлинаЗначения = 19 И Сред(ЗначениеДляПреобразования, 5, 1) = "/" И Сред(ЗначениеДляПреобразования, 8, 1) = "/"
		И Сред(ЗначениеДляПреобразования, 14, 1) = ":" И Сред(ЗначениеДляПреобразования, 17, 1) = ":" Тогда
		Возврат Дата(СтрСоединить(СтрРазделить(ЗначениеДляПреобразования, "/: ")));
	КонецЕсли;
	
	// УникальныйИдентификатор
	Если ДлинаЗначения = 36 И СтрЧислоВхождений(ЗначениеДляПреобразования, "-") = 4 Тогда
		Возврат Новый УникальныйИдентификатор(ЗначениеДляПреобразования);
	КонецЕсли;
	
	// Булево
	Если СтрСравнить(ЗначениеДляПреобразования, "Истина") = 0 Тогда
		Возврат Истина;
	ИначеЕсли СтрСравнить(ЗначениеДляПреобразования, "Ложь") = 0 Тогда
		Возврат Ложь;
	ИначеЕсли СтрСравнить(ЗначениеДляПреобразования, "Неопределено") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Признак, что это другой тип.
	Возврат Символы.ВТаб;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуИзНавигационной(НавигационнаяСсылка)
	
	Если СтрЗаканчиваетсяНа(НавигационнаяСсылка, ";") Тогда
		НавигационнаяСсылка = Лев(НавигационнаяСсылка, СтрДлина(НавигационнаяСсылка) - 1);
	КонецЕсли;
	
	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
	ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");
	
	ПредставлениеТипа = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	Если Метаданные.НайтиПоПолномуИмени(ПредставлениеТипа) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка, ВтораяТочка + 5));
	СсылкаНаОбъект = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

&НаСервере
Процедура ДобавитьФормыПодсистемыВИсключение(ИмяПодсистемы, СписокИсключений, Словарь)
	
	ОбъектыСФормами = Новый Соответствие();
	ОбъектыСФормами.Вставить(ПеревестиЗначение("Справочник", Словарь),				Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("Документ", Словарь),				Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("ЖурналДокументов", Словарь),		Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("ПланВидовХарактеристик", Словарь),	Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("Перечисление", Словарь),			Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("Обработка", Словарь),				Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("ПланВидовРасчета", Словарь),		Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("ПланСчетов", Словарь),				Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("Задача", Словарь),					Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("ПланОбмена", Словарь),				Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("РегистрБухгалтерии", Словарь),		Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("РегистрНакопления", Словарь),		Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("РегистрРасчета", Словарь),			Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("РегистрСведений", Словарь),			Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("БизнесПроцесс", Словарь),			Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("КритерийОтбора", Словарь),			Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("ОбщаяФорма", Словарь),				Истина);
	ОбъектыСФормами.Вставить(ПеревестиЗначение("РегламентноеЗадание", Словарь),		Истина);
	
	СписокВсехФормПодсистемы(ИмяПодсистемы, СписокИсключений, ОбъектыСФормами, Словарь);
	
КонецПроцедуры

&НаСервере
Процедура СписокВсехФормПодсистемы(ИмяПодсистемы, СписокИсключений, ОбъектыСФормами, Словарь)
	
	ПроверяемыйОбъект = Метаданные.НайтиПоПолномуИмени(ИмяПодсистемы);
	
	Если ПроверяемыйОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектовБезФорм = Новый Массив;
	МассивОбъектовБезФорм.Добавить(ПеревестиЗначение("ОбщаяФорма", Словарь));
	МассивОбъектовБезФорм.Добавить(ПеревестиЗначение("РегламентноеЗадание", Словарь));
	
	Для Каждого ЭлементПодсистемы Из ПроверяемыйОбъект.Состав Цикл
		ПолноеИмя = ЭлементПодсистемы.ПолноеИмя();
		ТипОбъекта = СтрРазделить(ПолноеИмя, ".")[0];
		Если ОбъектыСФормами[ТипОбъекта] = Истина Тогда
			Если МассивОбъектовБезФорм.Найти(ТипОбъекта) = Неопределено Тогда
				Для Каждого ФормаОбъекта Из ЭлементПодсистемы.Формы Цикл
					СписокИсключений.Вставить(ФормаОбъекта.ПолноеИмя(), Истина);
				КонецЦикла;
			Иначе
				СписокИсключений.Вставить(ПолноеИмя, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ВложеннаяПодсистема Из ПроверяемыйОбъект.Подсистемы Цикл
		СписокВсехФормПодсистемы(ВложеннаяПодсистема.ПолноеИмя(), СписокИсключений, ОбъектыСФормами, Словарь)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровСтрокой(ОписаниеПараметра)
	
	Если ТипЗнч(ОписаниеПараметра) <> Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого КлючПараметр Из ОписаниеПараметра Цикл
		Если СтрСравнить(КлючПараметр.Ключ, "Ключ") = 0 И ПустаяСтрока(КлючПараметр.Значение) Тогда
			КлючПараметрЗначение = "<пустая ссылка>";
		Иначе
			КлючПараметрЗначение = КлючПараметр.Значение;
		КонецЕсли;
		Результат.Добавить(КлючПараметр.Ключ +" = " + КлючПараметрЗначение);
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, ", ");
	
КонецФункции

#КонецОбласти

#Область Логирование

&НаКлиенте
Процедура УстановитьФайлПротоколаВремениОткрытияФорм()
	
	Если ПустаяСтрока(ПутьКФайлуПротокола) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрЗаканчиваетсяНа(ПутьКФайлуПротокола, ПолучитьРазделительПути()) Тогда
		ПутьКФайлуПротокола = ПутьКФайлуПротокола + ПолучитьРазделительПути();
	КонецЕсли;
	
	ВерсияБСПСтруктурой = СтрРазделить(ВерсияБСП(), ".");
	ВерсияБСПСтруктурой.Удалить(ВерсияБСПСтруктурой.Количество() - 1);
	ВерсияБСПБезНомераСборки = СтрСоединить(ВерсияБСПСтруктурой, "");
	
	ДатаСтрокой = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	ПутьКФайлуПротоколаСВерсией = ПутьКФайлуПротокола + ВерсияБСПБезНомераСборки() + ДатаСтрокой + ПолучитьРазделительПути();
	
	СоздатьКаталог(ПутьКФайлуПротоколаСВерсией); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	
	ШаблонИмениФайла = "%1_%2.csv";
	ИмяФайла = СтрШаблон(ШаблонИмениФайла, Формат(ТекущаяДата(), "ДФ=HHmmss"), ТекущийПользователь);
	
	Если ПустаяСтрока(ПолноеИмяФайлаЛогированияВремени) Тогда
		ПолноеИмяФайлаЛогированияВремени = ПутьКФайлуПротоколаСВерсией + УдалитьСпециальныеСимволы(ИмяФайла);
	КонецЕсли;
	
	Если ПустаяСтрока(ПолноеИмяФайлаЛогированияОшибок) Тогда
		ШаблонИмениФайла = "%1_%2_Протокол.txt";
		ИмяФайла = СтрШаблон(ШаблонИмениФайла, Формат(ТекущаяДата(), "ДФ=HHmmss"), ТекущийПользователь);
		ПолноеИмяФайлаЛогированияОшибок = ПутьКФайлуПротоколаСВерсией + УдалитьСпециальныеСимволы(ИмяФайла);
	КонецЕсли;

	ШаблонИмениФайла = "%1_%2_ТаблицаПротестированныхФорм.xml";
	ИмяФайла = СтрШаблон(ШаблонИмениФайла, Формат(ТекущаяДата(), "ДФ=HHmmss"), ТекущийПользователь);
	ПутьКФайлуТаблицыПротестированныхФорм = ПутьКФайлуПротоколаСВерсией + УдалитьСпециальныеСимволы(ИмяФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияБСПБезНомераСборки()
	
	ВерсияБСПСтруктурой = СтрРазделить(ВерсияБСП(), ".");
	ВерсияБСПСтруктурой.Удалить(ВерсияБСПСтруктурой.Количество() - 1);
	
	Возврат СтрСоединить(ВерсияБСПСтруктурой, "") + ПолучитьРазделительПути();
	
КонецФункции

&НаСервере
Функция УдалитьСпециальныеСимволы(ИмяФайла)
	
	Возврат СтрСоединить(СтрРазделить(ИмяФайла, "\/:*?""<>|", Ложь), "");
	
КонецФункции

/////////////////////////////////////
// Логирование

&НаКлиенте
Процедура ДобавитьВЛогВремениОткрытияФорм(Знач Текст, НоваяСтрока = Истина);
	
	Если ПустаяСтрока(ПолноеИмяФайлаЛогированияВремени) Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Текст = Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DT") + ";" + Текст;
	Иначе
		Текст = ";" + Текст;
	КонецЕсли;
	
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяФайлаЛогированияВремени, КодировкаТекста.UTF8,, Истина);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПротоколТестирования(Знач Текст, Параметр1 = "");
	
	Текст = "[" + Формат(ТекущаяДата(), "ДЛФ=DT") +"]" + Текст + Символы.ПС + Символы.ПС;
	
	Текст = СтрЗаменить(Текст, "%1", Параметр1);
	
	Если ПустаяСтрока(ПолноеИмяФайлаЛогированияОшибок) Тогда
		Протокол = Протокол + Текст;
		Возврат;
	КонецЕсли;
	
	НаличиеФайла = Новый Файл(ПолноеИмяФайлаЛогированияОшибок);
	Если Не НаличиеФайла.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
		ЗаписьТекса = Новый ЗаписьТекста(ПолноеИмяФайлаЛогированияОшибок, КодировкаТекста.UTF8,, Истина);
		ЗаписьТекса.Записать(ИнформацияОТестировании() + Символы.ПС);
		ЗаписьТекса.Закрыть();
	КонецЕсли;
	
	ЗаписьТекса = Новый ЗаписьТекста(ПолноеИмяФайлаЛогированияОшибок, КодировкаТекста.UTF8,, Истина);
	ЗаписьТекса.Записать(Текст);
	ЗаписьТекса.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОшибкуВремениОткрытияФормы(ТипПроверки, ТипОшибки, ВремяОткрытия,
	ЗаписатьОшибкуВФайл = Истина, ИмяФормыСОшибкой = "")
	
	Если ТипОшибки = Неопределено Тогда
		ТипОшибки = ОшибкаВремениОткрытияФормы();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФормыСОшибкой) Тогда
		ИмяФормыСОшибкой = ИмяОткрываемойФормы;
	КонецЕсли;
	
	ОписаниеОжидаемоеВремя = "";
	Если ТипПроверки = "ОткрытиеФормы" Тогда
		ОписаниеОжидаемоеВремя = НСтр("ru='Ожидаемое время открытия формы: %1 сек.'; en='Ожидаемое время открытия формы: %1 сек.'", КодЯзыкаТекущейПроверки);
	ИначеЕсли ТипПроверки = "ФормаОтчета" Тогда
		ОписаниеОжидаемоеВремя = НСтр("ru='Ожидаемое время формирования отчета: %1 сек.'; en='Ожидаемое время формирования отчета: %1 сек.'", КодЯзыкаТекущейПроверки);
	ИначеЕсли ТипПроверки = "ФормаНастроекОтчета" Тогда
		ОписаниеОжидаемоеВремя = НСтр("ru='Ожидаемое время открытия формы настроек отчета: %1 сек.'; en='Ожидаемое время открытия формы настроек отчета: %1 сек.'", КодЯзыкаТекущейПроверки);
	ИначеЕсли ТипПроверки = "ПечатнаяФорма" Тогда
		ОписаниеОжидаемоеВремя = НСтр("ru='Ожидаемое время открытия печатной формы: %1 сек.'; en='Ожидаемое время открытия печатной формы: %1 сек.'", КодЯзыкаТекущейПроверки);
	ИначеЕсли ТипПроверки = "ВводНаОсновании" Тогда
		ОписаниеОжидаемоеВремя = НСтр("ru='Ожидаемое время открытия формы, вводимой на основании: %1 сек.'; en='Ожидаемое время открытия формы, вводимой на основании: %1 сек.'", КодЯзыкаТекущейПроверки);
	КонецЕсли;
	
	ОписаниеОшибки = СтрШаблон(ОписаниеОжидаемоеВремя + Символы.ПС + НСтр("ru='фактическое время открытия: %2 сек.'; en='фактическое время открытия: %2 сек.'", КодЯзыкаТекущейПроверки),
		ДлительностьОткрытияФормы, ВремяОткрытия);
	
	ЗаписатьОшибку(ТипПроверки, ИмяФормыСОшибкой, ТипОшибки, Неопределено, ОписаниеОшибки,, ЗаписатьОшибкуВФайл);
	
	ДобавитьВПротоколТестирования(ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОшибкуОткрытияФормыОтличнойОтТестируемой(МассивОткрытыхФорм)
	
	ТипПроверки = "ОткрытиеФормы";
	ТипОшибки = ОшибкаОткрытияФормыОтличнойОтТестируемой();
	
	СтрокаСписокОткрытыхФорм = СтрСоединить(МассивОткрытыхФорм, ",");
	
	Если МассивОткрытыхФорм.Количество() = 1 Тогда
		ТекстПроФормы = НСтр("ru = 'При открытии формы %1 открылась форма %2.';ru='При открытии формы %1 открылась форма %2.';
							|en = 'При открытии формы %1 открылась форма %2.';ru='При открытии формы %1 открылась форма %2.'");
	ИначеЕсли МассивОткрытыхФорм.Количество() > 1 Тогда
		ТекстПроФормы = НСтр("ru = 'При открытии формы %1 открылись формы %2.';ru='При открытии формы %1 открылись формы %2.';
							|en = 'При открытии формы %1 открылись формы %2.';ru='При открытии формы %1 открылись формы %2.'");
	Иначе
		ТекстПроФормы = НСтр("ru = 'При открытии формы %1 ничего не открылось.';ru='При открытии формы %1 ничего не открылось.';
							|en = 'При открытии формы %1 ничего не открылось.';ru='При открытии формы %1 ничего не открылось.'");
	КонецЕсли;
	
	ОписаниеОшибки = СтрШаблон(ТекстПроФормы + " "
			+ НСтр("ru='Если существующее поведение является корректным, то в yaml-файл настроек для формы %1 необходимо добавить:
			|&ОжидаемаяФорма: %2';
			|en='Если существующее поведение является корректным, то в yaml-файл настроек для формы %1 необходимо добавить:
			|&ОжидаемаяФорма: %2'", КодЯзыкаТекущейПроверки),
		ИмяОткрываемойФормы,
		СтрокаСписокОткрытыхФорм);
	
	ЗаписатьОшибку(ТипПроверки, ИмяОткрываемойФормы, ТипОшибки, Неопределено, ОписаниеОшибки,, Истина);
	
	ДобавитьВПротоколТестирования(ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура НеудачноеЗакрытиеПослеЗавершения()
	
	ДобавитьВПротоколТестирования(НСтр("ru='Неудачное автозавершение. Список открытых окон:'; en='Неудачное автозавершение. Список открытых окон:'", КодЯзыкаТекущейПроверки));
	
	Окна = ПолучитьОкна();
	Для ИндексОкна = 0 По Окна.Количество() - 1 Цикл
		ТекущиеОкно = Окна.Получить(ИндексОкна);
		ДобавитьВПротоколТестирования(ТекущиеОкно.Заголовок + " " + Строка(ТекущиеОкно.ПолучитьНавигационнуюСсылку()));
	КонецЦикла;
	
	ДобавитьВПротоколТестирования(НСтр("ru='Вызов ПрекратитьРаботуСистемы'; en='Вызов ПрекратитьРаботуСистемы'", КодЯзыкаТекущейПроверки));
	
	ПрекратитьРаботуСистемы(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальноеВремяОткрытияФорм()
	Возврат 600; // Если в форме, что-то зависло
КонецФункции

&НаКлиенте
Процедура СформироватьXMLФайлОшибки(ИмяФормы, ПараметрыФормы, ТипОшибки, ИнформацияОбОшибке = "", Комментарий = "",
	ПрикладыватьФайлыКОшибке = Истина, ОписаниеНастроек = "")
	
	Если Не ПроверитьКаталогФайловОшибок() Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуОбработки = НСтр("ru = '\\er13-build-g702\AutoTestFiles\Проверки\<имя версии ветки>\Дымовой тест всех форм и объектов\SmokeTestAllFormsAndObjects.epf';
	|en = '\\er13-build-g702\AutoTestFiles\Проверки\<имя версии ветки>\Дымовой тест всех форм и объектов\SmokeTestAllFormsAndObjects.epf'", КодЯзыкаТекущейПроверки);
	
	Если СтрНачинаетсяС(ИмяФормы, ПеревестиЗначение("РегламентноеЗадание", Словарь) + ".") Тогда
		ТекстПроПараметризацию = НСтр("ru = '
		|• указать текст ожидаемого исключения (если рег. задания завершается с ожидаемой ошибкой).
		|• добавить рег. задания в область ПараметрическиеРегламентныеЗадания, если для работы рег. задания требуется параметры
		|• крайне не рекомендуется добавлять рег. задание в исключения проверки.
		|• если ошибка возникает во всех режимах запуска, то параметры необходимо указывать в файле общих настроек.
		|Если она проявляется только в конкретном режиме, то в дополнительном файле настроек.';
		|en = '
		|• указать текст ожидаемого исключения (если рег. задания завершается с ожидаемой ошибкой).
		|• добавить рег. задания в область ПараметрическиеРегламентныеЗадания, если для работы рег. задания требуется параметры
		|• крайне не рекомендуется добавлять рег. задание в исключения проверки.
		|• если ошибка возникает во всех режимах запуска, то параметры необходимо указывать в файле общих настроек.
		|Если она проявляется только в конкретном режиме, то в дополнительном файле настроек.'");
	ИначеЕсли СтрНайти(ИмяФормы, "."+ ПеревестиЗначение("ИдентификаторКомандыПечати", Словарь) + ".") > 0 Тогда
		ТекстПроПараметризацию = НСтр("ru = '
		|• указать параметры формирования печатной формы в области Открытие.ПараметризуемыеФормы
		|   (если в коде формирования печатных форм несколько веток, то для максимального покрытия кода задать несколько комбинаций параметров)
		|• добавить текст ожидаемого исключения (если печатная форма формируется с ожидаемой ошибкой);
		|• крайне не рекомендуется добавлять печатную форму в исключения проверки.
		|• если ошибка возникает во всех режимах запуска, то параметры необходимо указывать в файле общих настроек.
		|Если она проявляется только в конкретном режиме, то в дополнительном файле настроек.';
		|en = '
		| • указать параметры формирования печатной формы в области Открытие.ПараметризуемыеФормы
		|   (если в коде формирования печатных форм несколько веток, то для максимального покрытия кода задать несколько комбинаций параметров)
		|• добавить текст ожидаемого исключения (если печатная форма формируется с ожидаемой ошибкой);
		|• крайне не рекомендуется добавлять печатную форму в исключения проверки.
		|• если ошибка возникает во всех режимах запуска, то параметры необходимо указывать в файле общих настроек.
		|Если она проявляется только в конкретном режиме, то в дополнительном файле настроек.'");
	Иначе
		ТекстПроПараметризацию = НСтр("ru = '
		|• указать параметры открытия форм (для форм с параметрами; если в коде открытия формы несколько веток, то для максимального покрытия кода задать несколько комбинаций параметров).
		|• добавить текст ожидаемого исключение (если форма не открывается с ожидаемой ошибкой).
		|• крайне не рекомендуется добавлять форму в исключения проверки.
		|• если ошибка возникает во всех режимах запуска, то параметры необходимо указывать в файле общих настроек. 
		|Если она проявляется только в конкретном режиме, то в дополнительном файле настроек.';
		|en = '
		|• указать параметры открытия форм (для форм с параметрами; если в коде открытия формы несколько веток, то для максимального покрытия кода задать несколько комбинаций параметров).
		|• добавить текст ожидаемого исключение (если форма не открывается с ожидаемой ошибкой).
		|• крайне не рекомендуется добавлять форму в исключения проверки.
		|• если ошибка возникает во всех режимах запуска, то параметры необходимо указывать в файле общих настроек.
		|Если она проявляется только в конкретном режиме, то в дополнительном файле настроек.'");
	КонецЕсли;
	
	ОписаниеОшибки = СтрШаблон(
		НСтр("ru = 'Для воспроизведения:
		|• развернуть базу, приложенную к ошибке:
		|	• если к ошибке приложен файл информационной базы в момент ошибки в формате 1CD, то необходимо скопировать его в папку базы и переименовать в 1Cv8.1CD.
		|	• иначе, если файл в формате 1CD отсутствует, загрузить базу из файла в формате dt (база на начало запуска теста).
		|• сохранить файлы обработки и настроек расположенных в присоединенных файлах
		|если обработки нет в присоединенных файлах, то открыть ее из папки %1
		|и следовать инструкциям в колонке Комментарий.
		|
		|Если это ложное срабатывание (не ошибка), то необходимо:
		|%2
		|
		|Файлы настроек тестирования см. в папке ""%3"":
		|• ""Дымовой тест всех форм и объектов.yaml"" (общие настройки для всех режимов запуска теста)
		|• ""Дымовой тест всех форм и объектов_%4_%5.yaml"" (доп. настройки для переопределения общих настроек в этом режиме запуска теста)
		|
		|Инструкции с примерами см. в начале файла общих настроек.';
		|
		|en = 'Для воспроизведения:
		|• развернуть базу, приложенную к ошибке.
		|• сохранить файлы обработки и настроек расположенных в присоединенных файлах
		|если обработки нет в присоединенных файлах, то открыть ее из папки %1
		|и следовать инструкциям в колонке Комментарий.
		|
		|Если это ложное срабатывание (не ошибка), то необходимо:
		|%2
		|
		|Файлы настроек тестирования см. в папке ""%3"":
		|• ""Дымовой тест всех форм и объектов.yaml"" (общие настройки для всех режимов запуска теста)
		|• ""Дымовой тест всех форм и объектов_%4_%5.yaml"" (доп. настройки для переопределения общих настроек в этом режиме запуска теста)
		|
		|Инструкции с примерами см. в начале файла общих настроек.'",
		КодЯзыкаТекущейПроверки),
			ПутьКФайлуОбработки, ТекстПроПараметризацию, ПолныйПутьКФайлуНастроек, ТекущийПользователь, ВариантЗапуска);
	
	Если ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Параметры открытия форм:';
			|en='Параметры открытия форм:'") + Символы.ПС + Строка(ПараметрыФормы);
	КонецЕсли;
	
	Если ТипОшибки = ОшибкаНекорректныеНастройки() Тогда
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Файлы настроек тестирования см. в папке ""%1"":
			|• ""Дымовой тест всех форм и объектов.yaml"" (общие настройки для всех режимов запуска теста)
			|• ""Дымовой тест всех форм и объектов_%2_%3.yaml"" (доп. настройки для переопределения общих настроек в этом режиме запуска теста)
			|
			|Инструкции с примерами см. в начале файла общих настроек.';
			|en = 'Файлы настроек тестирования см. в папке ""%1"":
			|• ""Дымовой тест всех форм и объектов.yaml"" (общие настройки для всех режимов запуска теста)
			|• ""Дымовой тест всех форм и объектов_%2_%3.yaml"" (доп. настройки для переопределения общих настроек в этом режиме запуска теста)
			|
			|Инструкции с примерами см. в начале файла общих настроек.'", КодЯзыкаТекущейПроверки),
			ПолныйПутьКФайлуНастроек,
			ТекущийПользователь,
			ВариантЗапуска);
	КонецЕсли;
	
	ИдентификаторОшибки = Строка(Новый УникальныйИдентификатор());
	
	Ошибка = СоздатьОписаниеОшибки();
	Ошибка.ТипОшибки              = ТипОшибки;
	Ошибка.ИсходнаяИнформация     = ИмяФормы;
	Ошибка.ПорядокВоспроизведения = ОписаниеОшибки;
	Ошибка.УточнениеРасположения  = ИнформацияОбОшибке;
	Ошибка.Комментарий            = Комментарий;
	Ошибка.ОбъектМетаданных       = ИмяФормы;
	Ошибка.ДатаОбнаружения        = ТекущаяДата();
	Ошибка.КодСценария            = ИдентификаторОшибки;
	Ошибка.ОжидаемоеПоведение     = ОжидаемоеПоведение();
	
	Если ПрикладыватьФайлыКОшибке Тогда
		КаталогФайловОшибки = КаталогФайловОшибок + ИдентификаторОшибки;
		СоздатьКаталог(КаталогФайловОшибки); // АПК:566 - дымовой тест выполняется в синхронном режиме.
		
		РезультатПриложенияФайлов = ПрикладываемФайлыКОшибке(Ошибка.ИменаФайлов, КаталогФайловОшибки, ИдентификаторОшибки);
		Если Не РезультатПриложенияФайлов.Успешно Тогда
			Ошибка.УточнениеРасположения = Ошибка.УточнениеРасположения + РезультатПриложенияФайлов.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеНастроек) Тогда
		КаталогФайловОшибки = КаталогФайловОшибок + ИдентификаторОшибки;
		СоздатьКаталог(КаталогФайловОшибки); // АПК:566 - дымовой тест выполняется в синхронном режиме.
		
		ЗаписьТекста = Новый ЗаписьТекста(КаталогФайловОшибки + ПолучитьРазделительПути() + "ОписаниеНастроек.yaml", "utf-8");
		ЗаписьТекста.Записать(ОписаниеНастроек);
		ЗаписьТекста.Закрыть();
	КонецЕсли;
	
	ОбщиеИмяФайлов = Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "_" + ИдентификаторОшибки;
	ИмяФайлаОшибки = ДобавитьКонечныйРазделительПути(КаталогФайловОшибок) + ОбщиеИмяФайлов + ".xml";
	
	ФайлОшибки = Новый ЗаписьТекста(ИмяФайлаОшибки, КодировкаТекста.UTF8);
	ФайлОшибки.Записать(ТекстОшибкиXML(Ошибка));
	ФайлОшибки.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ОжидаемоеПоведение()
	
	Результат = "";
	
	ТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
	Если ТестируемаяФорма = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если в поведении не указана ОжидаемаяФорма - фиксируем ошибку.
	Если ТестируемаяФорма.Поведение.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлементПоведения Из ТестируемаяФорма.Поведение Цикл
		Если ЭлементПоведения.Представление <> "ОжидаемоеПоведение" Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = ЭлементПоведения.Значение;
		Прервать;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ЖурналРегистрации

&НаКлиенте
Процедура АнализЖурналаРегистрацииНаПерехваченныеОшибкиВОбработкеОтображенияОшибки()
	
	СтруктураОтбора = Новый Структура("ТекстОшибкиДляОтбора", "");
	
	ЗаполнитьДопустимыеОшибкиВЖурналеРегистрации();
	
	ДатаНачала = ПолучитьДатуНачалаДляАнализаЖурналаРегистрации();
	СтруктураОтбора.Вставить("ДатаНачала", ДатаНачала);
	СтруктураОтбора.Вставить("Событие", НСтр("ru = 'Ошибка возникшая в ходе дымового тестирования';
		|en = 'Ошибка возникшая в ходе дымового тестирования'")); // Имя события из расширения перехвата ошибок ОшибкаДымовогоТеста.
	
	МассивОшибок = ОпределитьНедопустимыеОшибкиВЖурналеРегистрации(СтруктураОтбора, Словарь);
	Для Каждого Ошибки Из МассивОшибок Цикл
		
		Комментарий = НСтр("ru = 'В ходе дымового тестирование возникло исключение, информация о котором было записано в журнал регистрации (см. колонку Уточнение).
			|Для дополнительной информации смотрите журнал открытия форм';
			|en = 'В ходе дымового тестирование возникло исключение, информация о котором было записано в журнал регистрации (см. колонку Уточнение).
			|Для дополнительной информации смотрите журнал открытия форм'") + Символы.ПС;
		
		ТекстОшибки = "";
		Для Каждого Ошибка Из Ошибки Цикл
			ТекстОшибки = ТекстОшибки + Ошибка.Уточнение   + Символы.ПС;
			Комментарий = Комментарий + Ошибка.Комментарий + Символы.ПС;
		КонецЦикла;
		
		ЗаголовокОшибки = НСтр("ru = '[ДТ] Ошибки из журнала регистрации при выполнении дымового теста';
			|en = '[ДТ] Ошибки из журнала регистрации при выполнении дымового теста'");
		
		СформироватьXMLФайлОшибки(ЗаголовокОшибки, "","", ТекстОшибки, Комментарий, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАнализЖурналаРегистрации()
	
	СтруктураОтбора = Новый Структура("ТекстОшибкиДляОтбора", "");
	
	ЗаполнитьДопустимыеОшибкиВЖурналеРегистрации();
	
	ДатаНачала = ПолучитьДатуНачалаДляАнализаЖурналаРегистрации();
	СтруктураОтбора.Вставить("ДатаНачала", ДатаНачала);
	
	МассивОшибок = ОпределитьНедопустимыеОшибкиВЖурналеРегистрации(СтруктураОтбора, Словарь);
	Для Каждого Ошибка Из МассивОшибок Цикл
		СформироватьXMLФайлОшибки(ЗаголовокОшибкиАнализЖурналаРегистрации(), "", "", Ошибка.Уточнение, Ошибка.Комментарий, Ложь);
	КонецЦикла;
	
	Если ВариантЗапуска = "АнализЖурналаРегистрации" Тогда
		ПроверкаНеобходимостиЗавершенияРаботыТеста();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДатуНачалаДляАнализаЖурналаРегистрации()
	
	ДатаНачалаПоУмолчанию = ТекущаяДата() - 4 * 60 * 60; // по умолчанию берем последние 4 часа
	Если Не ФайлСуществуетНаСервере(ФайлСостояния) Тогда
		Возврат ДатаНачалаПоУмолчанию;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ФайлСостояния, КодировкаТекста.UTF8);
	ДатаНачала = ЧтениеТекста.ПрочитатьСтроку();
	Если ДатаИзСтроки(ДатаНачала) = Дата('00010101') Тогда
		ДатаНачала = ДатаНачалаПоУмолчанию;
	КонецЕсли;
	
	Возврат ДатаНачала;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаЖурналаРегистрации(Отбор = Неопределено, ЧастьТекстаОшибкиДляОтбора = "")
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаЖР = Новый ТаблицаЗначений;
		Если Отбор = Неопределено Тогда
			ВыгрузитьЖурналРегистрации(ТаблицаЖР,,,, 300);
		Иначе
			ВыгрузитьЖурналРегистрации(ТаблицаЖР, Отбор);
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ПодготовитьЖурналДляВыводаВExcel(ТаблицаЖР);
	
	Если Не ЗначениеЗаполнено(ЧастьТекстаОшибкиДляОтбора) Тогда
		Возврат ТаблицаЖР;
	КонецЕсли;
	
	Если ТипЗнч(ЧастьТекстаОшибкиДляОтбора) = Тип("Строка") Тогда
		МассивТекстовОшибок = Новый Массив;
		МассивТекстовОшибок.Добавить(ЧастьТекстаОшибкиДляОтбора);
	ИначеЕсли ТипЗнч(ЧастьТекстаОшибкиДляОтбора) = Тип("Массив") Тогда
		МассивТекстовОшибок = ЧастьТекстаОшибкиДляОтбора;
	Иначе
		Возврат ТаблицаЖР;
	КонецЕсли;
	
	ТаблицаЖР.Колонки.Добавить("СодержитЧастьТекстаОшибкиДляОтбора");
	Для Каждого СтрокаТЗ Из ТаблицаЖР Цикл
		СтрокаТЗ.СодержитЧастьТекстаОшибкиДляОтбора = СтрНайтиПоМассиву(СтрокаТЗ.Комментарий, МассивТекстовОшибок).Успешно;
	КонецЦикла;
	
	СтруктураОтбораПоЧастиТекстаОшибки = Новый Структура("СодержитЧастьТекстаОшибкиДляОтбора", Истина);
	
	ТаблицаЖРОтбор = ТаблицаЖР.Скопировать(СтруктураОтбораПоЧастиТекстаОшибки);
	ТаблицаЖРОтбор.Колонки.Удалить("СодержитЧастьТекстаОшибкиДляОтбора");
	
	Возврат ТаблицаЖРОтбор;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументЖурналаРегистрации(Отбор = Неопределено, ПоискПоТекстуОшибки = "")
	
	ТаблицаЖР = ТаблицаЖурналаРегистрации(Отбор, ПоискПоТекстуОшибки);
	
	Возврат ВывестиТаблицуВТабличныйДокумент(ТаблицаЖР);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВывестиТаблицуВТабличныйДокумент(Таблица)
	
	Если Таблица = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПостроительПечать = Новый ПостроительОтчета;
	ПостроительПечать.ИсточникДанных = Новый ОписаниеИсточникаДанных(Таблица);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПостроительПечать.Вывести(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ОпределитьНедопустимыеОшибкиВЖурналеРегистрации(СтруктураОтбора, Словарь)
	
	ДопустимыеОшибки = ПолучитьИзВременногоХранилища(ДопустимыеОшибкиВЖурналеРегистрации);
	
	НазваниеШага = НСтр("ru = 'Дымовой тест всех форм и объектов'; en = 'Дымовой тест всех форм и объектов'");
	
	// Регистрация ошибок в журнале регистрации кроме ошибок регламентных заданий.
	СтруктураОтбора.Вставить("Проверка", НазваниеШага);
	СтруктураОтбора.Вставить("ДопустимыеОшибки", ДопустимыеОшибки);
	
	НедопустимыеОшибки = НедопустимыеОшибкиВЖурналеРегистрации(СтруктураОтбора, Словарь);
	
	ШаблонТекстаОшибки = " " + НСтр("ru='в журнале регистрации %1.
		|Данные: %2
		|Событие: %3
		|Статус транзакции: %4
		|Комментарий: %5
		|Уровень: %6
		|Метаданные: %7
		|Представление данных: ';
		|en='в журнале регистрации %1.
		|Данные: %2
		|Событие: %3
		|Статус транзакции: %4
		|Комментарий: %5
		|Уровень: %6
		|Метаданные: %7
		|Представление данных:'") + " ";
	
	ШаблонКомментария = НСтр("ru='Дополнительная информация:
		|Дата: %1
		|Сеанс: %2';
		|en='Дополнительная информаци:
		|Дата: %1
		|Сеанс: %2'");
	
	МассивОшибок = Новый Массив;
	
	Для Каждого НедопустимаяОшибка Из НедопустимыеОшибки Цикл
		
		МассивСведенийОбОшибках = НедопустимаяОшибка.Ключ;
		
		МассивПовторяющихсяОшибок = Новый Массив;
		
		Для Каждого СведенияОбОшибке Из МассивСведенийОбОшибках Цикл
		
			ПредставлениеСобытия = СведенияОбОшибке[ПеревестиЗначение("ПредставлениеСобытия", Словарь)] + "(" 
				+ СведенияОбОшибке[ПеревестиЗначение("Событие", Словарь)] + ")";
			
			ПодробныйТекстОшибки = СтрШаблон(ШаблонТекстаОшибки,
				?(ПустаяСтрока(СведенияОбОшибке[ПеревестиЗначение("ИмяПользователя", Словарь)]),
					"",
					НСтр("ru='под пользователем'; en='под пользователем'") + " " + СведенияОбОшибке[ПеревестиЗначение("ИмяПользователя", Словарь)]),
				СведенияОбОшибке[ПеревестиЗначение("Данные", Словарь)],
				ПредставлениеСобытия,
				СведенияОбОшибке[ПеревестиЗначение("СтатусТранзакции", Словарь)],
				СведенияОбОшибке[ПеревестиЗначение("Комментарий", Словарь)],
				СведенияОбОшибке[ПеревестиЗначение("Уровень", Словарь)],
				СведенияОбОшибке[ПеревестиЗначение("Метаданные", Словарь)]);
			
			Уточнение = СтрШаблон("%1 %2 %3",
				СведенияОбОшибке.Критичность,
				ПодробныйТекстОшибки,
				СведенияОбОшибке[ПеревестиЗначение("ПредставлениеДанных", Словарь)]);
			
			Комментарий = СтрШаблон(ШаблонКомментария,
								СведенияОбОшибке[ПеревестиЗначение("Дата", Словарь)],
								СведенияОбОшибке[ПеревестиЗначение("Сеанс", Словарь)]);
			
			МассивПовторяющихсяОшибок.Добавить(Новый Структура("Уточнение, Комментарий", Уточнение, Комментарий));
			
		КонецЦикла;
		
		МассивОшибок.Добавить(МассивПовторяющихсяОшибок);
		
	КонецЦикла;
	
	Возврат МассивОшибок;
	
КонецФункции

&НаКлиенте
Функция УстановитьПутьКФайлуДопустимыхОшибокЖурналаРегистрации()
	
	Если ФайлСуществует(ПутьКФайлуДопустимыхОшибокЖурналаРегистрации) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПутьКПапкеОбработки = ПутьКПапкеОбработкиНаКлиенте();
	ВозможныеИменаФайлов = "Допустимые ошибки в журнале регистрации.txt;ДопустимыеОшибкиВЖурналеРегистрации.txt"; // АПК:1297 - не локализуется.
	МассивВозможныхИменФайлов = СтрРазделить(ВозможныеИменаФайлов, ";");
	
	Для Каждого ВозможноеИмяФайла Из МассивВозможныхИменФайлов Цикл
		ПутьКФайлуДопустимыхОшибокЖурналаРегистрации = ПутьКПапкеОбработки + ВозможноеИмяФайла;
		Если ФайлСуществует(ПутьКФайлуДопустимыхОшибокЖурналаРегистрации) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПутьКФайлуДопустимыхОшибокЖурналаРегистрации = "";
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьДопустимыеОшибкиВЖурналеРегистрации()
	
	Если ЗначениеЗаполнено(ДопустимыеОшибкиВЖурналеРегистрации) Тогда
		УдалитьИзВременногоХранилища(ДопустимыеОшибкиВЖурналеРегистрации);
	КонецЕсли;
	
	ДопустимыеОшибки = Новый Соответствие;
	
	Если УстановитьПутьКФайлуДопустимыхОшибокЖурналаРегистрации() Тогда
	
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПутьКФайлуДопустимыхОшибокЖурналаРегистрации);
		Текст = ТекстовыйДокумент.ПолучитьТекст();
		
		Проверки = РазделыНастроек(Текст, "[", "]");
		
		Для Каждого Проверка Из Проверки Цикл
			ОписаниеОтборовОшибок = РазделыНастроек(Проверка.Содержание, "{", "}");
			ОтборыОшибок = Новый Массив;
			ИмяПроверки = Проверка.Имя;
			ДопустимыеОшибки.Вставить(ИмяПроверки, ОтборыОшибок);
			Для Каждого ОписаниеОтбораОшибок Из ОписаниеОтборовОшибок Цикл
				ОтборОшибок = ПараметрыРаздела(ОписаниеОтбораОшибок.Содержание);
				Для Каждого СвойствоОтбора Из ОтборОшибок Цикл
					Если СвойствоОтбора.Ключ = "Приложения"
					 Или СвойствоОтбора.Ключ = "Событие"
					 Или СвойствоОтбора.Ключ = "Метаданные" Тогда
						Массив = СтрРазделить(СвойствоОтбора.Значение, ",", Ложь);
						Значения = Новый Массив;
						Для Каждого Значение Из Массив Цикл
							Значения.Добавить(СокрЛП(Значение));
						КонецЦикла;
						ОтборОшибок[СвойствоОтбора.Ключ] = Значения;
					Иначе
						ОтборОшибок[СвойствоОтбора.Ключ] = СокрЛП(СвойствоОтбора.Значение);
					КонецЕсли;
				КонецЦикла;
				ОтборыОшибок.Добавить(ОтборОшибок);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДопустимыеОшибкиВЖурналеРегистрации = ПоместитьВоВременноеХранилище(ДопустимыеОшибки, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция РазделыНастроек(Знач Текст, СимволНачалаЗаголовка, СимволКонцаЗаголовка)
	
	Разделы = Новый Массив;
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	ОписаниеРаздела = Неопределено;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		СокращеннаяСтрока = СокрЛ(Строка);
		Если СтрНачинаетсяС(СокращеннаяСтрока, СимволНачалаЗаголовка) Тогда
			Конец = СтрНайти(СокращеннаяСтрока, СимволКонцаЗаголовка);
			Если Конец > 2 Тогда
				ОписаниеРаздела = Новый Структура;
				ОписаниеРаздела.Вставить("Имя", Сред(СокращеннаяСтрока, 2, Конец - 2));
				ОписаниеРаздела.Вставить("Содержание", "");
				Разделы.Добавить(ОписаниеРаздела);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеРаздела = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеРаздела.Содержание <> "" Тогда
			ОписаниеРаздела.Содержание = ОписаниеРаздела.Содержание + Символы.ПС;
		КонецЕсли;
		ОписаниеРаздела.Содержание = ОписаниеРаздела.Содержание + Строка;
	КонецЦикла;
	
	Возврат Разделы;
	
КонецФункции

&НаСервере
Функция ПараметрыРаздела(Знач Текст)
	
	ПараметрыРаздела = Новый Структура;
	
	СтрокиПараметров = Новый Массив;
	ТекущаяСтрока = Неопределено;
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		СокращеннаяСтрока = СокрЛ(Строка);
		
		Если СтрНачинаетсяС(СокращеннаяСтрока, "|") Тогда
			Если ТекущаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяСтрока = ТекущаяСтрока + Символы.ПС + Сред(СокращеннаяСтрока, 2);
		Иначе
			Если ТекущаяСтрока <> Неопределено Тогда
				СтрокиПараметров.Добавить(ТекущаяСтрока);
			КонецЕсли;
			ТекущаяСтрока = Строка;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		СтрокиПараметров.Добавить(ТекущаяСтрока);
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиПараметров Цикл
		
		Позиция = СтрНайти(Строка, "=");
		Если Позиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = СокрЛП(Лев(Строка, Позиция - 1));
		ЗначениеПараметра = СокрЛП(Сред(Строка, Позиция + 1));
		
		Если Лев(ЗначениеПараметра, 1) = """" И Прав(ЗначениеПараметра, 1) = """" Тогда
			ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра)-2);
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, """""", """");
		КонецЕсли;
		
		Если СтрНачинаетсяС(ИмяПараметра, "-") Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПараметрыРаздела.Вставить(ИмяПараметра, ЗначениеПараметра);
		Исключение
			// Если ИмяПараметра имеет некорректный вид, тогда пропустить.
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ПараметрыРаздела;
	
КонецФункции

&НаСервере
Функция НедопустимыеОшибкиВЖурналеРегистрации(СтруктураОтбора, Словарь)
	
	Если Не СтруктураОтбора.Свойство("ОшибкиВРегламентныхЗаданиях") Тогда
		СтруктураОтбора.Вставить("ОшибкиВРегламентныхЗаданиях", Ложь);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗафиксироватьЖурналРегистрации();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", СтруктураОтбора.ДатаНачала);
	Отбор.Вставить("Уровень",    УровеньЖурналаРегистрации.Ошибка);
	Если СтруктураОтбора.Свойство("Событие") Тогда
		Отбор.Вставить("Событие",    СтруктураОтбора.Событие);
	КонецЕсли;
	
	ТаблицаЖР = ТаблицаЖурналаРегистрации(Отбор, СтруктураОтбора.ТекстОшибкиДляОтбора);
	
	Если ВариантЗапуска = "АнализЖурналаРегистрации" И Не ЭтоСеансВнешнегоПользователя(Словарь) Тогда
		
		// сохраним ЖР в файл
		Если ПроверитьКаталогФайловОшибокНаСервере() Тогда
			
			ТабличныйДокумент = ВывестиТаблицуВТабличныйДокумент(ТаблицаЖР);
			Если ТабличныйДокумент <> Неопределено Тогда
				ИмяФайла = НСтр("ru='ЖурналРегистрации'; en = 'EventLog'") + "_" + Формат(СтруктураОтбора.ДатаНачала, "ДФ=ггггММддЧЧммсс") + "-" + Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс") + ".xlsx";
				ТабличныйДокумент.Записать(КаталогФайловОшибок + ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаУникальныхОшибок = ТаблицаЖР.Скопировать();
	ТаблицаУникальныхОшибок.Свернуть(ПеревестиЗначение("Комментарий", Словарь));
	
	ДопустимыеОшибки = ПолучитьДопустимыеОшибки(СтруктураОтбора);
	
	НедопустимыеОшибки = Новый Соответствие;
	СеансыРегламентныхЗаданий = СеансыРегламентныхЗаданий(Словарь);
	
	Для Каждого СтрокаТаблицыУникальныхОшибок Из ТаблицаУникальныхОшибок Цикл
		
		МассивОшибок = Новый Массив;
		
		ТаблицаЖРПоКомментарию = ТаблицаЖР.Скопировать(Новый Структура(ПеревестиЗначение("Комментарий", Словарь), СтрокаТаблицыУникальныхОшибок[ПеревестиЗначение("Комментарий", Словарь)]));
		
		Для Каждого СтрокаТЗ Из ТаблицаЖРПоКомментарию Цикл
			ИмяМетаданныхРегламентногоЗадания = ИмяМетаданныхРегламентногоЗадания(СтрокаТЗ, СеансыРегламентныхЗаданий, Словарь);
			ЭтоСеансРегламентногоЗадания = ИмяМетаданныхРегламентногоЗадания <> Неопределено;
			
			Если ЭтоСеансРегламентногоЗадания <> СтруктураОтбора.ОшибкиВРегламентныхЗаданиях Тогда
				Продолжить;
			КонецЕсли;
			
			Ошибка = Новый Структура;
			Для Каждого Колонка Из ТаблицаЖР.Колонки Цикл
				Ошибка.Вставить(Колонка.Имя, СокрЛП(СтрокаТЗ[Колонка.Имя]));
			КонецЦикла;
			
			Если Ошибка[ПеревестиЗначение("Уровень", Словарь)] = "Ошибка" Тогда
				Ошибка.Вставить("Критичность", ?(ЭтоДопустимаяОшибка(Ошибка, ДопустимыеОшибки),
												НСтр("ru='Ошибка исключаемая'; en='Ошибка исключаемая'"),
												НСтр("ru='Ошибка'; en='Ошибка'")));
			Иначе
				Ошибка.Вставить("Критичность", НСтр("ru='Предупреждение'; en='Предупреждение'"));
			КонецЕсли;
			
			МассивОшибок.Добавить(Ошибка);
			
		КонецЦикла;
		
		НедопустимыеОшибки.Вставить(МассивОшибок, ?(СтруктураОтбора.ОшибкиВРегламентныхЗаданиях, ИмяМетаданныхРегламентногоЗадания, ""));
		
	КонецЦикла;
	
	Возврат НедопустимыеОшибки;
	
КонецФункции

&НаСервере
Функция ПолучитьДопустимыеОшибки(СтруктураОтбора)
	
	ДопустимыеОшибки = Новый Массив;
	Если СтруктураОтбора.ДопустимыеОшибки.Получить("Общие") <> Неопределено Тогда
		Для Каждого ДопустимаяОшибка Из СтруктураОтбора.ДопустимыеОшибки["Общие"] Цикл
			ДопустимыеОшибки.Добавить(ДопустимаяОшибка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОтбора.ДопустимыеОшибки.Получить(СтруктураОтбора.Проверка) <> Неопределено Тогда
		Для Каждого ДопустимаяОшибка Из СтруктураОтбора.ДопустимыеОшибки[СтруктураОтбора.Проверка] Цикл
			ДопустимыеОшибки.Добавить(ДопустимаяОшибка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДопустимыеОшибки;
	
КонецФункции

&НаСервере
Функция ЭтоДопустимаяОшибка(Ошибка, ОтборыОшибок)
	
	Если ТипЗнч(ОтборыОшибок) <> Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборПодходит = Ложь;
	
	Для Каждого ОтборОшибок Из ОтборыОшибок Цикл
		
		ОтборПодходит = (ОтборОшибок.Количество() > 0);
		Для Каждого КлючИЗначение Из ОтборОшибок Цикл
			
			Если Не Ошибка.Свойство(КлючИЗначение.Ключ) Тогда
				ОтборПодходит = Ложь;
				Прервать;
			КонецЕсли;
			
			ЗначениеВОшибке = Ошибка[КлючИЗначение.Ключ];
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				
				ЗначениеНайденоВОтборе = Ложь;
				Для Каждого ЗначениеВОтборе Из КлючИЗначение.Значение Цикл
					Если ЗначениеОтбораПодходит(КлючИЗначение.Ключ, ЗначениеВОтборе, ЗначениеВОшибке) Тогда
						ЗначениеНайденоВОтборе = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЗначениеНайденоВОтборе Тогда
					ОтборПодходит = Ложь;
					Прервать;
				КонецЕсли;
				
			Иначе
				
				Если Не ЗначениеОтбораПодходит(КлючИЗначение.Ключ, КлючИЗначение.Значение, ЗначениеВОшибке) Тогда
					ОтборПодходит = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтборПодходит Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтборПодходит;
	
КонецФункции

&НаСервере
Функция ЗначениеОтбораПодходит(ИмяСвойства, ЗначениеВОтборе, ЗначениеВОшибке)
	
	Если ВРег(ИмяСвойства) = ВРег("Комментарий") Тогда
		Возврат СтрНайти(ВРег(ЗначениеВОшибке), ВРег(ЗначениеВОтборе)) > 0;
	КонецЕсли;
	
	Возврат ВРег(ЗначениеВОтборе) = ВРег(ЗначениеВОшибке);
	
КонецФункции

&НаСервере
Функция СеансыРегламентныхЗаданий(Словарь)
	
	Сеансы = Новый Соответствие;
	
	События = Новый Массив;
	События.Добавить("_$Job$_.Start");
	События.Добавить("_$Job$_.Cancel");
	События.Добавить("_$Job$_.Fail");
	События.Добавить("_$Job$_.Terminate");
	События.Добавить("_$Job$_.Succeed");
	
	ИмяКолонкиМетаданные = ПеревестиЗначение("Метаданные", Словарь);
	ИмяКолонкиДата       = ПеревестиЗначение("Дата", Словарь);
	ИмяКолонкиСеанс      = ПеревестиЗначение("Сеанс", Словарь);
	ИмяКолонкиСобытие    = ПеревестиЗначение("Событие", Словарь);
	ИмяКолонкиДатаНачала = ПеревестиЗначение("ДатаНачала", Словарь);
	
	Отбор = Новый Структура;
	Отбор.Вставить(ИмяКолонкиДатаНачала, ТекущаяДата() - 8*60*60);
	Отбор.Вставить(ИмяКолонкиСобытие,    События);
	ТаблицаНачалаФоновыхЗаданий = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(ТаблицаНачалаФоновыхЗаданий, Отбор,
		ИмяКолонкиМетаданные + ","+ ИмяКолонкиДата + ","+ ИмяКолонкиСеанс + "," + ИмяКолонкиСобытие);
	
	Для Каждого Строка Из ТаблицаНачалаФоновыхЗаданий Цикл
		Если Не ЗначениеЗаполнено(Строка[ИмяКолонкиМетаданные]) Тогда
			Продолжить;
		КонецЕсли;
		СеансыСОднимНомером = Сеансы.Получить(Строка[ИмяКолонкиСеанс]);
		Если СеансыСОднимНомером = Неопределено Тогда
			СеансыСОднимНомером = Новый Массив;
			Сеансы.Вставить(Строка[ИмяКолонкиСеанс], СеансыСОднимНомером);
		КонецЕсли;
		
		Свойства = Новый Структура;
		Свойства.Вставить("ДатаНачала",    '00010101');
		Свойства.Вставить("ДатаОкончания", '00010101');
		Свойства.Вставить("Метаданные",    Строка[ИмяКолонкиМетаданные]);
		
		Если Строка[ИмяКолонкиСобытие] = "_$Job$_.Start" Тогда
			Свойства.ДатаНачала = Строка[ИмяКолонкиДата];
			СеансыСОднимНомером.Добавить(Свойства);
		Иначе
			Если СеансыСОднимНомером.Количество() = 0 Тогда
				СеансыСОднимНомером.Добавить(Свойства);
			Иначе
				Свойства = СеансыСОднимНомером[СеансыСОднимНомером.Количество()-1];
			КонецЕсли;
			Свойства.ДатаОкончания = Строка[ИмяКолонкиДата];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сеансы;
	
КонецФункции

&НаСервере
Функция ИмяМетаданныхРегламентногоЗадания(Событие, СеансыРегламентныхЗаданий, Словарь)
	
	ИмяКолонкиДата = ПеревестиЗначение("Дата", Словарь);
	
	СеансыСОднимНомером = СеансыРегламентныхЗаданий.Получить(Событие[ПеревестиЗначение("Сеанс", Словарь)]);
	Если СеансыСОднимНомером = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Свойства Из СеансыСОднимНомером Цикл
		Если Свойства.ДатаНачала <= Событие[ИмяКолонкиДата] И Событие[ИмяКолонкиДата] <= Свойства.ДатаОкончания Тогда
			Возврат Свойства.Метаданные;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьЖурналРегистрации()
	
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	ЗаписьЖурналаРегистрации(Идентификатор, УровеньЖурналаРегистрации.Информация);
	Отбор = Новый Структура("Событие", Идентификатор);
	
	ТекущаяДата = ТекущаяДата();
	ПредельноеЧислоСекундОжидания = 180;
	
	Пока Истина Цикл
		Таблица = Новый ТаблицаЗначений;
		ВыгрузитьЖурналРегистрации(Таблица, Отбор,,, 1);
		Если Таблица.Количество() > 0 Тогда
			Прервать;
		КонецЕсли;
		ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Пока ТекущееВремя + 50 > ТекущаяУниверсальнаяДатаВМиллисекундах() Цикл
		КонецЦикла;
		Если ТекущаяДата() > ТекущаяДата + ПредельноеЧислоСекундОжидания Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось зафиксировать журнал регистрации в течение %1 сек.';
				|en = 'Не удалось зафиксировать журнал регистрации в течение %1 сек.'"),
				ПредельноеЧислоСекундОжидания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьУточнениеРасположенияИнформациейИзЖурналаРегистрации(УточнениеРасположения, Словарь)
	
	ДатаОкончания = ТекущаяДата();
	
	// Формируем структуру отбора для получения ошибок ЖР.
	СтруктураОтбораОшибок = Новый Структура;
	СтруктураОтбораОшибок.Вставить("ДатаНачала", ДатаОкончания - 2);
	СтруктураОтбораОшибок.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураОтбораОшибок.Вставить("Уровень", УровеньЖурналаРегистрации.Ошибка);
	
	// Получаем ошибки журнала регистрации.
	ТаблицаОшибокЖР = ТаблицаЖурналаРегистрации(СтруктураОтбораОшибок);
	
	КоличествоСтрокТаблицыОшибок = ТаблицаОшибокЖР.Количество();
	Если КоличествоСтрокТаблицыОшибок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Читаем таблицу в обратном порядке. Дополняем уточнение первым непустым комментарием.
	Для Счетчик = 1 По КоличествоСтрокТаблицыОшибок Цикл
		
		СтрокаТаблицыЖР = ТаблицаОшибокЖР[КоличествоСтрокТаблицыОшибок - Счетчик];
		
		ИмяКолонкиКомментарий = ПеревестиЗначение("Комментарий", Словарь);
		Если ПустаяСтрока(СтрокаТаблицыЖР[ИмяКолонкиКомментарий]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрСравнить(УточнениеРасположения, СтрокаТаблицыЖР[ИмяКолонкиКомментарий]) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		УточнениеРасположения = УточнениеРасположения + Символы.ПС + Символы.ПС + СтрокаТаблицыЖР[ИмяКолонкиКомментарий];
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеСтекаИДополнитьБлокСОписаниемОшибки(БлокСОписаниемОшибки, ПодробноеПредставлениеОшибки)
	
	Если Не СтрокаСодержитСтекОшибки(БлокСОписаниемОшибки) Тогда
		ДополнитьУточнениеРасположенияИнформациейИзЖурналаРегистрации(БлокСОписаниемОшибки, Словарь);
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиИзЖурналаРегистрации = "";
	ДополнитьУточнениеРасположенияИнформациейИзЖурналаРегистрации(ТекстОшибкиИзЖурналаРегистрации, Словарь);
	Если ПустаяСтрока(ТекстОшибкиИзЖурналаРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	СтекИзОшибки             = СтекОшибкиИзСтроки(ПодробноеПредставлениеОшибки);
	СтекИзЖурналаРегистрации = СтекОшибкиИзСтроки(ТекстОшибкиИзЖурналаРегистрации);
	
	ПоследняяСтрокаСтекаИзОшибки = СтрПолучитьСтроку(СтекИзОшибки, СтрЧислоСтрок(СтекИзОшибки));
	ПоследняяСтрокаСтекаИзЖурналаРегистрации = СтрПолучитьСтроку(СтекИзЖурналаРегистрации, СтрЧислоСтрок(СтекИзЖурналаРегистрации));
	
	Если СтрСравнить(ПоследняяСтрокаСтекаИзОшибки, ПоследняяСтрокаСтекаИзЖурналаРегистрации) <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрСравнить(СтекИзОшибки, СтекИзЖурналаРегистрации) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Дополним уточнение расположения, если стек в ЖР отличается от стека ошибки.
	БлокСОписаниемОшибки = БлокСОписаниемОшибки + Символы.ПС
		+ НСтр("ru = 'Комментарий из журнала регистрации:'")
		+ ТекстОшибкиИзЖурналаРегистрации;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьЖурналДляВыводаВExcel(ТаблицаЖР)
	
	ПредельноеКоличествоСимволов = 16383;
	КолонкиТаблицыВГраница = ТаблицаЖР.Колонки.Количество() - 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЖР Цикл
		
		Для ИндексКолонки = 0 По КолонкиТаблицыВГраница Цикл
			
			ЯчейкаТаблицы = Строка(СтрокаТаблицы[ИндексКолонки]);
			Если СтрДлина(ЯчейкаТаблицы) > ПредельноеКоличествоСимволов Тогда
				СтрокаТаблицы[ИндексКолонки] = Лев(ЯчейкаТаблицы, ПредельноеКоличествоСимволов);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПроверитьКаталогФайловОшибок()
	
	Если ПустаяСтрока(КаталогФайловОшибок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтрЗаканчиваетсяНа(КаталогФайловОшибок, ПолучитьРазделительПути()) Тогда
		КаталогФайловОшибок = КаталогФайловОшибок + ПолучитьРазделительПути();
	КонецЕсли;
	
	Файл = Новый Файл(КаталогФайловОшибок);
	Если Не Файл.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
		СоздатьКаталог(КаталогФайловОшибок); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
		УдалитьФайлы(КаталогФайловОшибок); // АПК:566 - дымовой тест выполняется в синхронном режиме.
		СоздатьКаталог(КаталогФайловОшибок); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьКаталогФайловОшибокНаСервере()
	
	Если ПустаяСтрока(КаталогФайловОшибок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтрЗаканчиваетсяНа(КаталогФайловОшибок, ПолучитьРазделительПути()) Тогда
		КаталогФайловОшибок = КаталогФайловОшибок + ПолучитьРазделительПути();
	КонецЕсли;
	
	Файл = Новый Файл(КаталогФайловОшибок);
	Если Не Файл.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
		СоздатьКаталог(КаталогФайловОшибок); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
		УдалитьФайлы(КаталогФайловОшибок); // АПК:566 - дымовой тест выполняется в синхронном режиме.
		СоздатьКаталог(КаталогФайловОшибок); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьОшибку(ТипПроверки, ИмяПроверяемойФормы, ТипОшибки, ИнформацияОбОшибке, ДополнительноеОписаниеОшибки = "",
	ТестируемаяФорма = Неопределено, ЗаписатьОшибкуВФайл = Истина)
	
	СтрокиОшибкиУточнение = Новый Массив;
	Если Не ПустаяСтрока(ТекстДляОшибки) Тогда
		СтрокиОшибкиУточнение.Добавить(ТекстДляОшибки);
	КонецЕсли;
	СтрокиОшибкиУточнение.Добавить(НСтр("ru='Воспроизведение ошибки:'; en='Воспроизведение ошибки:'", КодЯзыкаТекущейПроверки));
	
	ПредставлениеОшибки = Новый Массив;
	
	ПараметрыСтрокой = НСтр("ru='(без параметров)'; en='(без параметров)'", КодЯзыкаТекущейПроверки);
	ПроПараметры = НСтр("ru='без ввода параметров'; en='без ввода параметров'", КодЯзыкаТекущейПроверки);
	Если ТестируемаяФорма <> Неопределено Тогда
		
		ПараметрыСтрокой = ТестируемаяФорма.ПараметрыСтрокой;
		Если ЗначениеЗаполнено(ТестируемаяФорма.ПараметрыСтрокой) Тогда
			ПроПараметры = НСтр("ru='вставить текстовое описание параметров:'; en='вставить текстовое описание параметров:'", КодЯзыкаТекущейПроверки) + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПользователь = СтрШаблон(
		НСтр("ru='Запустить обработку дымового теста под пользователем %1.';
			|en='Запустить обработку дымового теста под пользователем %1.'", КодЯзыкаТекущейПроверки),
			ТекущийПользователь);
	
	ТекстПроПрава = НСтр("ru = 'Если пользователь неполноправный, то через конфигуратор добавить роли Администрирование и Интерактивное открытие внешних отчетов и обработок.';
		|en = 'Если пользователь неполноправный, то через конфигуратор добавить роли Администрирование и Интерактивное открытие внешних отчетов и обработок.'");
	
	Если ТипПроверки <> "РедактированиеМакета" Тогда
		СтрокиОшибкиУточнение.Добавить(ТекстПользователь);
		СтрокиОшибкиУточнение.Добавить(ТекстПроПрава);
	КонецЕсли;
	
	ДополнитьОшибкуТекстомПроФункциональныеОпции(СтрокиОшибкиУточнение);
	ДополнитьОшибкуТекстомПроМодельСервиса(СтрокиОшибкиУточнение);
	
	ШаблонВоспроизведениеОшибки = "";
	Если ТипПроверки = "ОткрытиеФормы" Тогда
		
		ШаблонВоспроизведениеОшибки = НСтр("ru='• В списке форм найти форму %1
		|• выбрать ее, установив курсор и нажать кнопку ""Запустить"";
		|• в открывшейся форме ""Параметры открытия формы"" %2 %3
		|• нажать ОК.'; en='• В списке форм найти форму %1
		|• выбрать ее, установив курсор и нажать кнопку ""Запустить"";
		|• в открывшейся форме ""Параметры открытия формы"" %2 %3
		|• нажать ОК.'", КодЯзыкаТекущейПроверки);
		СтрокиОшибкиУточнение.Добавить(СтрШаблон(ШаблонВоспроизведениеОшибки, ИмяПроверяемойФормы, ПроПараметры, ПараметрыСтрокой));
		
		КраткоеОписаниеОшибки = СтрШаблон("%1 %2", ТипОшибки, ИмяПроверяемойФормы);
		
	ИначеЕсли ТипПроверки = "ПечатнаяФорма" Тогда
		
		ШаблонВоспроизведениеОшибки = НСтр("ru='• В списке форм найти печатную форму %1
		|• выбрать ее, установив курсор и нажать кнопку ""Запустить"".'; en='• В списке форм найти печатную форму %1
		|• выбрать ее, установив курсор и нажать кнопку ""Запустить"".'", КодЯзыкаТекущейПроверки);
		СтрокиОшибкиУточнение.Добавить(СтрШаблон(ШаблонВоспроизведениеОшибки, ИмяПроверяемойФормы));
		
		КраткоеОписаниеОшибки = СтрШаблон("%1 %2", ТипОшибки, ИмяПроверяемойФормы);
		
	ИначеЕсли ТипПроверки = "ОшибкаИзмененияФО" Тогда
		
		ШаблонВоспроизведениеОшибки = НСтр("ru='• В меню Еще выбрать пункт меню - Включить все функциональные опции';
		|en='• В меню Еще выбрать пункт меню - Включить все функциональные опции.'", КодЯзыкаТекущейПроверки);
		СтрокиОшибкиУточнение.Добавить(СтрШаблон(ШаблонВоспроизведениеОшибки, ИмяПроверяемойФормы));
		
		КраткоеОписаниеОшибки = СтрШаблон("%1 %2", ТипОшибки, ИмяПроверяемойФормы);
		
	ИначеЕсли ТипПроверки = "ВводНаОсновании" Тогда
		
		ШаблонВоспроизведениеОшибки = НСтр("ru='• В списке форм найти форму %1
		|• выбрать ее, установив курсор и нажать кнопку ""Запустить"",
		|  в открывшейся форме ввести на основании объект ""%2"".'; en='• В списке форм найти форму %1
		|• выбрать ее, установив курсор и нажать кнопку ""Запустить"",
		|  в открывшейся форме ввести на основании объект ""%2"".'", КодЯзыкаТекущейПроверки);
		
		Если ТестируемаяФорма = Неопределено Тогда
			ТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		КонецЕсли;
		
		МассивИмени = СтрРазделить(ИмяПроверяемойФормы, ".");
		МассивИмени.Удалить(МассивИмени.ВГраница());
		
		ИмяОбъекта = СтрСоединить(МассивИмени, ".");
		
		СтрокиОшибкиУточнение.Добавить(СтрШаблон(ШаблонВоспроизведениеОшибки, ТестируемаяФорма.ПолноеИмя, ИмяОбъекта));
		
		КраткоеОписаниеОшибки = СтрШаблон("%1 %2", ТипОшибки, ИмяПроверяемойФормы);
	
	ИначеЕсли ТипПроверки = "РедактированиеМакета" Тогда
		
		МассивИмениМакета = СтрРазделить(ИмяПроверяемойФормы, ".");
		ИмяМакета = ?(МассивИмениМакета.Количество() > 0, МассивИмениМакета[0], "");
		
		ШаблонВоспроизведениеОшибки = НСтр("ru='1) Запустить информационную базу:
		|• Открыть Макеты печатных форм (раздел Администрирование - Печатные формы, отчеты и обработки)
		|• В списке найти макет ""%1"" и выбрать его
		|• Нажать ""Изменить макет"" или кнопку F2
		|2) Если первый вариант не воспроизводит ошибку, то:
		|%2
		|%3';
		|en='1) Запустить информационную базу:
		|• Открыть Макеты печатных форм (раздел Администрирование - Печатные формы, отчеты и обработки)
		|• В списке найти макет ""%1"" и выбрать его
		|• Нажать ""Изменить макет"" или кнопку F2
		|2) Если первый вариант не воспроизводит ошибку, то:
		|%2
		|%3'", КодЯзыкаТекущейПроверки);
		СтрокиОшибкиУточнение.Добавить(СтрШаблон(ШаблонВоспроизведениеОшибки, ИмяМакета, ТекстПользователь,
			ТекстПроПрава));
		
		ТекстВоспроизведениеОшибки = ТекстВоспроизведениеОшибкиДляОсобенныхДействий(ИмяПроверяемойФормы);
		СтрокиОшибкиУточнение.Добавить(ТекстВоспроизведениеОшибки);
		
		ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		КраткоеОписаниеОшибки = СтрШаблон("%1 ""%2""", ТипОшибки, ИмяМакета);
		
		ПредставлениеОшибки.Добавить(СтрШаблон(НСтр(
			"ru = 'Идентификатор печатной формы: %1';
			|en = 'Идентификатор печатной формы: %1'"), ИмяМакета));
		
	ИначеЕсли ТипПроверки = "КопированиеЭлемента" Тогда
		ТекстВоспроизведениеОшибки = ТекстВоспроизведениеОшибкиДляОсобенныхДействий(ИмяПроверяемойФормы, Истина);
		СтрокиОшибкиУточнение.Добавить(ТекстВоспроизведениеОшибки);
		
		ИмяПроверяемойФормы = ИмяОбъектаМетаданныхПоИмениПроверяемойФормы(ИмяПроверяемойФормы);
		
		ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		КраткоеОписаниеОшибки = СтрШаблон("%1 ""%2""", ТипОшибки, ИмяПроверяемойФормы);
		
		// Добавим интерактивную ссылку на копируемый элемент в текст ошибки.
		Для Каждого ПараметрТестируемойФормы Из ТестируемаяФорма.Параметры Цикл
			СтрокаДействия = НСтр("ru = 'Копируемый элемент:'; en = 'Копируемый элемент:'");
			СсылкаНаЭлемент = ПолучитьНавигационнуюСсылку(ПараметрТестируемойФормы.Значение);
			ПредставлениеОшибки.Добавить(СтрШаблон("%1 %2", СтрокаДействия, СсылкаНаЭлемент));
		КонецЦикла;
		
	ИначеЕсли ТипПроверки = "ПометкаНаУдалениеЭлемента" Тогда
		ТекстВоспроизведениеОшибки = ТекстВоспроизведениеОшибкиДляОсобенныхДействий(ИмяПроверяемойФормы, Истина);
		СтрокиОшибкиУточнение.Добавить(ТекстВоспроизведениеОшибки);
		
		ИмяПроверяемойФормы = ИмяОбъектаМетаданныхПоИмениПроверяемойФормы(ИмяПроверяемойФормы);
		
		ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		КраткоеОписаниеОшибки = СтрШаблон("%1 ""%2""", ТипОшибки, ИмяПроверяемойФормы);
		
		// Добавим интерактивную ссылку на помечаемый элемент в текст ошибки.
		Для Каждого ПараметрТестируемойФормы Из ТестируемаяФорма.Параметры Цикл
			СтрокаДействия = НСтр("ru = 'Помечаемый на удаление элемент:'; en = 'Помечаемый на удаление элемент:'");
			СсылкаНаЭлемент = ПолучитьНавигационнуюСсылку(ПараметрТестируемойФормы.Значение);
			ПредставлениеОшибки.Добавить(СтрШаблон("%1 %2", СтрокаДействия, СсылкаНаЭлемент));
		КонецЦикла;
		
	ИначеЕсли ТипПроверки = "УдалениеПомеченногоЭлемента" Тогда
		ТекстВоспроизведениеОшибки = ТекстВоспроизведениеОшибкиДляОсобенныхДействий(ИмяПроверяемойФормы, Истина);
		СтрокиОшибкиУточнение.Добавить(ТекстВоспроизведениеОшибки);
		
		ИмяПроверяемойФормы = ИмяОбъектаМетаданныхПоИмениПроверяемойФормы(ИмяПроверяемойФормы);
		
		ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		КраткоеОписаниеОшибки = СтрШаблон("%1 ""%2""", ТипОшибки, ИмяПроверяемойФормы);
		
		// Добавим интерактивную ссылку на копируемый элемент в текст ошибки.
		Для Каждого ПараметрТестируемойФормы Из ТестируемаяФорма.Параметры Цикл
			СтрокаДействия = НСтр("ru = 'Удаляемый элемент:'; en = 'Удаляемый элемент:'");
			СсылкаНаЭлемент = ПолучитьНавигационнуюСсылку(ПараметрТестируемойФормы.Значение);
			ПредставлениеОшибки.Добавить(СтрШаблон("%1 %2", СтрокаДействия, СсылкаНаЭлемент));
		КонецЦикла;
		
	ИначеЕсли ТипПроверки = "ФормированиеОтчетаБезФормы" Тогда
		ТекстВоспроизведениеОшибки = ТекстВоспроизведениеОшибкиДляОсобенныхДействий(ИмяПроверяемойФормы);
		СтрокиОшибкиУточнение.Добавить(ТекстВоспроизведениеОшибки);
		
		ИмяПроверяемойФормы = ИмяОбъектаМетаданныхПоИмениПроверяемойФормы(ИмяПроверяемойФормы);
		
		ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		КраткоеОписаниеОшибки = СтрШаблон("%1 ""%2""", ТипОшибки, ОткрытаяТестируемаяФорма.ВариантОтчета);
	
	ИначеЕсли (ТипПроверки = "ЗависаниеТеста") Или (ТипПроверки = "ФайлНастроек") Тогда
		ШаблонВоспроизведениеОшибки = "";
	
	ИначеЕсли ТипПроверки = "ГруппировкаДинамическогоСписка" Тогда
		ШаблонВоспроизведениеОшибки = НСтр("ru='• В списке форм найти форму %1
		|• выбрать ее, установив курсор и нажать кнопку ""Запустить"";
		|• в открывшейся форме ""Параметры открытия формы"" %2 %3
		|• нажать ОК; зайти в меню настройки списка, на вкладку ""Группировка"";
		|• добавить поле группировки; обновить список.'; en='• В списке форм найти форму %1
		|• выбрать ее, установив курсор и нажать кнопку ""Запустить"";
		|• в открывшейся форме ""Параметры открытия формы"" %2 %3
		|• нажать ОК; зайти в меню настройки списка, на вкладку ""Группировка"";
		|• добавить поле группировки; обновить список.'", КодЯзыкаТекущейПроверки);
		СтрокиОшибкиУточнение.Добавить(СтрШаблон(ШаблонВоспроизведениеОшибки, ИмяПроверяемойФормы, ПроПараметры, ПараметрыСтрокой));
		
		КраткоеОписаниеОшибки = СтрШаблон("%1 %2", ТипОшибки, ИмяПроверяемойФормы);
	
	Иначе
		
		ШаблонВоспроизведениеОшибки = НСтр("ru='• В списке форм найти форму%1 отчета варианта %2
		|• выбрать его, установив курсор и нажать кнопку ""Запустить"".'; en='• В списке форм найти форму%1 отчета варианта %2
		|• выбрать его, установив курсор и нажать кнопку ""Запустить"".'", КодЯзыкаТекущейПроверки);
		ТипФормыОтчетаСтрокой = ?(ТипПроверки = "ФормаНастроекОтчета", " настроек", "");
		СтрокиОшибкиУточнение.Добавить(СтрШаблон(ШаблонВоспроизведениеОшибки, ТипФормыОтчетаСтрокой, ИмяПроверяемойФормы));
		
		ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		
		КраткоеОписаниеОшибки = СтрШаблон("%1 ""%2""", ТипОшибки, ОткрытаяТестируемаяФорма.ВариантОтчета);
		
	КонецЕсли;
	
	Если (ТипОшибки = ОшибкаЗаписиФормы()) Или (ТипОшибки = ОшибкаЗаписиСкопированнойФормы()) Тогда
		СтрокиОшибкиУточнение.Добавить(НСтр("ru='• Затем записать форму.'; en='• Затем записать форму.'", КодЯзыкаТекущейПроверки));
	КонецЕсли;
	
	СтрокиОшибкиУточнение.Добавить(Символы.ПС);
	ПодробноеПредставлениеОшибки = "";
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ПодробноеПредставлениеОшибки = Строка(ИнформацияОбОшибке);
		КонецЕсли;
		
		ПредставлениеОшибки.Добавить(НСтр("ru='Подробное представление ошибки:'; en='Подробное представление ошибки:'", КодЯзыкаТекущейПроверки) + " ");
		ПредставлениеОшибки.Добавить(ПодробноеПредставлениеОшибки);
		
	Иначе
		
		ПредставлениеОшибки.Добавить(ДополнительноеОписаниеОшибки);
	КонецЕсли;
	
	УточнениеРасположения = СтрШаблон(НСтр("ru='
	|Пользователь: %1
	|Имя режима: %2';
	|en='
	|Пользователь: %1
	|Имя режима: %2';'", КодЯзыкаТекущейПроверки), ТекущийПользователь, ВариантЗапуска);
	
	ПредставлениеОшибки.Добавить(УточнениеРасположения);
	ПредставлениеОшибки.Добавить(ТекстПроВерсиюКонфигурации);
	
	БлокСОписаниемОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС) + Символы.ПС;
	
	// Если уточнение расположения не содержит стек ошибки - дополним из ЖР.
	ПроверитьНаличиеСтекаИДополнитьБлокСОписаниемОшибки(БлокСОписаниемОшибки, ПодробноеПредставлениеОшибки);
	
	БлокСВоспроизведениемОшибки = СокрЛП(СтрСоединить(СтрокиОшибкиУточнение, Символы.ПС));
	
	Если КонтекстЗапуска <> Неопределено Тогда
		КонтекстЗапуска.ДобавитьОшибку(КраткоеОписаниеОшибки, ИмяПроверяемойФормы, БлокСОписаниемОшибки,, БлокСВоспроизведениемОшибки);
	КонецЕсли;
	
	СформироватьXMLФайлОшибки(ИмяПроверяемойФормы, ПараметрыФормы, ТипОшибки, БлокСОписаниемОшибки, БлокСВоспроизведениемОшибки);
	
	ДобавитьОшибкуВТаблицуПроверки(ИмяПроверяемойФормы, ТипОшибки, КраткоеОписаниеОшибки, БлокСОписаниемОшибки);
	Если ЗаписатьОшибкуВФайл Тогда
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяПроверяемойФормы, "failed", ТипОшибки, БлокСОписаниемОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекстВоспроизведениеОшибкиДляОсобенныхДействий(ПолноеИмяСтрокиДерева, ЭтоКопированиеИлиУдаление = Ложь)
	
	Шаблон = "";
	Если  ЭтоКопированиеИлиУдаление Тогда
		
		Шаблон = НСтр("ru='• На вкладке настройки включить флаг ""Проверять копирование и удаление"", если он выключен и нажать кнопку перечитать настройки.';
		|en='• На вкладке настройки включить флаг ""Проверять копирование и удаление"", если он выключен и нажать кнопку перечитать настройки.'",
		КодЯзыкаТекущейПроверки) + Символы.ПС;
		
	КонецЕсли;
	
	Шаблон = Шаблон + НСтр("ru='|• Найти строку дерева ""%1"" и развернуть группу,
		|• В группе ДействияНадЭлементами установить пометку на строке описанного действия в ошибке,
		|• Нажать ""Запустить""';
		|en='• Найти строку дерева ""%1""  и развернуть группу,
		|• В группе ДействияНадЭлементами установить пометку на строке описанного действия в ошибке,
		|• Нажать ""Запустить""'", КодЯзыкаТекущейПроверки);
	
	Результат = СтрШаблон(Шаблон, ПолноеИмяСтрокиДерева);
	
	Возврат Результат;
	
КонецФункции

/////////////////////

&НаСервере
Процедура ДобавитьОшибкуВТаблицуРезультатаТестирования(ИмяОбъектаТестирования, ПараметрыФормы, ДатаОшибки, Статус, ТипОшибки = "",
	ОписаниеОшибки = "", ДополнительнаяИнформация = "")
	
	НоваяСтрока = ТаблицаРезультатаТестирования.Добавить();
	НоваяСтрока.ПолноеИмя = ИмяОбъектаТестирования;
	НоваяСтрока.Параметры = ПараметрыФормы;
	НоваяСтрока.Начало = ДатаОшибки;
	НоваяСтрока.Окончание = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НоваяСтрока.Статус = Статус;
	НоваяСтрока.ТипОшибки = ТипОшибки;
	НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
	НоваяСтрока.ДополнительнаяИнформация = ДополнительнаяИнформация;
	
	НоваяСтрока = ТаблицаПроверки.Добавить();
	НоваяСтрока.ОбъектМетаданных		 = ИмяОбъектаТестирования;
	НоваяСтрока.ТипОшибки				 = ТипОшибки;
	НоваяСтрока.КраткоеОписаниеОшибки	 = ОписаниеОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОбъектаТестирования, Статус, ТипОшибки = "",
	ОписаниеОшибки = "", ДополнительнаяИнформация = "")
	
	Если ПустаяСтрока(ПолноеИмяФайлаОтчетаДляAllure) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРезультатаТестирования.Добавить();
	НоваяСтрока.ПолноеИмя = ИмяОбъектаТестирования;
	Если МассивВыбранныхФорм <> Неопределено Тогда
		НоваяСтрока.Параметры = МассивВыбранныхФорм[?(НомерТестируемойСтроки = 0, 0, НомерТестируемойСтроки - 1)].Параметры;
	КонецЕсли;
	НоваяСтрока.Начало = НачалоОткрытия;
	НоваяСтрока.Окончание = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НоваяСтрока.Статус = Статус;
	НоваяСтрока.ТипОшибки = ТипОшибки;
	НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
	НоваяСтрока.ДополнительнаяИнформация = ДополнительнаяИнформация;
	
	ЗаписатьРезультатТестированияФормыВФайлДляAllure();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлДляAllure()
	
	ТаблицаРезультатаТестирования.Очистить();
	
	ДобавитьВЛогВремениОткрытияФорм(НСтр("ru = 'Путь к каталогу Allure:'; en = 'Путь к каталогу Allure:'") + ПутьККаталогуAllure);

	Если ПустаяСтрока(ПутьККаталогуAllure) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрЗаканчиваетсяНа(ПутьККаталогуAllure, ПолучитьРазделительПути()) Тогда
		ПутьККаталогуAllure = ПутьККаталогуAllure + ПолучитьРазделительПути();
	КонецЕсли;
	
	КаталогДляAllure = Новый Файл(ПутьККаталогуAllure);
	Если Не КаталогДляAllure.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
		ДобавитьВЛогВремениОткрытияФорм(НСтр("ru = 'Создание каталога Allure:'; en = 'Создание каталога Allure:'") + ПутьККаталогуAllure);
		СоздатьКаталог(ПутьККаталогуAllure); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	ИначеЕсли Не КаталогДляAllure.ЭтоКаталог() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
		УдалитьФайлы(ПутьККаталогуAllure); // АПК:566 - дымовой тест выполняется в синхронном режиме.
		СоздатьКаталог(ПутьККаталогуAllure); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	КонецЕсли;
	
	УникальныйИдентификаторТеста = Новый УникальныйИдентификатор;
	ШаблонИмениФайла = "%1-result.json";
	ИмяФайла = СтрШаблон(ШаблонИмениФайла, УникальныйИдентификаторТеста);
	ПолноеИмяФайлаОтчетаДляAllure = ПутьККаталогуAllure + ИмяФайла;
	
	ЗаписатьРезультатТестированияФормыВФайлДляAllure();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатТестированияФормыВФайлДляAllure()
	
	Данные = СформироватьДанныеДляJSON();
	
	Попытка
		
		НоваяЗаписьJSON = Новый ЗаписьJSON;
		НоваяЗаписьJSON.ОткрытьФайл(ПолноеИмяФайлаОтчетаДляAllure);
		
		ЗаписатьJSON(НоваяЗаписьJSON, Данные, Новый НастройкиСериализацииJSON);
		НоваяЗаписьJSON.Закрыть();
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение = СтрШаблон(НСтр("ru='Не удалось сформировать файл ""%1"" по причине:
			|%2'; en='Не удалось сформировать файл ""%1"" по причине:
			|%2'", КодЯзыкаТекущейПроверки), ПолноеИмяФайлаОтчетаДляAllure, ОписаниеОшибки);
		
		ДобавитьВЛогВремениОткрытияФорм(Сообщение);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляJSON()
	
	Если ПустаяСтрока(РежимФО) Тогда
		РежимФО = "По умолчанию"; // АПК:1297 - не локализуется
	КонецЕсли;
	
	ОкончаниеТестирования = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Данные = Новый Структура;
	Данные.Вставить("uuid", Строка(УникальныйИдентификаторТеста));
	Данные.Вставить("historyId", СтрШаблон(НСтр("ru='Дымовое тестирование.%1.%2';
												|en='Дымовое тестирование.%1.%2'", КодЯзыкаТекущейПроверки),
		ТекущийПользователь,
		РежимФО));
	Данные.Вставить("name", РежимФО);
	Данные.Вставить("start", ВремяНачалаТестированияВМиллисекундах);
	Данные.Вставить("stop", ОкончаниеТестирования);
	
	УспешныхТестов = ТаблицаРезультатаТестирования.НайтиСтроки(Новый Структура("Статус", "passed")).Количество();
	ТипыОшибок = ПолучитьСтрокуСТипамиОшибок();
	
	ТестыСОшибкой = ТаблицаРезультатаТестирования.НайтиСтроки(Новый Структура("Статус", "failed"));
	Ошибок = ТестыСОшибкой.Количество();
	
	СтатистикаТестирования = СтрШаблон(НСтр("ru = 'Успешно: %1
					|Ошибок: %2
					|Дата тестирования: %3
					|Типы ошибок: %4';
					|en = 'Успешно: %1
					|Ошибок: %2
					|Дата тестирования: %3
					|Типы ошибок: %4'"), УспешныхТестов, Ошибок, ТекущаяДата(), ТипыОшибок);
	
	МассивТекстовСОшибкой = Новый Массив;
	Для Каждого СтрокаТестаСОшибкой Из ТестыСОшибкой Цикл
		
		ТекущиеПараметрыФормы = Новый Структура();
		Для Каждого ПараметрФормы Из СтрокаТестаСОшибкой.Параметры Цикл
			ТекущиеПараметрыФормы.Вставить(ПараметрФормы.Представление, ПараметрФормы.Значение);
		КонецЦикла;
		ПараметрыОткрытияФормыСтрокой = СписокПараметровСтрокой(ТекущиеПараметрыФормы);
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'ИмяФормы: %1
								|Параметры: %2
								|Описание ошибки: %3';
								|en = 'ИмяФормы: %1
								|Параметры: %2
								|Описание ошибки: %3'", КодЯзыкаТекущейПроверки),
			СтрокаТестаСОшибкой.ПолноеИмя,
			ПараметрыОткрытияФормыСтрокой,
			СтрокаТестаСОшибкой.ОписаниеОшибки);
		МассивТекстовСОшибкой.Добавить(ТекстОшибки);
	КонецЦикла;
	ТекстОшибок = СтрСоединить(МассивТекстовСОшибкой, Символы.ПС + Символы.ПС);
	
	ИнформацияОТесте = Новый Структура;
	ИнформацияОТесте.Вставить("message", СтатистикаТестирования);
	ИнформацияОТесте.Вставить("trace", ТекстОшибок);
	
	СтатусТеста = ?((МассивВыбранныхФорм = Неопределено) Или (НомерТестируемойСтроки <= МассивВыбранныхФорм.ВГраница()),
		"skipped", ?(Ошибок = 0, "passed", "failed"));
	
	Данные.Вставить("statusDetails", ИнформацияОТесте);
	Данные.Вставить("status", СтатусТеста);
	Данные.Вставить("stage", "finished");
	
	ШагиТестирования = Новый Массив;
	Для Каждого ТекущаяВыбраннаяФорма Из ТаблицаРезультатаТестирования Цикл
		ЗаполнитьСтруктуруОткрытияФормыДляОтчета(ШагиТестирования, ТекущаяВыбраннаяФорма, ТекущаяВыбраннаяФорма.Статус);
	КонецЦикла;
	
	Если МассивВыбранныхФорм <> Неопределено Тогда
		Для Счет = НомерТестируемойСтроки По МассивВыбранныхФорм.Количество() - 1 Цикл
			ТекущаяВыбраннаяФорма = МассивВыбранныхФорм[Счет];
			ЗаполнитьСтруктуруОткрытияФормыДляОтчета(ШагиТестирования, ТекущаяВыбраннаяФорма, "skipped");
		КонецЦикла;
	КонецЕсли;
	
	Данные.Вставить("steps", ШагиТестирования);
	
	НаименованиеТеста = Новый Массив;
	НаименованиеТеста.Добавить(Новый Структура("name, value", "story", ТекущийПользователь));
	НаименованиеТеста.Добавить(Новый Структура("name, value", "feature", НСтр("ru='Дымовое тестирование'; en='Дымовое тестирование'", КодЯзыкаТекущейПроверки)));
	
	Данные.Вставить("labels", НаименованиеТеста);
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуСТипамиОшибок()
	
	ТаблицаТиповОшибок = ТаблицаРезультатаТестирования.Выгрузить(, "ТипОшибки");
	ТаблицаТиповОшибок.Свернуть("ТипОшибки");
	МассивТиповОшибок = ТаблицаТиповОшибок.ВыгрузитьКолонку("ТипОшибки");
	ИндексПустойСтроки = МассивТиповОшибок.Найти("");
	Если ИндексПустойСтроки <> Неопределено Тогда
		МассивТиповОшибок.Удалить(ИндексПустойСтроки);
	КонецЕсли;
	Возврат СтрСоединить(МассивТиповОшибок, ", ");
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьСтруктуруОткрытияФормыДляОтчета(ШагиТестирования, ТекущаяВыбраннаяФорма, СтатусТеста)
	
	ПараметрыОткрытияФормы = Новый Массив;
	
	Для Каждого ЭлементСписка Из ТекущаяВыбраннаяФорма.Параметры Цикл
		СтруктураПараметровОткрытия = Новый Структура;
		СтруктураПараметровОткрытия.Вставить("name", ЭлементСписка.Представление);
		СтруктураПараметровОткрытия.Вставить("value", Строка(ЭлементСписка.Значение));
		ПараметрыОткрытияФормы.Добавить(СтруктураПараметровОткрытия);
	КонецЦикла;
	
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("name", ТекущаяВыбраннаяФорма.ПолноеИмя);
	СтруктураШага.Вставить("start", ?(СтатусТеста = "skipped", 0, ТекущаяВыбраннаяФорма.Начало));
	СтруктураШага.Вставить("stop", ?(СтатусТеста = "skipped", 0, ТекущаяВыбраннаяФорма.Окончание));
	СтруктураШага.Вставить("status", СтатусТеста);
	СтруктураШага.Вставить("parameters", ПараметрыОткрытияФормы);
	
	Если СтатусТеста = "failed" Тогда
		ИнформацияОТесте = Новый Структура;
		ИнформацияОТесте.Вставить("message", ТекущаяВыбраннаяФорма.ТипОшибки);
		ИнформацияОТесте.Вставить("trace", СтрШаблон("%1%2%2%3",
			ТекущаяВыбраннаяФорма.ОписаниеОшибки, Символы.ПС, ТекущаяВыбраннаяФорма.ДополнительнаяИнформация));
		
		СтруктураШага.Вставить("statusDetails", ИнформацияОТесте);
	КонецЕсли;
	
	ШагиТестирования.Добавить(СтруктураШага);
	
КонецФункции

&НаКлиенте
Процедура ДополнитьОшибкуТекстомПроФункциональныеОпции(ОписаниеОшибки)
	
	Если РежимФО = "Функциональные опции включены" Тогда // АПК:1297 - не локализуется
		ОписаниеОшибки.Добавить("• " + НСтр("ru='Включить все функциональные опции выбрав пункт меню в меню Еще'; en='Включить все функциональные опции выбрав пункт меню в меню Еще'", КодЯзыкаТекущейПроверки));
	ИначеЕсли РежимФО = "Функциональные опции выключены" Тогда // АПК:1297 - не локализуется
		ОписаниеОшибки.Добавить("• " + НСтр("ru='Выключить все функциональные опции выбрав пункт меню в Еще'; en='Выключить все функциональные опции выбрав пункт меню в Еще'", КодЯзыкаТекущейПроверки));
	ИначеЕсли РежимФО = "Функциональные опции выключены" Тогда // АПК:1297 - не локализуется
		ОписаниеОшибки.Добавить("• " + НСтр("ru='Выключить все функциональные опции выбрав пункт меню в Еще'; en='Выключить все функциональные опции выбрав пункт меню в Еще'", КодЯзыкаТекущейПроверки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьОшибкуТекстомПроМодельСервиса(ОписаниеОшибки)
	
	Если ЭмулироватьМодельСервиса Тогда
		ОписаниеОшибки.Добавить("• " + НСтр("ru='В настройках установить флаг Эмулировать модель сервиса'; en='В настройках установить флаг Эмулировать модель сервиса'", КодЯзыкаТекущейПроверки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСодержитСтекОшибки(СтрокаОшибки)
	
	Возврат (СтрНайти(СтрокаОшибки, ")}:") > 0);
	
КонецФункции

&НаСервере
Функция СтекОшибкиИзСтроки(ТекстСоСтеком)
	
	МассивРезультат = Новый Массив;
	
	МассивСтрок = СтрРазделить(ТекстСоСтеком, Символы.ПС);
	
	Для Каждого СтрокаТекста Из МассивСтрок Цикл
		Если Не СтрокаСодержитСтекОшибки(СтрокаТекста) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРезультат.Добавить(СтрокаТекста);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивРезультат, Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ОшибкаНекорректныеНастройки()
	
	Возврат НСтр("ru='Некорректные настройки дымового теста в yaml-файле.';
		|en='Некорректные настройки дымового теста в yaml-файле.'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаКопированияФормы()
	
	Возврат НСтр("ru='Ошибки при копировании формы'; en='Ошибки при копировании формы'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаЗаписиФормы()
	
	Возврат НСтр("ru='Ошибки при записи формы'; en='Ошибки при записи формы'", КодЯзыкаТекущейПроверки);

КонецФункции

&НаКлиенте
Функция ОшибкаОткрытияФормы()
	
	Возврат НСтр("ru='Ошибка открытия формы'; en='Ошибка открытия формы'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаЗакрытияФормы()
	
	Возврат НСтр("ru='Ошибка при закрытии формы'; en='Ошибка при закрытии формы'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаОткрытияФормыНаОсновании()
	
	Возврат НСтр("ru='Ошибка при открытии формы на основании'; en='Ошибка при открытии формы на основании'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаОткрытияВариантаОтчета()
	
	Возврат НСтр("ru='Ошибка открытия варианта отчета'; en='Ошибка открытия варианта отчета'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаФормированияВариантаОтчета()
	
	Возврат НСтр("ru='Ошибка формирования варианта отчета'; en='Ошибка формирования варианта отчета'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаПоискаФормыОтчета()
	
	Возврат НСтр("ru='Ошибка получения формы отчета'; en='Ошибка получения формы отчета'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаОткрытияФормыНастроекОтчета()
	
	Возврат НСтр("ru='Ошибка открытия формы настроек отчета'; en='Ошибка открытия формы настроек отчета'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаОткрытияПечатнойФормы()
	
	Возврат НСтр("ru='Ошибка открытия печатной формы'; en='Ошибка открытия печатной формы'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаВремениОткрытияФормы()
	
	Возврат НСтр("ru='Превышено максимальное время открытия формы'; en='Превышено максимальное время открытия формы'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаОткрытияФормыОтличнойОтТестируемой()
	
	Возврат НСтр("ru='Открыта форма отличная от тестируемой'; en='Открыта форма отличная от тестируемой'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаТестированияНегативногоСценария()
	
	Возврат НСтр("ru='Не выявлена ожидаемая ошибка'; en='Не выявлена ожидаемая ошибка'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаЗависаниеТеста()
	
	Возврат НСтр("ru='Тест завис'; en='Тест завис'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаВыполненияРегламентногоЗадания()
	
	Возврат НСтр("ru='Ошибка при выполнении регламентного задания'; en='Ошибка при выполнении регламентного задания'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаРегламентногоЗаданияНедостаточноПараметров()
	
	Возврат НСтр("ru='Недостаточно фактических параметров для метода фонового задания'; en='Недостаточно фактических параметров для метода фонового задания'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаКопированияЭлемента()
	
	Возврат НСтр("ru='Ошибка копирования элемента'; en='Ошибка копирования элемента'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаПометкиНаУдалениеЭлемента()
	
	Возврат НСтр("ru='Ошибка пометки на удаление элемента'; en='Ошибка пометки на удаление элемента'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаУдаленияПомеченногоЭлемента()
	
	Возврат НСтр("ru='Ошибка удаления помеченного элемента'; en='Ошибка удаления помеченного элемента'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаФормированияОтчетаБезФормы()
	
	Возврат НСтр("ru='Ошибка формирования отчета без формы'; en='Ошибка формирования отчета без формы'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ОшибкаРедактированияМакета()
	
	Возврат НСтр("ru='[Дым] Ошибка редактирования макета'; en='[Дым] Ошибка редактирования макета'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ЗаголовокОшибкиАнализЖурналаРегистрации()
	
	Возврат НСтр("ru='Ошибки в журнале регистрации после выполнения дымового теста';
		|en='Ошибки в журнале регистрации после выполнения дымового теста'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаСервере
Функция ИнформацияОТестировании()
	
	ТекстСообщения = СтрШаблон(НСтр("ru='Запуск тестирования [%1] БСП %2. Пользователь: %3. Форм для открытия: %4)'; en='Запуск тестирования [%1] БСП %2. Пользователь: %3. Форм для открытия: %4)'", КодЯзыкаТекущейПроверки),
		СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), ";", ","), ВерсияБСП(), ТекущийПользователь,"-");
	Возврат ТекстСообщения;

КонецФункции

&НаСервере
Функция ПолучитьТекстСообщенийПользователю()
	
	ТекстРезультат = "";
	
	СообщенияПользователю = ПолучитьСообщенияПользователю();
	
	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		ТекстРезультат = ТекстРезультат + Символы.ПС + СообщениеПользователю;
	КонецЦикла;
	
	Возврат ТекстРезультат;
	
КонецФункции

&НаКлиенте
Функция ОшибкаСимволТабуляцииВФайлеНастроек()
	
	Возврат НСтр("ru='В файле настроек обнаружен символ табуляции'; en='В файле настроек обнаружен символ табуляции'", КодЯзыкаТекущейПроверки);
	
КонецФункции

&НаКлиенте
Функция ПрикладываемФайлыКОшибке(ИменаФайлов, Знач КаталогФайловОшибки, ИдентификаторОшибки)
	
	ОшибкиДобавленияФайлов = Новый Массив;
	
	КаталогФайловОшибки = ДобавитьКонечныйРазделительПути(КаталогФайловОшибки);
	
	// Создаем скриншот.
	Попытка
		
		ИмяФайлаСкриншота = СоздатьСкриншот(КаталогФайловОшибки + ИдентификаторОшибки + ".png");
		ИменаФайлов.Добавить(ИмяФайлаСкриншота);
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьВПротоколТестирования(Ошибка);
		
		ТекстОшибкиСозданияСкриншота = СтрШаблон(НСтр("ru='%1При создании скриншота возникла ошибка:%2%3';
			|en = '%1При создании скриншота возникла ошибка:%2%3'"), Символы.ПС, Символы.ПС, Ошибка);
		ОшибкиДобавленияФайлов.Добавить(ТекстОшибкиСозданияСкриншота);
	КонецПопытки;
	
	// Копируем базу при любом варианте запуска, кроме интерактивного.
	Попытка
		
		Если СтрСравнить(ВариантЗапуска, "Интерактивный") <> 0 Тогда
			ПутьКИнформационнойБазе = ПутьКИнформационнойБазе() + ПолучитьРазделительПути() + "1Cv8.1CD";
			ФайлБазы = Новый Файл(ПутьКИнформационнойБазе);
			Если ФайлБазы.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
				ПутьККопииБазы = КаталогФайловОшибки + НСтр("ru = 'В_момент_ошибки_'; en = 'В_момент_ошибки_'") 
					+ ИдентификаторОшибки + "_1Cv8.1CD";
				КопироватьФайл(ПутьКИнформационнойБазе, ПутьККопииБазы); // АПК:566 - дымовой тест выполняется в синхронном режиме.
				ИменаФайлов.Добавить(ПутьККопииБазы);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьВПротоколТестирования(Ошибка);
		
		ТекстОшибкиКопированияБазы = СтрШаблон(НСтр("ru='%1При копировании базы возникла ошибка:%2%3';
			|en = '%1При копировании базы возникла ошибка:%2%3'"), Символы.ПС, Символы.ПС, Ошибка);
		ОшибкиДобавленияФайлов.Добавить(ТекстОшибкиКопированияБазы);
	КонецПопытки;
	
	// Журнал открытия форм.
	Попытка
		
		ИмяФайла = НСтр("ru='Журнал открытия форм'; en = 'form open log'");
		КопияЖурнала = КаталогФайловОшибки + ИмяФайла + ".log";
		КопироватьФайл(ПолноеИмяФайлаЛогированияВремени, КопияЖурнала); // АПК:566 - дымовой тест выполняется в синхронном режиме.
		ИменаФайлов.Добавить(КопияЖурнала);
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьВПротоколТестирования(Ошибка);
		
		ТекстОшибкиДобавленияЖурналаОткрытияФорм = СтрШаблон(НСтр("ru='%1При добавлении журнала открытия форм возникла ошибка:%2%3';
			|en = '%1При добавлении журнала открытия форм возникла ошибка:%2%3'"), Символы.ПС, Символы.ПС, Ошибка);
		ОшибкиДобавленияФайлов.Добавить(ТекстОшибкиДобавленияЖурналаОткрытияФорм);
	КонецПопытки;
	
	// Извлекаем журнал регистрации.
	Попытка
		
		ТабличныйДокумент = ПолучитьТабличныйДокументЖурналаРегистрации();
		
		Если ТабличныйДокумент <> Неопределено Тогда
			ИмяФайла = КаталогФайловОшибки + НСтр("ru='Журнал регистрации'; en = 'Event log'") + ".xlsx";
			ТабличныйДокумент.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
			ИменаФайлов.Добавить(ИмяФайла);
		КонецЕсли;
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьВПротоколТестирования(Ошибка);
		
		ТекстОшибкиДобавленияЖурналаРегистрации = СтрШаблон(НСтр("ru='%1При добавлении журнала регистрации возникла ошибка:%2%3';
			|en = '%1При добавлении журнала регистрации возникла ошибка:%2%3'"), Символы.ПС, Символы.ПС, Ошибка);
		ОшибкиДобавленияФайлов.Добавить(ТекстОшибкиДобавленияЖурналаРегистрации);
	КонецПопытки;
	
	// Копируем обработку теста.
	Попытка
		
		ПолныйПутьФайлуЭтойОбработки = ПолноеИмяФайлаЭтойОбработки();
		
		ФайлОбработки = Новый Файл(ПолныйПутьФайлуЭтойОбработки);
		Если ФайлОбработки.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
			ПолныйПутьВКаталогеОшибки = КаталогФайловОшибки + ФайлОбработки.Имя;
			КопироватьФайл(ПолныйПутьФайлуЭтойОбработки, ПолныйПутьВКаталогеОшибки); // АПК:566 - дымовой тест выполняется в синхронном режиме.
			ИменаФайлов.Добавить(ПолныйПутьВКаталогеОшибки);
		КонецЕсли;
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьВПротоколТестирования(Ошибка);
		
		ТекстОшибкиКопированияОбработки = СтрШаблон(НСтр("ru='%1При добавлении копии обработки возникла ошибка:%2%3';
			|en = '%1При добавлении копии обработки возникла ошибка:%2%3'"), Символы.ПС, Символы.ПС, Ошибка);
		ОшибкиДобавленияФайлов.Добавить(ТекстОшибкиКопированияОбработки);
	КонецПопытки;
	
	// Копируем настройки теста.
	Попытка
		
		Для Каждого ПутьКФайлуНастроек Из СписокФайловНастроек Цикл
			ФайлНастроек = Новый Файл(ПутьКФайлуНастроек.Значение);
			Если ФайлНастроек.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
				ПолныйПутьВКаталогеОшибки = КаталогФайловОшибки + ФайлНастроек.Имя;
				КопироватьФайл(ФайлНастроек.ПолноеИмя, ПолныйПутьВКаталогеОшибки); // АПК:566 - дымовой тест выполняется в синхронном режиме.
				ИменаФайлов.Добавить(ПолныйПутьВКаталогеОшибки);
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьВПротоколТестирования(Ошибка);
		
		ТекстОшибкиКопированияНастроекТеста = СтрШаблон(НСтр("ru='%1При копировании настроек теста возникла ошибка:%2%3';
			|en = '%1При копировании настроек теста возникла ошибка:%2%3'"), Символы.ПС, Символы.ПС, Ошибка);
		ОшибкиДобавленияФайлов.Добавить(ТекстОшибкиКопированияНастроекТеста);
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",    (ОшибкиДобавленияФайлов.Количество() = 0));
	Результат.Вставить("ТекстОшибки", "");
	
	Если Результат.Успешно Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru = 'Ошибки добавления файлов:%1%2';
			|en = 'Ошибки добавления файлов:%1%2'"),
		Символы.ПС,
		СтрСоединить(ОшибкиДобавленияФайлов, Символы.ПС));
	
	Результат.ТекстОшибки = ТекстОшибки + Символы.ПС;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОшибкаДобавленияГруппировкиДинамическогоСписка()
	
	Возврат НСтр("ru='Ошибка при открытии списка с группировками';
		|en='Ошибка при открытии списка с группировками'", КодЯзыкаТекущейПроверки);
	
КонецФункции

#КонецОбласти

#Область ПодготовкаМеханизмовТестирования

// Функциональные опции.

&НаКлиенте
Процедура УстановитьЗначениеФункциональныхОпций(Значение)
	
	ДобавитьВЛогВремениОткрытияФорм(
	НСтр("ru='Установка значений функциональных опций.'; en='Установка значений функциональных опций.'"));
	
	Результат = ИзменитьЗначениеФункциональныхОпций(Значение, Словарь);
	
	Если ПустаяСтрока(Результат.Протокол) Тогда
		Протокол = НСтр("ru='Процедура ИзменитьЗначениеФункциональныхОпций не вернула протокол'; en='Процедура ИзменитьЗначениеФункциональныхОпций не вернула протокол'")
	КонецЕсли;
	
	Если Результат.Ошибки.Количество() = 0 Тогда
		ДобавитьВЛогВремениОткрытияФорм(
			НСтр("ru='Ошибок при изменении функциональных опцией нет.'; en = 'Ошибок при изменении функциональных опцией нет.'"));
	Иначе
		Для Каждого ОшибкиИзмененияФО Из Результат.Ошибки Цикл
			ДобавитьВЛогВремениОткрытияФорм(ОшибкиИзмененияФО.ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьВЛогВремениОткрытияФорм(Результат.Протокол);
	ОпределитьФормыДляТестирования();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьЗначениеФункциональныхОпций(Значение, Словарь)
	
	Результат = ОписаниеПротокола();
	
	Результат.Протокол = НСтр("ru = 'Попытка изменить значения функциональных опций';
		|en = 'Попытка изменить значения функциональных опций'") + Символы.ПС;
	
	УстановитьБлокировкуСоединений(Истина);
	
	ОтменитьВсеФоновыеЗадания();
	
	Попытка
		Результат = ИзменитьФункциональныеОпцииИВернутьПротокол(Значение, Словарь);
	Исключение
		УстановитьБлокировкуСоединений(Ложь);
		Результат.Протокол = Результат.Протокол + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьБлокировкуСоединений(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьБлокировкуСоединений(Включить);
	
	Попытка
		// АПК:486-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
		УстановитьБезопасныйРежим(Истина);
		МодульСоединенияИБ = Вычислить("СоединенияИБ");
		// АПК:486-вкл
	Исключение
		МодульСоединенияИБ = Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(МодульСоединенияИБ) <> Тип("ОбщийМодуль") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Включить Тогда
		МодульСоединенияИБ.УстановитьБлокировкуСоединений();
	Иначе
		МодульСоединенияИБ.РазрешитьРаботуПользователей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВсеФоновыеЗадания()
	
	Отбор = Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно);
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Для Каждого АктивноеЗадание Из АктивныеЗадания Цикл
		АктивноеЗадание.Отменить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьФункциональныеОпцииИВернутьПротокол(Значение, Словарь)
	
	РезультатИзменений = ОписаниеПротокола();
	
	Если Значение Тогда
		Протокол = НСтр("ru='Включение всех функциональных опций.'; en='Включение всех функциональных опций.'", Метаданные.ОсновнойЯзык.КодЯзыка) + Символы.ПС;
	Иначе
		Протокол = НСтр("ru='Выключение всех функциональных опций.'; en='Выключение всех функциональных опций.'", Метаданные.ОсновнойЯзык.КодЯзыка) + Символы.ПС;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		
		ИмяОбъекта = СтрРазделить(ВРег(ФункциональнаяОпция.Хранение.ПолноеИмя()), ".", Ложь);
		СтрокаЛог = ИмяОбъекта;
		
		Если ЭтоКонстантаИсключение(ИмяОбъекта[1], Словарь) Тогда
			Продолжить; // пропускаем
		КонецЕсли;
		
		Если СтрНачинаетсяС(ИмяОбъекта[0], ВРег(ПеревестиЗначение("Константа", Словарь))) Тогда
			
			Попытка
				Константы[ФункциональнаяОпция.Хранение.Имя].Установить(Значение);
				Протокол = Протокол + ФункциональнаяОпция.Хранение.Имя + Символы.ПС;
			Исключение
				
				ШаблонОшибки = НСтр("ru='При изменении функциональной опции %1 не удалось записать константу %2 в значение %3
					|по причине: %4'; en='При изменении функциональной опции %1 не удалось записать константу %2 в значение %3
					|по причине: %4'", Метаданные.ОсновнойЯзык.КодЯзыка) + Символы.ПС;
				
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ФункциональнаяОпция.Хранение.ПолноеИмя(),
					ФункциональнаяОпция.Хранение.Имя, Значение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				СведенияОбОшибки = Новый Структура;
				СведенияОбОшибки.Вставить("ПолноеИмя", ФункциональнаяОпция.Хранение.ПолноеИмя());
				СведенияОбОшибки.Вставить("ТекстОшибки", ТекстОшибки);
				
				РезультатИзменений.Ошибки.Добавить(СведенияОбОшибки);
				
				Протокол = Протокол + ТекстОшибки;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Не отключаем новый РЛС для английского языка, т.к. шаблоны старого РЛС не переводятся.
	Если Метаданные.ОсновнойЯзык.КодЯзыка = "en" Тогда
		Значение = Истина;
	КонецЕсли;
	
	Если Значение Тогда
		Протокол = НСтр("ru='Включение ограничений доступа на уровне записей.'; en='Включение ограничений доступа на уровне записей.'", Метаданные.ОсновнойЯзык.КодЯзыка) + Символы.ПС;
	Иначе
		Протокол = НСтр("ru='Выключение ограничений доступа на уровне записей.'; en='Выключение ограничений доступа на уровне записей.'", Метаданные.ОсновнойЯзык.КодЯзыка) + Символы.ПС;
	КонецЕсли;
	
	УстановитьОграничениеДоступаНаУровнеЗаписейУниверсально(Значение, Словарь);
	
	УстановленныеПараметры = Новый Массив;
	УстановкаПараметровСеанса("", УстановленныеПараметры, Словарь);
	ОбновитьПовторноИспользуемыеЗначения();
	
	РезультатИзменений.Протокол = Протокол;
	
	Возврат РезультатИзменений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПротокола()
	
	РезультатИзменений = Новый Структура;
	РезультатИзменений.Вставить("Протокол", "");
	РезультатИзменений.Вставить("Ошибки", Новый Массив);
	
	Возврат РезультатИзменений;

КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьОграничениеДоступаНаУровнеЗаписейУниверсально(Значение, Словарь)
	
	УстановитьПривилегированныйРежим(Истина);
	Константы[ПеревестиЗначение("ОграничиватьДоступНаУровнеЗаписейУниверсально", Словарь)].Установить(Значение);
	
	Если Значение Тогда
		ЗаполнениеДанныхДляОграниченияДоступа(Словарь);
		ОбновлениеДоступаНаУровнеЗаписей(Словарь, Истина, Истина);
	Иначе
		ЗаполнениеДанныхДляОграниченияДоступа(Словарь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает колонки-реквизиты зависимые от функциональных опций.
//
// Параметры:
//  ПолноеИмяОбъекта - Строка - Полное наименование объекта.
// Возвращаемое значение:
//   -  Соответствие
//       * Ключ - Строка - Имя колонки.
//       * Значение - Булево - Признак доступности.
&НаСервереБезКонтекста
Функция МетаданныеНедоступныеПоФункциональнымОпциям(Словарь)
	
	НедоступныеМетаданные = Новый Соответствие;
	
	Для Каждого МетаданныеЗависимыеОтФункциональнойОпции Из ДоступностьОбъектовПоОпциям(Словарь) Цикл
		
		Если МетаданныеЗависимыеОтФункциональнойОпции.Значение = Ложь Тогда
			НедоступныеМетаданные.Вставить(МетаданныеЗависимыеОтФункциональнойОпции.Ключ, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НедоступныеМетаданные;
	
КонецФункции

// Доступность объектов метаданных по функциональным опциям.
&НаСервереБезКонтекста
Функция ДоступностьОбъектовПоОпциям(Словарь)
	
	ПараметрыОпций = Новый Структура(ОпцииИнтерфейса(Словарь));
	
	ДоступностьОбъектов = Новый Соответствие;
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Значение = -1;
		Для Каждого Элемент Из ФункциональнаяОпция.Состав Цикл
			
			Если Элемент.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Значение = -1 Тогда
				Значение = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, ПараметрыОпций);
			КонецЕсли;
			ПолноеИмя = Элемент.Объект.ПолноеИмя();
			Если Значение = Истина Тогда
				ДоступностьОбъектов.Вставить(ПолноеИмя, Истина);
			Иначе
				Если ДоступностьОбъектов[ПолноеИмя] = Неопределено Тогда
					ДоступностьОбъектов.Вставить(ПолноеИмя, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ДоступностьОбъектов);
	
КонецФункции

// МС

&НаСервереБезКонтекста
Процедура ВойтиВОбластьДанныхНаСервере(Знач ОбластьДанных, Словарь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьРазделениеСеанса(Словарь, Истина, ОбластьДанных);
	
	НачатьТранзакцию();
	
	Попытка
		
		КлючОбласти = СоздатьКлючЗаписиРегистраСведенийВспомогательныхДанных(
			РегистрыСведений[ПеревестиЗначение("ОбластиДанных", Словарь)],
			Новый Структура(РазделительВспомогательныхДанных(Словарь), ОбластьДанных), Словарь);
		ЗаблокироватьДанныеДляРедактирования(КлючОбласти);
		
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("РегистрСведений." + ПеревестиЗначение("ОбластиДанных", Словарь));
		Элемент.УстановитьЗначение(ПеревестиЗначение("ОбластьДанныхВспомогательныеДанные", Словарь), ОбластьДанных);
		Элемент.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений[ПеревестиЗначение("ОбластиДанных", Словарь)].СоздатьМенеджерЗаписи();
		МенеджерЗаписи[ПеревестиЗначение("ОбластьДанныхВспомогательныеДанные", Словарь)] = ОбластьДанных;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи[ПеревестиЗначение("ОбластьДанныхВспомогательныеДанные", Словарь)] = ОбластьДанных;
			МенеджерЗаписи[ПеревестиЗначение("Статус", Словарь)] = Перечисления[ПеревестиЗначение("СтатусыОбластейДанных", Словарь)][ПеревестиЗначение("Используется", Словарь)];
			МенеджерЗаписи.Записать();
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(КлючОбласти);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыйтиИзОбластиДанныхНаСервере(Словарь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Восстановление форм разделенного рабочего стола.
	СкрытьРабочийСтолПриНачалеРаботыСистемы(Словарь, Ложь);
	
	УстановитьПустуюФормуНаПустойРабочийСтол(Словарь);
	
	УстановитьРазделениеСеанса(Словарь, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЭмулироватьМодельСервиса(Статус, Словарь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОстановитьВсеРегламентныеЗадания();
	
	Если Статус Тогда
		
		Набор = РегистрыСведений[ПеревестиЗначение("ВерсииПодсистем", Словарь)].СоздатьНаборЗаписей();
		Набор.Прочитать();
		ВерсииПодсистем = Набор.Выгрузить();
		
		Константы[ПеревестиЗначение("ИспользоватьРазделениеПоОбластямДанных", Словарь)].Установить(Статус);
		ЗарегистрироватьНеразделенногоПользователяВРегистре(Словарь);
		Константы[ПеревестиЗначение("КонечнаяТочкаМенеджераСервиса", Словарь)].Установить(КонечнаяТочкаМенеджераСервиса(Словарь));
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить(СтрШаблон("%1.%2",
				ПеревестиЗначение("РегистрСведений", Словарь),
				ПеревестиЗначение("ВерсииПодсистемОбластейДанных", Словарь)));
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений[ПеревестиЗначение("ВерсииПодсистемОбластейДанных", Словарь)].СоздатьНаборЗаписей();
			Набор.Загрузить(ВерсииПодсистем);
			Набор.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
		ВойтиВОбластьДанныхНаСервере(0, Словарь);
		
		РазделениеВключено = Ложь;
		// Ждем включение разделения и входа в область.
		ВремяОжидания = ТекущаяДата() + 600;
		Пока ТекущаяДата() < ВремяОжидания Цикл
			Если РазделениеВключено(Словарь) И (Не ВыполняетсяОбновлениеИнформационнойБазы(Словарь)) Тогда
				РазделениеВключено = Истина;
				Прервать;
			КонецЕсли;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЦикла;
		
		Если Не РазделениеВключено Тогда
			ВызватьИсключение НСтр("ru='По истечении 10 минут в информационной базе не было включено разделение данных.'; en='По истечении 10 минут в информационной базе не было включено разделение данных.'", Метаданные.ОсновнойЯзык.КодЯзыка);
		КонецЕсли;
		
	Иначе
		
		ВыйтиИзОбластиДанныхНаСервере(Словарь);
		Константы[ПеревестиЗначение("ИспользоватьРазделениеПоОбластямДанных", Словарь)].Установить(Статус);
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
КонецПроцедуры

// При работе в модели сервиса, заносит текущего пользователя в список неразделенных,
// если у него не установлено использование разделителей.
//
&НаСервереБезКонтекста
Процедура ЗарегистрироватьНеразделенногоПользователяВРегистре(Словарь)
	
	ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МенеджерЗаписи = РегистрыСведений[ПеревестиЗначение("НеразделенныеПользователи", Словарь)].СоздатьМенеджерЗаписи();
	МенеджерЗаписи[ПеревестиЗначение("ИдентификаторПользователяИБ", Словарь)] = ИдентификаторПользователяИБ;
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ПеревестиЗначение("НеразделенныеПользователи", Словарь));
			Блокировка.Заблокировать();
			
			МенеджерЗаписи[ПеревестиЗначение("ИдентификаторПользователяИБ", Словарь)] = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
			МенеджерЗаписи[ПеревестиЗначение("ПорядковыйНомер", Словарь)] = МаксимальныйПорядковыйНомерНеразделенныхПользователей(Словарь) + 1;
			МенеджерЗаписи[ПеревестиЗначение("ИмяПользователя", Словарь)] = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	ИначеЕсли МенеджерЗаписи[ПеревестиЗначение("ИмяПользователя", Словарь)] <> ПользователиИнформационнойБазы.ТекущийПользователь().Имя Тогда
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ПеревестиЗначение("НеразделенныеПользователи", Словарь));
			ЭлементБлокировки.УстановитьЗначение(ПеревестиЗначение("ИдентификаторПользователяИБ", Словарь), ИдентификаторПользователяИБ);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи[ПеревестиЗначение("ИмяПользователя", Словарь)] = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
			МенеджерЗаписи.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонечнаяТочкаМенеджераСервиса(Словарь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменСообщениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена." + ПеревестиЗначение("ОбменСообщениями", Словарь) + " КАК ОбменСообщениями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Узел = РезультатЗапроса.Выбрать();
		Узел.Следующий();
		Возврат Узел.Ссылка;
	КонецЕсли;
	
	Узел = ПланыОбмена[ПеревестиЗначение("ОбменСообщениями", Словарь)].СоздатьУзел();
	Узел.Код = "ДымовойТестВсехФормИОбъектов";
	Узел.Наименование = НСтр("ru='Дымовой тест всех форм и объектов'; en='Дымовой тест всех форм и объектов'", Метаданные.ОсновнойЯзык.КодЯзыка);
	Узел.Записать();
	
	Возврат Узел.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОстановитьВсеРегламентныеЗадания()
	
	ВсеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для Каждого РегламентноеЗадание Из ВсеРегламентныеЗадания Цикл
		РегламентноеЗадание.Использование = Ложь;
		РегламентноеЗадание.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ЗакрытьОткрытыеОкна()
	
	СписокОткрытыхОкон = ПолучитьОкна();
	ФормыКЗакрытию = Новый Массив;
	
	Для Каждого ТекущиеОкно Из СписокОткрытыхОкон Цикл
		
		Если ТекущиеОкно.Содержимое.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФормаОкна = ТекущиеОкно.Содержимое[0];
		ФормыКЗакрытию.Добавить(ФормаОкна);
		
	КонецЦикла;
	
	Для Каждого ФормаКЗакрытию Из ФормыКЗакрытию Цикл
		Если ФормаКЗакрытию.Открыта() Тогда
			ФормаКЗакрытию.Закрыть();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьМассивОткрытыхФорм(МассивОткрытыхФорм)
	
	Если МассивОткрытыхФорм = Неопределено Тогда
		МассивОткрытыхФорм = Новый Массив;
	КонецЕсли;
	
	Окна = ПолучитьОкна();
	Для Счетчик = 0 По Окна.Количество() - 1 Цикл
		Если Окна[Счетчик] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивОткрытыхФорм.Добавить(Окна[Счетчик]);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивОткрытыхОкон()
	
	Если ОкнаОткрытыеПередОткрытиемТестируемойФормы = Неопределено Тогда
		ОкнаОткрытыеПередОткрытиемТестируемойФормы = Новый Массив;
	КонецЕсли;
	
	ОкнаОткрытыеПередОткрытиемТестируемойФормы.Очистить();
	
	СформироватьМассивОткрытыхФорм(ОкнаОткрытыеПередОткрытиемТестируемойФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСоответствиеТестируемойИОткрытойФормы()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОткрытаТестируемаяФорма", Истина);
	РезультатПроверки.Вставить("ОткрытаОжидаемаяФорма",   Ложь);
	РезультатПроверки.Вставить("МассивОткрытыхФорм",      Неопределено);
	
	Если ТипТестируемойФормы <> "ОткрытиеФормы" Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ОкнаОткрытыеПослеОткрытияТестируемойФормы = Новый Массив;
	СформироватьМассивОткрытыхФорм(ОкнаОткрытыеПослеОткрытияТестируемойФормы);
	
	ИменаФормОткрытыхПослеОткрытияТестируемойФормы = Новый Массив;
	
	Для Каждого ОкноОткрытоеПослеОткрытияТестируемойФормы Из ОкнаОткрытыеПослеОткрытияТестируемойФормы Цикл
		// Игнорируем начальную страницу.
		Если ОкноОткрытоеПослеОткрытияТестируемойФормы.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем, открыта ли тестируемая форма. Если да - это не ошибка.
		Для Каждого Содержимое Из ОкноОткрытоеПослеОткрытияТестируемойФормы.Содержимое Цикл
			Если Содержимое.ИмяФормы = ИмяОткрываемойФормы Тогда
				Возврат РезультатПроверки;
			КонецЕсли;
		КонецЦикла;
		
		Если ОкнаОткрытыеПередОткрытиемТестируемойФормы.Найти(ОкноОткрытоеПослеОткрытияТестируемойФормы) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ОкноОткрытоеПослеОткрытияТестируемойФормы.Содержимое.Количество() > 0)
				И (ОкноОткрытоеПослеОткрытияТестируемойФормы.Содержимое[0].Открыта()) Тогда
			ИменаФормОткрытыхПослеОткрытияТестируемойФормы.Добавить(ОкноОткрытоеПослеОткрытияТестируемойФормы.Содержимое[0].ИмяФормы);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаФормОткрытыхПослеОткрытияТестируемойФормы.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки.ОткрытаТестируемаяФорма = Ложь;
	РезультатПроверки.МассивОткрытыхФорм      = ИменаФормОткрытыхПослеОткрытияТестируемойФормы;
	
	// Проверяем поведение.
	ТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
	
	// Если в поведении не указана ОжидаемаяФорма - фиксируем ошибку.
	Если ТестируемаяФорма.Поведение.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Для Каждого ЭлементПоведения Из ТестируемаяФорма.Поведение Цикл
		Если ЭлементПоведения.Представление <> "ОжидаемаяФорма" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаФормОткрытыхПослеОткрытияТестируемойФормы.Найти(ЭлементПоведения.Значение) <> Неопределено Тогда
			РезультатПроверки.ОткрытаОжидаемаяФорма = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервереБезКонтекста
Функция НаименованиеКонфигурации()
	Возврат Метаданные.Представление();
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФормНаименование.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФормВыбор.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоФорм.ТипФормы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Недоступна";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,, Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФормНаименование.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФормВыбор.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФормКартинка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоФорм.Скрыть");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКоличествоФормДляТестирования()
	
	Количество = ПодсчитатьКоличествоВыбранныхФорм(ДеревоФорм.ПолучитьЭлементы());
	Элементы.ФормаВыполнитьТест.Заголовок = СтрЗаменить(НСтр("ru='Выполнить тест (%1)'; en='Выполнить тест (%1)'", КодЯзыкаТекущейПроверки), "%1", Формат(Количество, "ЧН=; ЧГ=0"));
	Элементы.ФормаВыполнитьТест.Доступность = Количество > 0;
	
КонецПроцедуры

&НаКлиенте
Функция ПодсчитатьКоличествоВыбранныхФорм(ЭлементыДерева)
	
	Количество = 0;
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		Если (ДочерниеЭлементы.Количество() > 0) И (ЭлементДерева.Выбор > 0) Тогда
			КоличествоДочерних = ПодсчитатьКоличествоВыбранныхФорм(ДочерниеЭлементы);
			Количество = Количество + КоличествоДочерних;
		КонецЕсли;
		
		Если ЭлементДерева.Выбор = 1 Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВерсияБСП()
	
	Возврат Метаданные.Версия;
	
КонецФункции

&НаСервере
Функция ПолноеИмяФайлаЭтойОбработки()
	
	// Сохранение используемого имени файла для загрузки настроек из файла "<Имя обработки>.yaml".
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Если Метаданные.НайтиПоТипу(ТипЗнч(ОбъектОбработка)) <> Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если СтрНайти(ОбъектОбработка.ИспользуемоеИмяФайла, "e1cib\tempstorage\") = 0 Тогда
		Возврат ОбъектОбработка.ИспользуемоеИмяФайла;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПолноправныйПользователь(Словарь, ПроверятьПраваАдминистрированияСистемы = Истина)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("Пользователи", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.IsFullUser(, ПроверятьПраваАдминистрированияСистемы);
	Иначе
		Возврат ОбщийМодульБСП.ЭтоПолноправныйПользователь(, ПроверятьПраваАдминистрированияСистемы);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСеансВнешнегоПользователя(Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("Пользователи", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.IsExternalUserSession();
	Иначе
		Возврат ОбщийМодульБСП.ЭтоСеансВнешнегоПользователя();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяОбъектаМетаданныхПоИмениПроверяемойФормы(ИмяПроверяемойФормы)
	
	МассивИмениОбъекта = СтрРазделить(ИмяПроверяемойФормы, ".");
	
	Возврат СтрШаблон("%1.%2", МассивИмениОбъекта[0], МассивИмениОбъекта[1]);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМассивПроверокБезОткрытияФормы()
	
	МассивПроверокБезОткрытияФормы = Новый Массив;
	
	МассивПроверокБезОткрытияФормы.Добавить("КопированиеЭлемента");
	МассивПроверокБезОткрытияФормы.Добавить("ПометкаНаУдалениеЭлемента");
	МассивПроверокБезОткрытияФормы.Добавить("УдалениеПомеченногоЭлемента");
	МассивПроверокБезОткрытияФормы.Добавить("РегламентноеЗадание");
	
КонецПроцедуры

&НаСервере
Функция ОбъектыМетаданныхСОсновнойФормойСписка()
	
	МассивРезультат = Новый Массив;
	
	МассивРезультат.Добавить("ПланыОбмена");
	МассивРезультат.Добавить("Справочники");
	МассивРезультат.Добавить("Документы");
	МассивРезультат.Добавить("ПланыВидовХарактеристик");
	МассивРезультат.Добавить("ПланыСчетов");
	МассивРезультат.Добавить("ПланыВидовРасчета");
	МассивРезультат.Добавить("РегистрыСведений");
	МассивРезультат.Добавить("БизнесПроцессы");
	МассивРезультат.Добавить("Задачи");
	
	Возврат МассивРезультат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтаФормаСоздаетНовыйОбъект(Знач ТипФормы)
	
	Возврат (ТипФормы = "ОсновнаяФормаУзла")
		Или (ТипФормы = "ОсновнаяФормаОбъекта")
		Или (ТипФормы = "ОсновнаяФормаГруппы")
		Или (ТипФормы = "ОсновнаяФормаЗаписи");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПраваДляТестированияМоделиСервисаКорректные(Словарь)

	Если РольДоступна(ПеревестиЗначение("АдминистраторСистемы", Словарь)) Тогда
		ШаблонТекста = НСтр("ru='У пользователя %1 не должно быть роли АдминистраторСистемы';
			|en='У пользователя %1 не должно быть роли АдминистраторСистемы'");
		ВызватьИсключение СтрШаблон(ШаблонТекста, АвторизованныйПользователь(Словарь));
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ВыполнитьПереходНаСтраницуОшибок()
	
	Если ТаблицаПроверки.Количество() > 0 Тогда
		Элементы.СтраницаОшибки.Заголовок = СтрШаблон(НСтр("ru='Ошибки (%1)'; en='Errors (%1)'", КодЯзыкаТекущейПроверки),
			ТаблицаПроверки.Количество());
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибки;
	Иначе
		Элементы.СтраницаОшибки.Заголовок = НСтр("ru='Ошибки (0)'; en='Errors (0)'", КодЯзыкаТекущейПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОшибкуВТаблицуПроверки(ИмяПроверяемойФормы, ТипОшибки, КраткоеОписаниеОшибки, ПодробноеОписаниеОшибки)
	
	НоваяСтрока = ТаблицаПроверки.Добавить();
	НоваяСтрока.ОбъектМетаданных         = ИмяПроверяемойФормы;
	НоваяСтрока.ТипОшибки                = ТипОшибки;
	НоваяСтрока.КраткоеОписаниеОшибки    = КраткоеОписаниеОшибки;
	НоваяСтрока.ПодробноеОписаниеОшибки  = ПодробноеОписаниеОшибки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРегистрацииОшибок_Формат_1_4

&НаКлиенте
Функция СоздатьОписаниеОшибки()

	Ошибка = Новый Структура;
	
	Ошибка.Вставить("ВерсияФормата", "1.4");
	Ошибка.Вставить("УИ", Строка(Новый УникальныйИдентификатор));
	Ошибка.Вставить("ТипОшибки", "");
	Ошибка.Вставить("ИсходнаяИнформация", "");
	Ошибка.Вставить("ПорядокВоспроизведения", "");
	Ошибка.Вставить("ОжидаемоеПоведение", "");
	Ошибка.Вставить("Ответственный", "");
	Ошибка.Вставить("Комментарий", "");
	Ошибка.Вставить("ДостоверностьОбнаружения", "Низкая"); // "Высокая" либо "Низкая".
	Ошибка.Вставить("АдресРепозитория", "");
	
	СисИнфо = Новый СистемнаяИнформация;
	Ошибка.Вставить("ВерсияПлатформы", СисИнфо.ВерсияПриложения);
	Ошибка.Вставить("КлиентОперативнаяПамять", СисИнфо.ОперативнаяПамять);
	Ошибка.Вставить("КлиентВерсияОС", СисИнфо.ВерсияОС);
	Ошибка.Вставить("КлиентПроцессор", СисИнфо.Процессор);
	Ошибка.Вставить("КлиентТипПлатформы", Строка(СисИнфо.ТипПлатформы));
	Ошибка.Вставить("КлиентИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
	Ошибка.Вставить("КлиентТекущаяДата", ТекущаяДата());
	
	Ошибка.Вставить("ДатаОбнаружения", ТекущаяДата());
	Ошибка.Вставить("ОбъектыМетаданных", Новый Массив); // Возможность добавить массив объектов метаданных.
	Ошибка.Вставить("ОбъектМетаданных", ""); // Регистрация по одному объекту метаданных.
	Ошибка.Вставить("УточнениеРасположения", "");
	Ошибка.Вставить("КодСценария", "");
	Ошибка.Вставить("ИмяСценария", "");
	Ошибка.Вставить("ИменаФайлов", Новый Массив);
	
	Ошибка.Вставить("ВерсияКонфигурации", "");
	Ошибка.Вставить("ИмяКонфигурации",    ИмяКонфигурации);
	
	Возврат Ошибка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьОписаниеОшибкиНаСервере(Ошибка)
	
	СисИнфо = Новый СистемнаяИнформация;
	Ошибка.Вставить("ВерсияПлатформы", СисИнфо.ВерсияПриложения);
	Ошибка.Вставить("СерверОперативнаяПамять", СисИнфо.ОперативнаяПамять);
	Ошибка.Вставить("СерверВерсияОС", СисИнфо.ВерсияОС);
	Ошибка.Вставить("СерверПроцессор", СисИнфо.Процессор);
	Ошибка.Вставить("СерверТипПлатформы", Строка(СисИнфо.ТипПлатформы));
	Ошибка.Вставить("СерверИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
	
	Ошибка.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Если Не Ошибка.Свойство("ИмяКонфигурации") Или ПустаяСтрока(Ошибка.ИмяКонфигурации) Тогда
		Ошибка.Вставить("ИмяКонфигурации", Метаданные.Имя);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ошибка.ДатаОбнаружения) Тогда
		Ошибка.ДатаОбнаружения = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстОшибкиXML(Ошибка)
	
	ДополнитьОписаниеОшибкиНаСервере(Ошибка);
	
	Если ТипЗнч(Ошибка.УточнениеРасположения) = Тип("Массив") Тогда
		
		Для Каждого УточнениеРасположения Из Ошибка.УточнениеРасположения Цикл
			Ошибка.ОбъектыМетаданных.Добавить(Новый Структура("ОбъектМетаданных, УточнениеРасположения", Ошибка.ОбъектМетаданных, УточнениеРасположения));
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(Ошибка.ОбъектМетаданных) Или ЗначениеЗаполнено(Ошибка.УточнениеРасположения) Тогда
			Ошибка.ОбъектыМетаданных.Добавить(Новый Структура("ОбъектМетаданных, УточнениеРасположения", Ошибка.ОбъектМетаданных, Ошибка.УточнениеРасположения));
		КонецЕсли;
		
	КонецЕсли;
	
	Ошибка.Удалить("ОбъектМетаданных");
	Ошибка.Удалить("УточнениеРасположения");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Ошибка);
	
	Возврат ЗаписьXML.Закрыть()
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция YMLСериализатор(Структура, СсылочныеТипы, Знач КоличествоОтступов = 0)
	
	СписокПараметровСтрокой = Новый Массив;
	
	Если ТипЗнч(Структура) <> Тип("Структура") Тогда
		Возврат НСтр("ru='(без параметров)'; en='(без параметров)'", ПолучитьКодОсновногоЯзыка());
	КонецЕсли;
	
	Для Каждого Элемент Из Структура Цикл
		
		ТипЗначения = ТипЗнч(Элемент.Значение);
		
		Если ТипЗначения = Тип("Структура") Тогда
			
			СписокПараметровСтрокой.Добавить(СтрШаблон("%1:
				|%2",
				Элемент.Ключ, YMLСериализатор(Элемент.Значение, СсылочныеТипы, КоличествоОтступов + 1)));
			
		Иначе
			
			Для Итератор = 1 По КоличествоОтступов Цикл
				СписокПараметровСтрокой.Добавить(Символы.Таб);
			КонецЦикла;
			
			Если ТипЗнч(СсылочныеТипы) = Тип("Массив") И СсылочныеТипы.Найти(ТипЗначения) <> Неопределено Тогда
				СтроковоеПредставление = СтрШаблон("%1 (%2)", Строка(Элемент.Значение),
					ПолучитьНавигационнуюСсылку(Элемент.Значение));
				
			Иначе
				СтроковоеПредставление = Строка(Элемент.Значение);
			КонецЕсли;
			
			СписокПараметровСтрокой.Добавить(СтрШаблон("%1: %2", Элемент.Ключ, СтроковоеПредставление));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НСтр("ru='с параметрами'; en='с параметрами'", ПолучитьКодОсновногоЯзыка()) + ":" + Символы.ПС + СтрСоединить(СписокПараметровСтрокой, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодОсновногоЯзыка()
	
	Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
	
КонецФункции

#КонецОбласти

#Область ПарсингПараметров

&НаСервере
Функция ПарсерПараметровЗапуска()
	
	Соответствие = Новый Соответствие;
	Возврат Соответствие;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПараметрПарсинга(Парсер, Ключ, Тип = Неопределено)
	
	Парсер.Вставить(Ключ, ?(Тип = Неопределено, "Строка", Тип));
	
КонецПроцедуры

&НаКлиенте
Функция РаспарситьПараметрыЗапуска(Парсер, ПараметрЗапуска)
	
	Результат = Новый Структура;
	
	ПараметрыЗапуска = СтрокаПараметровВМассив(ПараметрЗапуска);
	
	Для Сч = 0 По ПараметрыЗапуска.ВГраница() Цикл
		Если Парсер.Получить(ПараметрыЗапуска[Сч]) = "Строка" Тогда
			Ключ = СтрЗаменить(ПараметрыЗапуска[Сч], "-", "");
			Значение = ПараметрыЗапуска[Сч + 1];
			Результат.Вставить(Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Свойство("ФайлПараметров") Тогда
		Результат = ПрочитатьПараметрыИзФайла(Результат.ФайлПараметров);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтрокаПараметровВМассив(Строка)
	
	// Состояния конечного автомата
	КавычкаБылаОткрыта = Ложь;
	БуферПараметра = Новый Массив;
	
	Результат = Новый Массив;
	
	СимволовВСтроке = СтрДлина(Строка);
	Для ПозицияСимвола = 1 По СимволовВСтроке Цикл
		// Шаг автомата выполняется посимвольно.
		Символ = Сред(Строка, ПозицияСимвола, 1);
		
		// Условие перехода к следующему параметру.
		Если (Символ = " ") И (Не КавычкаБылаОткрыта) Тогда
			
			Если БуферПараметра.Количество() > 0 Тогда
				// Параметр определен
				Результат.Добавить(СтрСоединить(БуферПараметра));
			КонецЕсли;
			
			// Переводим состояние в начального набора параметра.
			БуферПараметра = Новый Массив;
			
			Продолжить;
			
		КонецЕсли;
		
		// Условие входа-выхода в режим разбора параметра в кавычках.
		Если Символ = """" Тогда
			// Меняем состояние конечного автомата.
			КавычкаБылаОткрыта = Не КавычкаБылаОткрыта;
			Продолжить;
		КонецЕсли;
		
		// Изменение состояния автомата в остальных случаях
		БуферПараметра.Добавить(Символ);
		
	КонецЦикла;
	
	Если БуферПараметра.Количество() > 0 Тогда
		// Последний параметр.
		Результат.Добавить(СтрСоединить(БуферПараметра));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьПараметрыИзФайла(ФайлПараметров)
	
	Результат = Новый Структура;
	
	Файл = Новый Файл(ФайлПараметров);
	Если Не Файл.Существует() Тогда // АПК:566 - дымовой тест выполняется в синхронном режиме.
		ВызватьИсключение СтрШаблон(НСтр("ru='Файл с параметрами запуска ""%1"" не существует';
			|en='Файл с параметрами запуска ""%1"" не существует'", КодЯзыкаТекущейПроверки), ФайлПараметров);
	КонецЕсли;
	
	ТекстИзФайлаСНастройками = Новый ЧтениеТекста(ФайлПараметров, КодировкаТекста.UTF8);
	ОписаниеПараметровЗапуска = ТекстИзФайлаСНастройками.Прочитать();
	ТекстИзФайлаСНастройками.Закрыть();
	
	НомерСтроки = 0;
	Пока НомерСтроки < СтрЧислоСтрок(ОписаниеПараметровЗапуска) Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Строка = СтрокаОписанияПараметровЗапуска(ОписаниеПараметровЗапуска, НомерСтроки);
		
		МассивКлючЗначение = СтрРазделить(Строка, ":");
		Ключ = СокрЛП(МассивКлючЗначение[0]);
		
		Если МассивКлючЗначение.Количество() = 1 Тогда
			Значение = "";
		Иначе
			МассивКлючЗначение.Удалить(0);
			Значение = СокрЛП(СтрСоединить(МассивКлючЗначение, ":"));
		КонецЕсли;
		
		Результат.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтрокаОписанияПараметровЗапуска(ОписаниеПараметровЗапуска, НомерСтроки)
	
	КлючиФайла = "ФайлНастроек,ВариантЗапуска,КаталогФайловОшибок,ПутьКФайлуПротокола,ФайлСостояния,ТекстДляОшибки,ПутьККаталогуAllure";
	МассивКлючей = СтрРазделить(КлючиФайла, ",");
	
	Результат = СокрЛП(СтрПолучитьСтроку(ОписаниеПараметровЗапуска, НомерСтроки));
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Строка = СокрЛП(СтрПолучитьСтроку(ОписаниеПараметровЗапуска, НомерСтроки));
		МассивКлючЗначение = СтрРазделить(Строка, ":");
		Если МассивКлючЗначение.Количество() = 1 Тогда
			Результат = Результат + Символы.ПС + Строка;
			Продолжить;
		КонецЕсли;
		
		Ключ = МассивКлючЗначение[0];
		Если МассивКлючей.Найти(Ключ) <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Результат = Результат + Символы.ПС + Строка;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВариантыОтчетов

&НаСервере
Функция ВариантыОтчета(Словарь, Дополнительные = Ложь)
	
	ТипОтчетаДополнительный = Перечисления[ПеревестиЗначение("ТипыОтчетов", Словарь)][ПеревестиЗначение("Дополнительный", Словарь)];
	ТипОтчетаВнутренний     = Перечисления[ПеревестиЗначение("ТипыОтчетов", Словарь)][ПеревестиЗначение("Внутренний", Словарь)];
	ТипОтчетаРасширение     = Перечисления[ПеревестиЗначение("ТипыОтчетов", Словарь)][ПеревестиЗначение("Расширение", Словарь)];
	
	ОбщийМодульБСПВариантыОтчетов = ОбщийМодуль(ПеревестиЗначение("ВариантыОтчетов", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСПВариантыОтчетов.Refresh();
	Иначе
		ОбщийМодульБСПВариантыОтчетов.Обновить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка КАК ВариантОтчета,
	|	ВариантыОтчетов." + ПеревестиЗначение("Отчет", Словарь) + " КАК Отчет,
	|	ВариантыОтчетов." + ПеревестиЗначение("КлючВарианта", Словарь) + " КАК КлючВарианта,
	|	ВариантыОтчетов." + ПеревестиЗначение("ТипОтчета", Словарь) + " КАК ТипОтчета
	|ИЗ
	|	Справочник." + ПеревестиЗначение("ВариантыОтчетов", Словарь) + " КАК ВариантыОтчетов
	|ГДЕ
	|	Не ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов." + ПеревестиЗначение("ТипОтчета", Словарь) + " В (&МассивТипов)";
	
	МассивТипов = Новый Массив;
	Если Дополнительные Тогда
		МассивТипов.Добавить(ТипОтчетаДополнительный);
	Иначе
		МассивТипов.Добавить(ТипОтчетаВнутренний);
		МассивТипов.Добавить(ТипОтчетаРасширение);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивТипов", МассивТипов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВариантов = РезультатЗапроса.СкопироватьКолонки();
	
	ТаблицаВариантов.Колонки.Добавить("ПолноеИмяОтчета");
	ТаблицаВариантов.Колонки.Добавить("ИмяОтчета");
	
	Для Каждого СтрокаВарианта Из РезультатЗапроса Цикл
		
		Если Не Дополнительные Тогда
			ИдентификаторОбъектаМетаданных = СтрокаВарианта["Отчет"];
			ОбъектМетаданных = ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных, Словарь);
			Если Не ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных, Словарь) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ПараметрыВарианта = ПараметрыОткрытия(СтрокаВарианта.ВариантОтчета, Словарь);
		Исключение
			Продолжить;
		КонецПопытки;
		
		НоваяСтрока = ТаблицаВариантов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВарианта);
		
		Вид = "";
		Если (СтрокаВарианта.ТипОтчета = ТипОтчетаВнутренний)
		 Или (СтрокаВарианта.ТипОтчета = ТипОтчетаРасширение) Тогда
			Вид = ПеревестиЗначение("Отчет", Словарь);
		ИначеЕсли СтрокаВарианта.ТипОтчета = ТипОтчетаДополнительный Тогда
			Вид = ПеревестиЗначение("ВнешнийОтчет", Словарь);
		КонецЕсли;
		
		ТекущееИмяОтчета = ПараметрыВарианта[ПеревестиЗначение("ИмяОтчета", Словарь)];
		ПолноеИмяОтчета = Вид + "." + ТекущееИмяОтчета;
		
		НоваяСтрока = ТаблицаВариантов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВарианта);
		
		НоваяСтрока.ПолноеИмяОтчета = ПолноеИмяОтчета;
		НоваяСтрока.ИмяОтчета = ТекущееИмяОтчета;
		
	КонецЦикла;
	
	Возврат ТаблицаВариантов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УточнитьКонтекстФормыОтчета(ТекущиеПараметрыФормы, Словарь)
	
	Если ТекущиеПараметрыФормы = Неопределено Тогда
		ТекущиеПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ТекущиеПараметрыФормы.Вставить(ПеревестиЗначение("СформироватьПриОткрытии", Словарь), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьФормированиеОтчета()
	
	ОткрытоеОкно = АктивноеОкно();
	
	Если ОткрытоеОкно = Неопределено 
		Или (ОткрытоеОкно.Содержимое.Количество() > 0
		И ОткрытоеОкно.Содержимое[0] = ЭтаФорма) Тогда
			ТекстАвтозакрытие = НСтр("ru='(автозакрытие формы отчета)'; en='(автозакрытие формы отчета)'", КодЯзыкаТекущейПроверки);
			ЗавершитьЗамер(ТекстАвтозакрытие);
			ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed",,, ТекстАвтозакрытие);
			
			ОткрытьСледующуюТестируемуюФорму();
			Возврат;
	КонецЕсли;
	
	ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
	
	Форма = ОткрытоеОкно.Содержимое[0];
	КлючВарианта = ПолучитьКлючВариантаОтчета(ОткрытаяТестируемаяФорма.ВариантОтчета, Словарь);
	ИмяОткрываемогоОтчета = СтрШаблон("%1_%2", ИмяОткрываемойФормы, КлючВарианта);
	
	Попытка
		
		КлючТекущегоВариантаФормы = Форма.КлючТекущегоВарианта;
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed");
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТипОшибки = ОшибкаПоискаФормыОтчета();
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Активная форма'; en = 'Активная форма'") + ": " + Форма.Заголовок;
		ТекстОшибки = ТекстОшибки + Символы.ПС + РежимФО;
		
		ДобавитьВЛогВремениОткрытияФорм(ТипОшибки + ":" + СтрЗаменить(ТекстОшибки, Символы.ПС, " "), Ложь);
		ЗаписатьОшибку("ФормаОтчета", ИмяОткрываемогоОтчета, ТипОшибки, Неопределено, ТекстОшибки);
		ЗавершитьЗамер();
		ЗакрытьФорму(Форма, "ФормаОтчета");
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
		
	КонецПопытки;
	
	Если (КлючТекущегоВариантаФормы <> КлючВарианта) Или (Не Форма.Открыта()) Тогда
		ТипОшибки = ОшибкаПоискаФормыОтчета();
		ДобавитьВЛогВремениОткрытияФорм(ТипОшибки, Ложь);
		ЗаписатьОшибку("ФормаОтчета", ИмяОткрываемогоОтчета, ТипОшибки, Неопределено);
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецЕсли;
	
	Если ПроверитьОтчетСформирован(Форма) Тогда
		ЗавершитьЗамер();
		ЗакрытьФорму(Форма, "ФормаОтчета");
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed");
		
		ОткрытьСледующуюТестируемуюФорму();
	Иначе
		
		ТекстОшибки = ПроверитьФормированиеОтчетаЗавершилосьСОшибкой(Форма);
		Если ЭтоОжидаемаяОшибка(ОткрытаяТестируемаяФорма, ТекстОшибки) Тогда
			ЗакрытьФорму(Форма, "ФормаОтчета");
			ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed");
			
			ОткрытьСледующуюТестируемуюФорму();
			Возврат;
		КонецЕсли;
		
		ПрерватьОжиданиеФормированияОтчета = Ложь;
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ТипОшибки = ОшибкаФормированияВариантаОтчета();
			ДобавитьВЛогВремениОткрытияФорм(ТипОшибки + ":" + СтрЗаменить(ТекстОшибки, Символы.ПС, " "), Ложь);
			ЗаписатьОшибку("ФормаОтчета", ИмяОткрываемогоОтчета, ТипОшибки, Неопределено, ТекстОшибки);
			
			ПрерватьОжиданиеФормированияОтчета = Истина;
		Иначе
			
			Ожидание = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОткрытия) / 1000;
			Если Ожидание > ДлительностьОткрытияФормы Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru='Время формирования отчета %1 более %2 сек.'; en='Время формирования отчета %1 более %2 сек.'", КодЯзыкаТекущейПроверки),
					ИмяОткрываемойФормы, ДлительностьОткрытияФормы);
				ЗаписатьОшибкуВремениОткрытияФормы("ФормаОтчета", ТекстОшибки, Ожидание,, ИмяОткрываемогоОтчета);
				ПрерватьОжиданиеФормированияОтчета = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПрерватьОжиданиеФормированияОтчета Тогда
			ОтключитьОбработчикОжидания("ЗафиксироватьФормированиеОтчета");
			ЗакрытьФорму(Форма, "ФормаОтчета");
			ОткрытьСледующуюТестируемуюФорму();
		Иначе
			ПодключитьОбработчикОжидания("ЗафиксироватьФормированиеОтчета", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьОтчетСформирован(Форма)
	
	Если Форма.Элементы.Найти("ОтчетТабличныйДокумент") = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат (Не Форма.Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.Видимость);
	
КонецФункции

&НаКлиенте
Функция ПроверитьФормированиеОтчетаЗавершилосьСОшибкой(Форма)
	
	Если ПроверитьОтчетСформирован(Форма) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстСостояния = Форма.Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.Текст;
	Если ПустаяСтрока(ТекстСостояния) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДопустимыеВариантыТекстаСостоянияОтчета.НайтиПоЗначению(ТекстСостояния) <> Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ТекстСостояния;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючВариантаОтчета(ВариантОтчета, Словарь)
	
	Возврат ЗначениеРеквизитаОбъекта(ВариантОтчета, ПеревестиЗначение("КлючВарианта", Словарь), Словарь);
	
КонецФункции

#КонецОбласти

#Область СервисныеФункции

// Возвращает путь к информационной базе для файловой ИБ.
// Если база не файловая, возвращает пустую строку.
//
&НаКлиенте
Функция ПутьКИнформационнойБазе()
	
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	
	ЭтоФайловаяИБ = Найти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
	Если ЭтоФайловаяИБ Тогда
		Возврат Сред(СтрокаСоединенияИнформационнойБазы, 7, СтрДлина(СтрокаСоединенияИнформационнойБазы) - 8);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция ПутьКПапкеОбработкиНаКлиенте()
	
	ПутьКОбработке = ПолноеИмяФайлаЭтойОбработки();
	МассивПутьКОбработке = СтрРазделить(ПутьКОбработке, ПолучитьРазделительПути());
	МассивПутьКОбработке.Удалить(МассивПутьКОбработке.ВГраница());
	
	ПутьКПапкеОбработки = СтрСоединить(МассивПутьКОбработке, ПолучитьРазделительПути());
	Если Не СтрЗаканчиваетсяНа(ПутьКПапкеОбработки, ПолучитьРазделительПути()) Тогда
		ПутьКПапкеОбработки = ПутьКПапкеОбработки + ПолучитьРазделительПути();
	КонецЕсли;
	
	Возврат ПутьКПапкеОбработки;
	
КонецФункции

&НаСервере
Функция ПутьКПапкеОбработкиНаСервере()
	
	ПутьКОбработке = ПолноеИмяФайлаЭтойОбработки();
	МассивПутьКОбработке = СтрРазделить(ПутьКОбработке, ПолучитьРазделительПути());
	МассивПутьКОбработке.Удалить(МассивПутьКОбработке.ВГраница());
	ПутьКПапкеОбработки = СтрСоединить(МассивПутьКОбработке, ПолучитьРазделительПути());
	Если Не СтрЗаканчиваетсяНа(ПутьКПапкеОбработки, ПолучитьРазделительПути()) Тогда
		ПутьКПапкеОбработки = ПутьКПапкеОбработки + ПолучитьРазделительПути();
	КонецЕсли;
	
	Возврат ПутьКПапкеОбработки;
	
КонецФункции

// Скриншот.
&НаКлиенте
Функция СоздатьСкриншот(ИмяФайла)
	
	Текст = """& {[void][Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');"
		+ "$size = [Windows.Forms.SystemInformation]::VirtualScreen;"
		+ "$bitmap = new-object Drawing.Bitmap $size.width, $size.height;"
		+ "$graphics = [Drawing.Graphics]::FromImage($bitmap);"
		+ "$graphics.CopyFromScreen($size.location,[Drawing.Point]::Empty, $size.size);"
		+ "$graphics.Dispose();"
		+ "$bitmap.Save('" + ИмяФайла + "');"
		+ "$bitmap.Dispose()}""";
	
	СтрокаЗапуска = "powershell /c " + Текст;
	Результат = ЗапуститьСОжиданиемЗавершенияРаботыПриложения(СтрокаЗапуска, "СоздатьСкриншот", 0);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Функция ЗапуститьСОжиданиемЗавершенияРаботыПриложения(СтрокаЗапуска, Контекст, ВидОкнаЗапускаемогоПриложения = 1);
	
	СистемныйПроцесс = Новый COMОбъект("WScript.Shell");
	
	Попытка
		КодВозврата = СистемныйПроцесс.Run(СтрокаЗапуска, ВидОкнаЗапускаемогоПриложения, Истина);
	Исключение
		КодВозврата = -1;
	КонецПопытки;
	
	Возврат КодВозврата;
	
КонецФункции

// Добавляет к переданному пути каталога конечный символ-разделитель, если он отсутствует.
//
// Параметры:
//  ПутьКаталога - Строка - путь к каталогу.
//  Платформа - ТипПлатформы - параметр устарел, больше не используется.
//
// Возвращаемое значение:
//  Строка - путь к каталогу с конечным символом-разделителем.
//
// Пример:
//  Результат = ДобавитьКонечныйРазделительПути("C:\Мой каталог"); // возвращает "C:\Мой каталог\".
//  Результат = ДобавитьКонечныйРазделительПути("C:\Мой каталог\"); // возвращает "C:\Мой каталог\".
//  Результат = ДобавитьКонечныйРазделительПути("%APPDATA%"); // возвращает "%APPDATA%\".
//
&НаКлиенте
Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Платформа = Неопределено)
	
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПутиКлиента();
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СтруктуруВТекст(Набор)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Набор Цикл
		Результат.Добавить(Элемент.Ключ + " = " + Элемент.Значение);
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ДатаИзСтроки(Строка)
	
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
	
	Возврат ОписаниеТипаДата.ПривестиЗначение(Строка);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФайлСуществует(ИмяФайла)
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует(); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлСуществуетНаСервере(ИмяФайла)
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	
	Возврат Файл.Существует(); // АПК:566 - дымовой тест выполняется в синхронном режиме.
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрНайтиПоМассиву(Строка, МассивПоиска, НаправлениеДляПоиска = Неопределено, НачальнаяПозицияПоиска = Неопределено)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НайденныйЭлемент", "");
	СтруктураВозврата.Вставить("Позиция", 0);
	СтруктураВозврата.Вставить("Успешно", Ложь);
	
	Если НаправлениеДляПоиска = Неопределено Тогда
		НаправлениеДляПоиска = НаправлениеПоиска.СНачала;
	КонецЕсли;
	
	ПоискСНачала = (НаправлениеДляПоиска = НаправлениеПоиска.СНачала);
	
	Если НачальнаяПозицияПоиска = Неопределено Тогда
		НачальнаяПозицияПоиска = ?(ПоискСНачала, 1, СтрДлина(Строка));
	КонецЕсли;
	
	ВременнаяПозицияПоиска = 0;
	Для Каждого ТекстПоиска Из МассивПоиска Цикл
		
		ТекущаяПозицияПоиска = СтрНайти(Строка, ТекстПоиска, НаправлениеДляПоиска, НачальнаяПозицияПоиска);
		Если ТекущаяПозицияПоиска = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ВременнаяПозицияПоиска = 0)
			Или ?(ПоискСНачала, ТекущаяПозицияПоиска < ВременнаяПозицияПоиска, ТекущаяПозицияПоиска > ВременнаяПозицияПоиска) Тогда
			
			СтруктураВозврата.НайденныйЭлемент = ТекстПоиска;
			СтруктураВозврата.Позиция = ТекущаяПозицияПоиска;
			СтруктураВозврата.Успешно = Истина;
			
			ВременнаяПозицияПоиска = ТекущаяПозицияПоиска;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрЗаканчиваетсяНаПоМассиву(Строка, МассивПоиска)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НайденныйЭлемент", "");
	СтруктураВозврата.Вставить("Успешно", Ложь);
	
	Для Каждого ТекстПоиска Из МассивПоиска Цикл
		Успешно = СтрЗаканчиваетсяНа(Строка, ТекстПоиска);
		Если Успешно Тогда
			СтруктураВозврата.НайденныйЭлемент = ТекстПоиска;
			СтруктураВозврата.Успешно = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСловарьИзФайловСловарей()
	
	ФайлыСловарей = Новый Массив;
	ДобавитьВПротоколТестирования(НСтр("ru = 'Чтение словарей из %1';en = 'Чтение словарей из  %1'"), ПутьКФайлуСловаря);
		
	Попытка
		ПроверкаФайлаСловаря = Новый Файл(ПутьКФайлуСловаря);
		Если ПроверкаФайлаСловаря.ЭтоКаталог() Тогда
			НайденныеФайлыСловарей = НайтиФайлы(ПутьКФайлуСловаря, "*.dict", Истина);
			Для Каждого СведенияОФайле Из НайденныеФайлыСловарей Цикл
				ФайлыСловарей.Добавить(СведенияОФайле.ПолноеИмя);
			КонецЦикла;
			
		ИначеЕсли ПроверкаФайлаСловаря.Существует() Тогда
			ФайлыСловарей.Добавить(ПутьКФайлуСловаря);
		Иначе
			Возврат;
		КонецЕсли;
	Исключение 
		ДобавитьВПротоколТестирования(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Для Каждого СведенияОФайле Из ФайлыСловарей Цикл
		
		ФайлСловаря = Новый ЧтениеТекста(СведенияОФайле, КодировкаТекста.UTF8);
		ДобавитьВПротоколТестирования(НСтр("ru = 'Загрузка словаря из %1';en = 'Загрузка словаря из  %1'"), СведенияОФайле);
	
		СтрокаИзФайла = ФайлСловаря.ПрочитатьСтроку();
		
		Пока СтрокаИзФайла <> Неопределено Цикл
			
			СловоИПеревод = СтрРазделить(СокрЛП(СтрокаИзФайла), "=", Ложь);
			Если СловоИПеревод.Количество() <> 2 Тогда
				СтрокаИзФайла = ФайлСловаря.ПрочитатьСтроку();
				Продолжить;
			КонецЕсли;
			
			СловоВерхнийРегистр = ВРег(СловоИПеревод[0]);
			Если Словарь[СловоВерхнийРегистр] <> Неопределено
				И СтрСравнить(Словарь[СловоВерхнийРегистр], СловоИПеревод[1]) <> 0 Тогда
				Словарь[СловоВерхнийРегистр] = СловоИПеревод[1];
			КонецЕсли;
			
			СтрокаИзФайла = ФайлСловаря.ПрочитатьСтроку();
			
		КонецЦикла;
		
		ФайлСловаря.Закрыть();
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ТестФормыНастроекОтчета

&НаКлиенте
Процедура ЗафиксироватьОткрытиеФормыНастроекОтчета()
	
	СчетчикПоискаОткрытойФормы = СчетчикПоискаОткрытойФормы + 1;
	ОткрытоеОкно               = АктивноеОкно();
	
	Если ОткрытоеОкно = Неопределено 
		Или (ОткрытоеОкно.Содержимое.Количество() > 0
		И ОткрытоеОкно.Содержимое[0] = ЭтаФорма) Тогда
			ТекстАвтозакрытие = НСтр("ru='(автозакрытие формы настроек отчета)'; en='(автозакрытие формы настроек отчета)'", КодЯзыкаТекущейПроверки);
			ЗавершитьЗамер(ТекстАвтозакрытие);
			ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed",,, ТекстАвтозакрытие);
			ОткрытьСледующуюТестируемуюФорму();
			Возврат;
	КонецЕсли;
	
	Форма = ОткрытоеОкно.Содержимое[0];
	
	ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
	ИмяФормыСОшибкой = СтрШаблон("%1_%2", ОткрытаяТестируемаяФорма.ПолноеИмя, ОткрытаяТестируемаяФорма.ВариантОтчета);
	
	ИмяОбъектаФормы = СтрРазделить(Форма.ИмяФормы, ".")[1];
	ИмяОбъектаОткрываемойФормы = СтрРазделить(ИмяОткрываемойФормы, ".")[1];
	
	Если Форма.Открыта()
		И ((Форма.ИмяФормы = СтрШаблон("%1.%2", ПеревестиЗначение("ОбщаяФорма", Словарь), ПеревестиЗначение("ФормаНастроекОтчета", Словарь)))
			Или (ИмяОбъектаФормы = ИмяОбъектаОткрываемойФормы)) Тогда
		ЗавершитьЗамер();
		ЗакрытьФорму(Форма, "ФормаНастроекОтчета");
		
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed");
		
		ОткрытьСледующуюТестируемуюФорму();
	Иначе
		Если СчетчикПоискаОткрытойФормы > 50 Тогда
			Ожидание = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОткрытия) / 1000;
			ДобавитьВЛогВремениОткрытияФорм(Строка(Ожидание), Ложь);
			Если Ожидание > ДлительностьОткрытияФормы Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Время открытия формы %1 более %2 сек.';
					|en='Время открытия формы %1 более %2 сек.'", КодЯзыкаТекущейПроверки), ИмяОткрываемойФормы, ДлительностьОткрытияФормы);
				ЗаписатьОшибкуВремениОткрытияФормы("ФормаНастроекОтчета", ТекстОшибки, Ожидание,, ИмяФормыСОшибкой);
			Иначе
				ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "skipped");
			КонецЕсли;
			Если Ожидание > ДлительностьОткрытияФормы + 10 Тогда
				ЗаписатьОшибкуВремениОткрытияФормы("ФормаНастроекОтчета",
					НСтр("ru='Не удалось зафиксировать открытие формы настроек отчета. Замер прекращен.';
						|en='Не удалось зафиксировать открытие формы настроек отчета. Замер прекращен.'", КодЯзыкаТекущейПроверки),
					Ожидание,
					Ложь,
					ИмяФормыСОшибкой);
			КонецЕсли;
			ОтключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормыНастроекОтчета");
			ОткрытьСледующуюТестируемуюФорму();
		Иначе
			ПодключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормыНастроекОтчета", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УточнитьКонтекстФормыНастроекОтчета(ВариантОтчета, ТекущиеПараметрыФормы, Словарь)
	
	СвойстваВарианта = ПолучитьЗначенияРеквизитовВариантаОтчета(ВариантОтчета, Словарь);
	
	Если СвойстваВарианта.ТипОтчета = Перечисления[ПеревестиЗначение("ТипыОтчетов", Словарь)][ПеревестиЗначение("Дополнительный", Словарь)] Тогда
		ИмяОбъекта = ЗначениеРеквизитаОбъекта(СвойстваВарианта.Отчет, ПеревестиЗначение("ИмяОбъекта", Словарь), Словарь);
		ПолноеИмяОтчета = ПеревестиЗначение("ВнешнийОтчет", Словарь) + "." + ИмяОбъекта;
	Иначе
		ПолноеИмяОтчета = ЗначениеРеквизитаОбъекта(СвойстваВарианта.Отчет, ПеревестиЗначение("ПолноеИмя", Словарь), Словарь);
	КонецЕсли;
	
	ОтчетОбъект = ОтчетОбъект(ПолноеИмяОтчета, Словарь);
	
	Если ТекущиеПараметрыФормы <> Неопределено И ТекущиеПараметрыФормы.Свойство("ПараметрыДанных") Тогда
		КоллекцияПараметров = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
		Для Каждого ЭлементСтруктуры Из ТекущиеПараметрыФормы.ПараметрыДанных Цикл
			НайденныйПараметр = КоллекцияПараметров.Найти(ЭлементСтруктуры.Ключ);
			Если НайденныйПараметр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныйПараметр.Значение = ЭлементСтруктуры.Значение;
		КонецЦикла;
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(
		ОтчетОбъект.СхемаКомпоновкиДанных, ВариантОтчета.УникальныйИдентификатор());
	
	НастройкиОтчета = НастройкиФормыОтчета(
		СвойстваВарианта.Отчет, СвойстваВарианта.КлючВарианта, ОтчетОбъект, Словарь);
	
	ЗаполнитьЗначенияСвойств(НастройкиОтчета, СвойстваВарианта);
	
	НастройкиОтчета.Вставить(ПеревестиЗначение("ПолноеИмя", Словарь), ПолноеИмяОтчета);
	НастройкиОтчета.Вставить(ПеревестиЗначение("ВариантСсылка", Словарь), ВариантОтчета);
	НастройкиОтчета.Вставить(ПеревестиЗначение("АдресСхемы", Словарь), АдресСхемы);
	НастройкиОтчета.Вставить(ПеревестиЗначение("СхемаМодифицирована", Словарь), Ложь);
	НастройкиОтчета.Вставить(ПеревестиЗначение("КлючСхемы", Словарь), "");
	
	Если ТекущиеПараметрыФормы = Неопределено Тогда
		ТекущиеПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ТекущиеПараметрыФормы.Вставить(ПеревестиЗначение("НастройкиОтчета", Словарь), НастройкиОтчета);
	ТекущиеПараметрыФормы.Вставить(ПеревестиЗначение("ВариантНаименование", Словарь), СвойстваВарианта.Наименование);
	ТекущиеПараметрыФормы.Вставить(ПеревестиЗначение("Вариант", Словарь), ОтчетОбъект.КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ТестПечатнойФормы

&НаКлиенте
Процедура ОткрытьПечатнуюФорму(ОписаниеКоманды)
	
	ТекстСтандартныеПодсистемы = ПеревестиЗначение("СтандартныеПодсистемы", Словарь);
	ТекстДополнительныеОтчетыИОбработки = ПеревестиЗначение("ДополнительныеОтчетыИОбработки", Словарь);
	
	МенеджерПечати = ОписаниеКоманды[ПеревестиЗначение("МенеджерПечати", Словарь)];
	
	Если (МенеджерПечати = ТекстСтандартныеПодсистемы + "." + ТекстДополнительныеОтчетыИОбработки)
	   И ПодсистемаСуществует(ТекстСтандартныеПодсистемы + "." + ТекстДополнительныеОтчетыИОбработки, Словарь) Тогда
		ВыполнитьНазначаемуюКомандуПечати(ОписаниеКоманды, ЭтаФорма, Словарь);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ОписаниеКоманды[ПеревестиЗначение("Обработчик", Словарь)];
	Если НЕ ПустаяСтрока(ИмяОбработчика) Тогда
		ОписаниеКоманды.Вставить(ПеревестиЗначение("Форма", Словарь), ЭтаФорма);
		Если (СтрЧислоВхождений(ИмяОбработчика, ".") = 0) И ЭтоОтчетИлиОбработка(МенеджерПечати, Словарь) Тогда
			ИмяФормыМенеджераПечати = МенеджерПечати + "." + ПеревестиЗначение("Форма", Словарь);
			ОсновнаяФорма = ПолучитьФорму(ИмяФормыМенеджераПечати, ,ЭтаФорма, Истина); //АПК:65 - форма используется ниже.
			ИмяОбработчика = "ОсновнаяФорма." + ИмяОбработчика;
		КонецЕсли;
		Обработчик = ИмяОбработчика + "(ОписаниеКоманды)";
		Результат = Вычислить(Обработчик);
		Возврат;
	КонецЕсли;
	
	ВыполнитьКомандуПечати(МенеджерПечати, ОписаниеКоманды[ПеревестиЗначение("Идентификатор", Словарь)],
		ОписаниеКоманды[ПеревестиЗначение("ОбъектыПечати", Словарь)], ЭтаФорма, Словарь, ОписаниеКоманды);
	
	СохранитьПутьКМакетуПечатнойФормыДляПроверкиРедактированияМакета();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьКонтекстПечатнойФормы(ПараметрыОткрытияПечатнойФормы, ИмяСвойстваОбъектыПечати)
	
	Если Не ПараметрыОткрытияПечатнойФормы.Свойство(ИмяСвойстваОбъектыПечати) Тогда
		Результат = ПолучитьОбъектыПечати(ПараметрыОткрытияПечатнойФормы, Словарь, КодЯзыкаТекущейПроверки);
		ДобавитьВПротоколТестирования(Результат.ИнформацияДляЛога);
		ОбъектыПечати = Результат.ОбъектыПечати;
		ПараметрыОткрытияПечатнойФормы.Вставить(ИмяСвойстваОбъектыПечати, ОбъектыПечати);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОтчетИлиОбработка(МенеджерПечати, Словарь)
	
	Если Не ЗначениеЗаполнено(МенеджерПечати) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивПодстрок = СтрРазделить(МенеджерПечати, ".");
	Если МассивПодстрок.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Вид = ВРег(СокрЛП(МассивПодстрок[0]));
	
	Возврат (Вид = ВРег(ПеревестиЗначение("Отчет", Словарь))) Или (Вид = ВРег(ПеревестиЗначение("Обработка", Словарь)));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбъектыПечати(ПараметрыОткрытияПечатнойФормы, Словарь, КодЯзыкаТекущейПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ОбъектыПечати", Новый Массив);
	Результат.Вставить("ИнформацияДляЛога", "");
	
	ИмяОбъектаМетаданных = ПараметрыОткрытияПечатнойФормы.ИмяОбъектаМетаданных;
	
	Если СтрНачинаетсяС(ИмяОбъектаМетаданных, ПеревестиЗначение("РегистрСведений", Словарь))
		Или СтрНачинаетсяС(ИмяОбъектаМетаданных, ПеревестиЗначение("РегистрНакопления", Словарь))
		Или СтрНачинаетсяС(ИмяОбъектаМетаданных, ПеревестиЗначение("РегистрБухгалтерии", Словарь))
		Или СтрНачинаетсяС(ИмяОбъектаМетаданных, ПеревестиЗначение("РегистрРасчета", Словарь)) Тогда
			Результат.ИнформацияДляЛога = СтрШаблон(
				НСтр("ru = 'Пропущено получение объектов печати для %1';en = 'Пропущено получение объектов печати для %1'"),
			ИмяОбъектаМетаданных);
		Возврат Результат;
	КонецЕсли;
	
	ИнформацияДляЛога = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	%ОбъектПроверки% КАК Объект
	|ГДЕ
	|	%ДопУсловия%
	|	%Иерархический%";
	
	УсловияВидимости = ПараметрыОткрытияПечатнойФормы[ПеревестиЗначение("УсловияВидимости", Словарь)];
	ДопУсловия = СформироватьСтрокуСУсловиямиВидимостиПечатнойКоманды(УсловияВидимости, Запрос, Словарь);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДопУсловия%", ДопУсловия);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОбъектПроверки%", ИмяОбъектаМетаданных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Иерархический%", ?(ПараметрыОткрытияПечатнойФормы.Иерархический, "И Не Объект.ЭтоГруппа", ""));
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		ТекстОшибки = СтрШаблон("%1
			|%2
			|%3
			|%4",
			НСтр("ru = 'Ошибка при получении ссылки для печатной формы объекта';
				|en = 'Ошибка при получении ссылки для печатной формы объекта'", КодЯзыкаТекущейПроверки),
			ИмяОбъектаМетаданных,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Запрос.Текст);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ИнформацияДляЛога.Добавить(СтрШаблон(
				НСтр("ru = 'Получение объектов печати для %1';en = 'Пропущено получение объектов печати для %1'"),
			ИмяОбъектаМетаданных));
	ИнформацияДляЛога.Добавить(Запрос.Текст);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	ВсегоСсылок = ВыборкаДетальныеЗаписи.Количество();
	
	ИнформацияДляЛога.Добавить(СтрШаблон(
				НСтр("ru = 'Кол-во записей: %1';en = 'Кол-во записей: %1'"),
			Строка(ВсегоСсылок)));
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	Для Индекс = 1 По ВсегоСсылок Цикл
		ИндексФормы = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, ВсегоСсылок - 1);
		
		Результат.ОбъектыПечати.Добавить(ВыборкаДетальныеЗаписи[ИндексФормы].Ссылка);
		Прервать;
		
	КонецЦикла;
	
	Результат.ИнформацияДляЛога = СтрСоединить(ИнформацияДляЛога, Символы.ПС);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСтрокуСУсловиямиВидимостиПечатнойКоманды(УсловияВидимости, Запрос, Словарь)
	
	ОперацииУсловий = ПолучитьОперацииУсловийСравнения();
	
	МассивУсловий = Новый Массив;
	Если ТипЗнч(УсловияВидимости) = Тип("Массив") Тогда
		
		ИмяРеквизит     = ПеревестиЗначение("Реквизит", Словарь);
		ИмяВидСравнения = ПеревестиЗначение("ВидСравнения", Словарь);
		ИмяЗначение     = ПеревестиЗначение("Значение", Словарь);
		
		Для Каждого Условие Из УсловияВидимости Цикл
			
			ТекТекстУсловия = "";
			ТекОперация = ОперацииУсловий.Получить(Условие[ИмяВидСравнения]);
			
			Если ТекОперация <> Неопределено Тогда
				ТекТекстУсловия = Условие[ИмяРеквизит] + " " + ТекОперация + " &" + Условие[ИмяРеквизит];
				
			ИначеЕсли (Условие[ИмяВидСравнения] = ВидСравнения.ВСписке)
				  Или (Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.ВСписке) Тогда
				ТекТекстУсловия = Условие[ИмяРеквизит] + " В(&" + Условие[ИмяРеквизит] + ")";
				
			ИначеЕсли (Условие[ИмяВидСравнения] = ВидСравнения.НеВСписке)
				  Или (Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.НеВСписке) Тогда
				ТекТекстУсловия = "Не " + Условие[ИмяРеквизит] + " В(&" + Условие[ИмяРеквизит] + ")";
				
			ИначеЕсли (Условие[ИмяВидСравнения] = ВидСравнения.ВИерархии)
				  Или (Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.ВИерархии)
				  Или (Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии) Тогда
				ТекТекстУсловия = Условие[ИмяРеквизит] + " В ИЕРАРХИИ(&" + Условие[ИмяРеквизит] + ")";
				
			ИначеЕсли (Условие[ИмяВидСравнения] = ВидСравнения.НеВИерархии)
				  Или (Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.НеВИерархии)
				  Или (Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) Тогда
				ТекТекстУсловия = "Не " + Условие[ИмяРеквизит] + " В ИЕРАРХИИ(&" + Условие[ИмяРеквизит] + ")";
				
			ИначеЕсли Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.Подобно Тогда
				ТекТекстУсловия = Условие[ИмяРеквизит] + " ПОДОБНО(&" + Условие[ИмяРеквизит] + ")";
				
			ИначеЕсли Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				ТекТекстУсловия = "Не " + Условие[ИмяРеквизит] + " ПОДОБНО(&" + Условие[ИмяРеквизит] + ")";
				
			ИначеЕсли (Условие[ИмяВидСравнения] = ВидСравнения.Содержит)
				  Или (Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.Содержит) Тогда
				ТекТекстУсловия = Условие[ИмяРеквизит] + " = %" + Условие[ИмяРеквизит] + "%";
				
			ИначеЕсли (Условие[ИмяВидСравнения] = ВидСравнения.НеСодержит)
				  Или (Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.НеСодержит) Тогда
				ТекТекстУсловия = "Не " + Условие[ИмяРеквизит] + " = %" + Условие[ИмяРеквизит] + "%";
				
			ИначеЕсли Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
				ТекТекстУсловия = Условие[ИмяРеквизит] + " = %" + Условие[ИмяРеквизит];
				
			ИначеЕсли Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
				ТекТекстУсловия = "Не " + Условие[ИмяРеквизит] + " = %" + Условие[ИмяРеквизит];
				
			ИначеЕсли Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ТекстУсловияНеЗаполнено = ПолучитьТекстУсловияЗначениеНеЗаполнено(Условие[ИмяРеквизит], Условие[ИмяЗначение]);
				Если Не ПустаяСтрока(ТекстУсловияНеЗаполнено) Тогда
					ТекТекстУсловия = "Не " + ТекстУсловияНеЗаполнено;
				КонецЕсли;
				
			ИначеЕсли Условие[ИмяВидСравнения] = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ТекТекстУсловия = ПолучитьТекстУсловияЗначениеНеЗаполнено(Условие[ИмяРеквизит], Условие[ИмяЗначение]);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекТекстУсловия) Тогда
				МассивУсловий.Добавить(ТекТекстУсловия);
				Запрос.УстановитьПараметр(Условие[ИмяРеквизит], Условие[ИмяЗначение]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДопУсловия = СтрСоединить(МассивУсловий, Символы.ПС + "И ");
	Если ПустаяСтрока(ДопУсловия) Тогда
		ДопУсловия = "ИСТИНА";
	КонецЕсли;
	
	Возврат ДопУсловия;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстУсловияЗначениеНеЗаполнено(Реквизит, Значение)
	
	ТекстУсловия = "";
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		ТекстУсловия = Реквизит + " = 0";
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		ТекстУсловия = Реквизит + " = """"";
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		ТекстУсловия = Реквизит + " = ДАТАВРЕМЯ(1,1,1,0,0,0)";
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		// Значение типа Булево всегда является заполненным.
		Возврат "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстУсловия) Тогда
		Возврат ТекстУсловия;
	КонецЕсли;
	
	// Для ссылочных типов получаем строку типа из метаданных и используем в тексте условия.
	Попытка
		ТекстТип = Значение.Метаданные().ПолноеИмя();
		ТекстУсловия = СтрШаблон("%1 = ЗНАЧЕНИЕ(%2.ПустаяСсылка)", Реквизит, ТекстТип);
	Исключение
		Возврат ТекстУсловия;
	КонецПопытки;
	
	Возврат ТекстУсловия;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОперацииУсловийСравнения()
	
	ОперацииУсловий = Новый Соответствие;
	ОперацииУсловий.Вставить(ВидСравнения.Равно,                          "=");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.Равно,          "=");
	ОперацииУсловий.Вставить(ВидСравнения.Больше,                         ">");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.Больше,         ">");
	ОперацииУсловий.Вставить(ВидСравнения.БольшеИлиРавно,                 ">=");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ">=");
	ОперацииУсловий.Вставить(ВидСравнения.Меньше,                         "<");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.Меньше,         "<");
	ОперацииУсловий.Вставить(ВидСравнения.МеньшеИлиРавно,                 "<=");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, "<=");
	ОперацииУсловий.Вставить(ВидСравнения.НеРавно,                        "<>");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.НеРавно,        "<>");
	
	Возврат ОперацииУсловий;
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьОткрытиеПечатнойФормы()
	
	СчетчикПоискаОткрытойФормы = СчетчикПоискаОткрытойФормы + 1;
	ОткрытоеОкно               = АктивноеОкно();
	
	Если ОткрытоеОкно = Неопределено Тогда
		ТекстАвтозакрытие = НСтр("ru='(автозакрытие печатной формы)'; en='(автозакрытие печатной формы)'", КодЯзыкаТекущейПроверки);
		ЗавершитьЗамер(ТекстАвтозакрытие);
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed",,, ТекстАвтозакрытие);
		
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецЕсли;
	
	Форма = ОткрытоеОкно.Содержимое[0];
	
	Если Форма.Открыта()
		И (Форма.ИмяФормы = СтрШаблон("%1.%2", ПеревестиЗначение("ОбщаяФорма", Словарь), ПеревестиЗначение("ПечатьДокументов", Словарь))
			Или СтрНайти(Форма.ИмяФормы, ИдентификаторПечатнойФормы) > 0) Тогда
		ЗавершитьЗамер();
		ЗакрытьФорму(Форма, "ПечатнаяФорма");
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed");
		
		ОткрытьСледующуюТестируемуюФорму();
	Иначе
		Если СчетчикПоискаОткрытойФормы > 50 Тогда
			Ожидание = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОткрытия) / 1000;
			ДобавитьВЛогВремениОткрытияФорм(Строка(Ожидание), Ложь);
			Если Ожидание > ДлительностьОткрытияФормы Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Время открытия формы %1 более %2 сек.'; en='Время открытия формы %1 более %2 сек.'", КодЯзыкаТекущейПроверки), ИмяОткрываемойФормы, ДлительностьОткрытияФормы);
				ЗаписатьОшибкуВремениОткрытияФормы("ПечатнаяФорма", ТекстОшибки, Ожидание);
			Иначе
				ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "skipped");
			КонецЕсли;
			Если Ожидание > ДлительностьОткрытияФормы + 10 Тогда
				ЗаписатьОшибкуВремениОткрытияФормы("ПечатнаяФорма",
					НСтр("ru='Не удалось зафиксировать открытие печатной формы. Замер прекращен.';
						|en='Не удалось зафиксировать открытие печатной формы. Замер прекращен.'", КодЯзыкаТекущейПроверки),
					Ожидание,
					Ложь);
			КонецЕсли;
			ОтключитьОбработчикОжидания("ЗафиксироватьОткрытиеПечатнойФормы");
			ОткрытьСледующуюТестируемуюФорму();
		Иначе
			ПодключитьОбработчикОжидания("ЗафиксироватьОткрытиеПечатнойФормы", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьОткрытиеФормыРедактированияМакета()
	
	СчетчикПоискаОткрытойФормы = СчетчикПоискаОткрытойФормы + 1;
	ОткрытоеОкно               = АктивноеОкно();
	
	Если ОткрытоеОкно = Неопределено Тогда
		ТекстАвтозакрытие = НСтр("ru='(автозакрытие печатной формы)'; en='(автозакрытие печатной формы)'", КодЯзыкаТекущейПроверки);
		ЗавершитьЗамер(ТекстАвтозакрытие);
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed",,, ТекстАвтозакрытие);
		
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецЕсли;
	
	Форма = ОткрытоеОкно.Содержимое[0];
	
	Если Форма.Открыта()
		И (Форма.ИмяФормы = СтрШаблон("%1.%2", ПеревестиЗначение("ОбщаяФорма", Словарь), ПеревестиЗначение("РедактированиеТабличногоДокумента", Словарь))
			Или СтрНайти(Форма.ИмяФормы, ИдентификаторПечатнойФормы) > 0) Тогда
		ЗавершитьЗамер();
		ЗакрытьФорму(Форма, "РедактированиеМакета");
		ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "passed");
		
		ОткрытьСледующуюТестируемуюФорму();
	Иначе
		Если СчетчикПоискаОткрытойФормы > 50 Тогда
			Ожидание = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОткрытия) / 1000;
			ДобавитьВЛогВремениОткрытияФорм(Строка(Ожидание), Ложь);
			Если Ожидание > ДлительностьОткрытияФормы Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Время открытия формы %1 более %2 сек.'; en='Время открытия формы %1 более %2 сек.'", КодЯзыкаТекущейПроверки), ИмяОткрываемойФормы, ДлительностьОткрытияФормы);
				ЗаписатьОшибкуВремениОткрытияФормы("ПечатнаяФорма", ТекстОшибки, Ожидание);
			Иначе
				ЗаписатьРезультатТестированияФормыВФайлОтчет(ИмяОткрываемойФормы, "skipped");
			КонецЕсли;
			Если Ожидание > ДлительностьОткрытияФормы + 10 Тогда
				ЗаписатьОшибкуВремениОткрытияФормы("ПечатнаяФорма",
					НСтр("ru='Не удалось зафиксировать открытие печатной формы. Замер прекращен.';
						|en='Не удалось зафиксировать открытие печатной формы. Замер прекращен.'", КодЯзыкаТекущейПроверки),
					Ожидание,
					Ложь);
			КонецЕсли;
			ОтключитьОбработчикОжидания("ЗафиксироватьОткрытиеПечатнойФормы");
			ОткрытьСледующуюТестируемуюФорму();
		Иначе
			ПодключитьОбработчикОжидания("ЗафиксироватьОткрытиеПечатнойФормы", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМакетДляРедактирования(СтрокаДерева)
	
	Если СтрокаДерева.Параметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = СтрокаДерева.Параметры.Получить(0);
	ПутьКМакету   = ЭлементСписка.Значение;
	
	МассивПолногоИмени = СтрРазделить(ПутьКМакету, ".");
	
	ПараметрыФормыРедактирования = Новый Структура;
	ПараметрыФормыРедактирования.Вставить("ИмяОбъектаМетаданныхМакета", ПутьКМакету);
	ПараметрыФормыРедактирования.Вставить("ИмяДокумента", МассивПолногоИмени[МассивПолногоИмени.ВГраница()]);
	ПараметрыФормыРедактирования.Вставить("ТипМакета", "MXL");
	ПараметрыФормыРедактирования.Вставить("Редактирование", Истина);
	ПараметрыФормыРедактирования.Вставить("КодЯзыка", КодЯзыкаТекущейПроверки);
	
	ИмяФормыРедактированияТабличногоДокумента = СтрШаблон("%1.%2",
		ПеревестиЗначение("ОбщаяФорма", Словарь),
		ПеревестиЗначение("РедактированиеТабличногоДокумента", Словарь));
	ОткрытьФорму(ИмяФормыРедактированияТабличногоДокумента, ПараметрыФормыРедактирования, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПутьКМакетуПечатнойФормыДляПроверкиРедактированияМакета()
	
	ПутьКМакету = ПутьКМакетуПечатнойФормы();
	Если ПустаяСтрока(ПутьКМакету) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивВыбранныхФорм.ВГраница() < НомерТестируемойСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = МассивВыбранныхФорм[НомерТестируемойСтроки];
	
	Если ЭлементДерева.ТипФормы <> "РедактированиеМакета" Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева.Параметры.Очистить();
	ЭлементДерева.Параметры.Добавить(ПутьКМакету, ПеревестиЗначение("РедактированиеМакета", Словарь));
	ЭлементДерева.ПараметрыСтрокой = СтрШаблон("ПутьКМакету = %1", ПутьКМакету);
	ЭлементДерева.Наименование = ЭлементДерева.ПараметрыСтрокой;
	
КонецПроцедуры

&НаКлиенте
Функция ПутьКМакетуПечатнойФормы()
	
	ОткрытыеФормы = ПолучитьОкна();
	ОткрытыеФормыВГраница = ОткрытыеФормы.Количество() - 1;
	
	Для ИндексФормы = 0 По ОткрытыеФормыВГраница Цикл
		СодержимоеОкна = ОткрытыеФормы[ИндексФормы].Содержимое;
		
		Для Каждого ФормаОкна Из СодержимоеОкна Цикл
			СтруктураПроверки = Новый Структура("НастройкиПечатныхФорм", Неопределено);
			ЗаполнитьЗначенияСвойств(СтруктураПроверки, ФормаОкна);
			Если СтруктураПроверки.НастройкиПечатныхФорм = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НастройкиПечатныхФорм = ФормаОкна.НастройкиПечатныхФорм;
			Если НастройкиПечатныхФорм.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат НастройкиПечатныхФорм[0].ПутьКМакету;
		КонецЦикла;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ТестВводаНаОсновании

&НаКлиенте
Процедура ОткрытьФормыВводаНаОсновании(ОткрытаяТестируемаяФорма, Форма)
	
	СсылкаНаОбъект = Неопределено;
	
	ИмяОбъекта = ПеревестиЗначение("Объект", Словарь);
	
	Попытка
		СсылкаНаОбъект = Форма[ИмяОбъекта].Ссылка;
	Исключение
		ЗакрытьФорму(Форма);
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ЗакрытьФорму(Форма);
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецЕсли;
	
	МассивОбъектовДляВводаНаОсновании = ФормыДляВводаНаОсновании(Форма.ИмяФормы, СсылкаНаОбъект, Словарь);
	Если МассивОбъектовДляВводаНаОсновании.Количество() = 0 Тогда
		ЗакрытьФорму(Форма);
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецЕсли;
	
	ОткрытыеОкна.Добавить(Форма.Окно);
	
	Для Каждого СтрокаМассива Из МассивОбъектовДляВводаНаОсновании Цикл
		СтрокаМассива.Вставить("ИмяФормыОснования", Форма.ИмяФормы);
	КонецЦикла;
	
	НомерСтрокиТекущейФормыВводимойНаОсновании = 0;
	
	ОткрытьСледующуюФормуВводаНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСледующуюФормуВводаНаОсновании()
	
	Если НомерСтрокиТекущейФормыВводимойНаОсновании + 1 > МассивОбъектовДляВводаНаОсновании.Количество() Тогда
		ПараметрыФормы = МассивОбъектовДляВводаНаОсновании[НомерСтрокиТекущейФормыВводимойНаОсновании - 1];
		Форма = ПолучитьФормуОбъектаОснования(ПараметрыФормы.ИмяФормыОснования);
		Если Форма <> Неопределено Тогда
			ОткрытыеОкна.Удалить(ОткрытыеОкна.Найти(Форма.Окно));
			ЗакрытьФорму(Форма);
		КонецЕсли;
		ОткрытьСледующуюТестируемуюФорму();
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровОткрытияФормы = МассивОбъектовДляВводаНаОсновании[НомерСтрокиТекущейФормыВводимойНаОсновании];
	НомерСтрокиТекущейФормыВводимойНаОсновании = НомерСтрокиТекущейФормыВводимойНаОсновании + 1;
	
	НачатьОткрытиеФормыВводаНаОсновании(СтруктураПараметровОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытиеФормыВводаНаОсновании(СтруктураПараметровОткрытияФормы)
	
	СсылкаНаОбъект = СтруктураПараметровОткрытияФормы.СсылкаНаОбъект;
	ИмяФормыОснования = СтруктураПараметровОткрытияФормы.ИмяФормыОснования;
	ИмяОткрываемойФормы = СтруктураПараметровОткрытияФормы.ИмяФормы;
	ИмяПараметраФормы = СтруктураПараметровОткрытияФормы.ИмяПараметраФормы;
	Обработчик = СтруктураПараметровОткрытияФормы.Обработчик;
	
	Форма = ПолучитьФормуОбъектаОснования(ИмяФормыОснования);
	
	ПараметрыОткрытияФормы = ПараметрыФормы(ИмяПараметраФормы, СсылкаНаОбъект);
	
	НачалоОткрытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДобавитьВЛогВремениОткрытияФорм(ИмяОткрываемойФормы + ";" + СписокПараметровСтрокой(ПараметрыОткрытияФормы));
	
	Попытка
		Если ЗначениеЗаполнено(Обработчик) Тогда
			МассивПодстрок = СтрРазделить(Обработчик, ".");
			Если МассивПодстрок.Количество() = 1 Тогда
				КлиентскийМодуль = ПолучитьФорму(ИмяОткрываемойФормы, ПараметрыОткрытияФормы, Форма, Истина); //АПК:65 - форма используется ниже.
				ИмяПроцедуры = Обработчик;
			Иначе
				КлиентскийМодуль = ОбщийМодуль(МассивПодстрок[0]);
				ИмяПроцедуры = МассивПодстрок[1];
			КонецЕсли;
			Обработчик = Новый ОписаниеОповещения(ИмяПроцедуры, КлиентскийМодуль);
			ВыполнитьОбработкуОповещения(Обработчик, СсылкаНаОбъект);
			
		ИначеЕсли ЗначениеЗаполнено(ИмяОткрываемойФормы) Тогда
			ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытияФормы, Форма, Истина);
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ОтключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормыВводимойНаОсновании");
		
		ТипОшибки = ОшибкаОткрытияФормыНаОсновании();
		ТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		
		ДобавитьВЛогВремениОткрытияФорм(ТипОшибки + ":" + СтрЗаменить(ТекстОшибки, Символы.ПС, " "), Ложь);
		ЗаписатьОшибку("ВводНаОсновании", ИмяОткрываемойФормы, ТипОшибки, ИнформацияОбОшибке, ТекстОшибки, ТестируемаяФорма);
		ОткрытьСледующуюФормуВводаНаОсновании();
		
		Возврат;
		
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормыВводимойНаОсновании", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьОткрытиеФормыВводимойНаОсновании()
	
	СчетчикПоискаОткрытойФормы = СчетчикПоискаОткрытойФормы + 1;
	ОткрытоеОкно               = АктивноеОкно();
	
	Если ОткрытоеОкно = Неопределено 
		Или (ОткрытоеОкно.Содержимое.Количество() > 0 
		И ОткрытоеОкно.Содержимое[0] = ЭтаФорма) Тогда
			ЗавершитьЗамер(НСтр("ru='(автозакрытие формы)'; en='(автозакрытие формы)'", КодЯзыкаТекущейПроверки));
			ОткрытьСледующуюФормуВводаНаОсновании();
			Возврат;
	КонецЕсли;
	
	Форма = ОткрытоеОкно.Содержимое[0];
	
	МассивИмени = СтрРазделить(ИмяОткрываемойФормы, ".");
	МассивИмени.Удалить(МассивИмени.ВГраница());
	МассивИмени.Удалить(МассивИмени.ВГраница());
	
	ИмяОбъекта = СтрСоединить(МассивИмени, ".");
	
	Если Форма.Открыта() И СтрНачинаетсяС(Форма.ИмяФормы, ИмяОбъекта) Тогда
		ЗавершитьЗамер();
		
		ОткрытаяТестируемаяФорма = ДеревоФорм.НайтиПоИдентификатору(ТекущаяТестируемаяФорма);
		
		Если СтрНачинаетсяС(ОткрытаяТестируемаяФорма.ТипФормы, "ОсновнаяФормаОбъекта") Тогда
			
			Попытка
				Форма.Прочитать();
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				
				ЗаписатьОшибку("ВводНаОсновании", ИмяОткрываемойФормы, ОшибкаОбновленияФормы(), ИнформацияОбОшибке,,
					ОткрытаяТестируемаяФорма);
			КонецПопытки;
		КонецЕсли;
		
		ЗакрытьФорму(Форма, "ВводНаОсновании");
		ОткрытьСледующуюФормуВводаНаОсновании();
		
	Иначе
		
		Если СчетчикПоискаОткрытойФормы > 50 Тогда
			
			Ожидание = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОткрытия) / 1000;
			ДобавитьВЛогВремениОткрытияФорм(Строка(Ожидание), Ложь);
			
			Если Ожидание > ДлительностьОткрытияФормы Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Время открытия формы %1 более %2 сек.'; en='Время открытия формы %1 более %2 сек.'", КодЯзыкаТекущейПроверки), ИмяОткрываемойФормы,
					ДлительностьОткрытияФормы);
				ЗаписатьОшибкуВремениОткрытияФормы("ВводНаОсновании", ТекстОшибки, Ожидание);
			КонецЕсли;
			
			Если Ожидание > ДлительностьОткрытияФормы + 10 Тогда
				ЗаписатьОшибкуВремениОткрытияФормы("ВводНаОсновании",
					НСтр("ru='Не удалось зафиксировать открытие формы. Замер прекращен.';
						|en='Не удалось зафиксировать открытие формы. Замер прекращен.'", КодЯзыкаТекущейПроверки),
					Ожидание);
			КонецЕсли;
			
			ОтключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормыВводимойНаОсновании");
			ОткрытьСледующуюФормуВводаНаОсновании();
			
		Иначе
			ПодключитьОбработчикОжидания("ЗафиксироватьОткрытиеФормыВводимойНаОсновании", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФормыДляВводаНаОсновании(ИмяОсновнойФормы, СсылкаНаОбъект, Словарь)
	
	ТаблицаОбъектовДляВводаНаОсновании = Новый ТаблицаЗначений;
	ТаблицаОбъектовДляВводаНаОсновании.Колонки.Добавить("ИмяФормы");
	ТаблицаОбъектовДляВводаНаОсновании.Колонки.Добавить("ИмяПараметраФормы");
	ТаблицаОбъектовДляВводаНаОсновании.Колонки.Добавить("Обработчик");
	ТаблицаОбъектовДляВводаНаОсновании.Колонки.Добавить("СсылкаНаОбъект");
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	Попытка
		КэшФормы = КэшФормы(ИмяОсновнойФормы, ПолноеИмяОбъектаМетаданных, Неопределено, Словарь);
	Исключение
		Возврат Новый Массив;
	КонецПопытки;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ПеревестиЗначение("Вид", Словарь), ПеревестиЗначение("СозданиеНаОсновании", Словарь));
	
	МассивСтрок = КэшФормы[ПеревестиЗначение("Команды", Словарь)].НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаКоманды Из МассивСтрок Цикл
		
		НоваяСтрока = ТаблицаОбъектовДляВводаНаОсновании.Добавить();
		НоваяСтрока.ИмяФормы = СтрокаКоманды[ПеревестиЗначение("Менеджер", Словарь)] + "." + СтрокаКоманды[ПеревестиЗначение("ИмяФормы", Словарь)];
		НоваяСтрока.ИмяПараметраФормы = СтрокаКоманды[ПеревестиЗначение("ИмяПараметраФормы", Словарь)];
		НоваяСтрока.Обработчик = СтрокаКоманды[ПеревестиЗначение("Обработчик", Словарь)];
		НоваяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
		
	КонецЦикла;
	
	СписокПоМетаданным = СписокВводятсяНаОснованииДокументаНаСервере(ПолноеИмяОбъектаМетаданных);
	Для Каждого ЭлементСписка Из СписокПоМетаданным Цикл
		
		ИмяВводимойНаОснованииФормы = ЭлементСписка.Значение + ".ФормаОбъекта";
		Если ТаблицаОбъектовДляВводаНаОсновании.Найти(ИмяВводимойНаОснованииФормы, "ИмяФормы") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОбъектовДляВводаНаОсновании.Добавить();
		НоваяСтрока.ИмяФормы = ИмяВводимойНаОснованииФормы;
		НоваяСтрока.ИмяПараметраФормы = "Основание";
		НоваяСтрока.Обработчик = "";
		
	КонецЦикла;
	
	МассивОбъектовДляВводаНаОсновании = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаОбъектовДляВводаНаОсновании Цикл
		СтруктураПараметров = Новый Структура;
		Для Каждого Колонка Из ТаблицаОбъектовДляВводаНаОсновании.Колонки Цикл
			СтруктураПараметров.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		
		МассивОбъектовДляВводаНаОсновании.Добавить(СтруктураПараметров);
	КонецЦикла;
	
	Возврат МассивОбъектовДляВводаНаОсновании;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВводятсяНаОснованииДокументаНаСервере(ПолноеИмяОбъектаМетаданных)
	
	ЯвляетсяОснованием = Новый СписокЗначений;
	
	ДокументОснования = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	Для Каждого ДокументКоллекции Из Метаданные.Документы Цикл
		ВводитсяНаОсновании = ДокументКоллекции.ВводитсяНаОсновании;
		Для Каждого ТекущийДокумент Из ВводитсяНаОсновании Цикл
			Если ТекущийДокумент = ДокументОснования Тогда
				ПравоДобавления = ПравоДоступа("Добавление", ДокументКоллекции);
				Если ПравоДобавления Тогда
					ЯвляетсяОснованием.Добавить(ДокументКоллекции.ПолноеИмя());
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЯвляетсяОснованием.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат ЯвляетсяОснованием;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыФормы(ИмяПараметраФормы, ПараметрКоманды)
	
	Результат = Новый Структура;
	
	Если ПустаяСтрока(ИмяПараметраФормы) Тогда
		Результат.Вставить("ПараметрКоманды", ПараметрКоманды);
	Иначе
		МассивИмен = СтрРазделить(ИмяПараметраФормы, ".", Ложь);
		Узел = Результат;
		ВГраница = МассивИмен.ВГраница();
		Для Индекс = 0 По ВГраница-1 Цикл
			Имя = СокрЛП(МассивИмен[Индекс]);
			Если (Не Узел.Свойство(Имя)) Или (ТипЗнч(Узел[Имя]) <> Тип("Структура")) Тогда
				Узел.Вставить(Имя, Новый Структура);
			КонецЕсли;
			Узел = Узел[Имя];
		КонецЦикла;
		Узел.Вставить(МассивИмен[ВГраница], ПараметрКоманды);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФормуОбъектаОснования(ИмяФормыОснования)
	
	ОткрытоеОкно = АктивноеОкно();
	Форма = ОткрытоеОкно.Содержимое[0];
	Если Форма.Открыта() И Форма.ИмяФормы = ИмяФормыОснования Тогда
		Возврат Форма;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область НегативныеСценарии

&НаКлиенте
Функция ПолучитьНегативныйСценарий(ИмяФормы, Действие)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Найден", Ложь);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяФормы", ИмяФормы);
	СтруктураПоиска.Вставить("Действие", Действие);
	
	МассивСтрок = ТаблицаНегативныхСценариев.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Найден = Истина;
	СтруктураВозврата.ТекстОшибки = МассивСтрок[0].ТекстОшибки;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ВызовыМетодовБСП

&НаКлиенте
Функция ОбщийМодульКлиент(Имя)
	
	Модуль = Вычислить(Имя);
	Возврат Модуль;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбщийМодуль(Имя)
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		// АПК:486-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
		УстановитьБезопасныйРежим(Истина);
		Модуль = Вычислить(Имя);
		// АПК:486-вкл
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат СерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Общий модуль ""%1"" не найден.'; en='Общий модуль ""%1"" не найден.'", Метаданные.ОсновнойЯзык.КодЯзыка), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

&НаСервереБезКонтекста
Функция СерверныйМодульМенеджера(Имя)
	
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Объект метаданных ""%1"" не найден,
			           |либо для него не поддерживается получение модуля менеджера.'; en = 'Объект метаданных ""%1"" не найден,
			           |либо для него не поддерживается получение модуля менеджера.'", Метаданные.ОсновнойЯзык.КодЯзыка),
			Имя);
	КонецЕсли;
	
	// АПК:486-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
	УстановитьБезопасныйРежим(Истина);
	Модуль = Вычислить(Имя);
	// АПК:486-вкл
	
	Возврат Модуль;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, Словарь, ВыбратьРазрешенные = Ложь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОбщегоНазначения", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.ObjectAttributeValue(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	Иначе
		Возврат ОбщийМодульБСП.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовВариантаОтчета(Ссылка, Словарь)
	
	СтруктураВозврата = Новый Структура("Наименование, Отчет, ТипОтчета, КлючВарианта, Автор");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Наименование КАК Наименование,
	|	ВариантыОтчетов." + ПеревестиЗначение("Отчет", Словарь) + " КАК Отчет,
	|	ВариантыОтчетов." + ПеревестиЗначение("ТипОтчета", Словарь) + " КАК ТипОтчета,
	|	ВариантыОтчетов." + ПеревестиЗначение("КлючВарианта", Словарь) + " КАК КлючВарианта,
	|	ВариантыОтчетов." + ПеревестиЗначение("Автор", Словарь) + " КАК Автор
	|ИЗ
	|	Справочник." + ПеревестиЗначение("ВариантыОтчетов", Словарь) + " КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	СтруктураВозврата.Insert("Description", "");
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция КомандыПечатиОбъекта(ОбъектМетаданных, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("УправлениеПечатью", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.ObjectPrintCommands(ОбъектМетаданных);
	Иначе
		Возврат ОбщийМодульБСП.КомандыПечатиОбъекта(ОбъектМетаданных);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОткрытия(ВариантСсылка, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ВариантыОтчетов", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.OpeningParameters(ВариантСсылка);
	Иначе
		Возврат ОбщийМодульБСП.ПараметрыОткрытия(ВариантСсылка);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоКонстантаИсключение(ИмяКонстанты, Словарь)
	
	Если СтрНачинаетсяС(ИмяКонстанты, ВРег(ПеревестиЗначение("ХранитьФайлыВТомахНаДиске",                     Словарь)))
		Или СтрНачинаетсяС(ИмяКонстанты, ВРег(ПеревестиЗначение("ОтложенноеОбновлениеЗавершеноУспешно",        Словарь))) // нельзя сбрасывать статус обновления
		Или СтрНачинаетсяС(ИмяКонстанты, ВРег(ПеревестиЗначение("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно", Словарь))) // нельзя сбрасывать статус обновления
		Или СтрНачинаетсяС(ИмяКонстанты, ВРег(ПеревестиЗначение("ИспользоватьРазделениеПоОбластямДанных",        Словарь)))
		Или СтрНачинаетсяС(ИмяКонстанты, ВРег(ПеревестиЗначение("НеИспользоватьРазделениеПоОбластямДанных",      Словарь)))
		Или СтрНачинаетсяС(ИмяКонстанты, ВРег(ПеревестиЗначение("ОграничиватьДоступНаУровнеЗаписейУниверсально", Словарь))) // RLS включаем/выключаем ниже.
		Или СтрНачинаетсяС(ИмяКонстанты, ВРег(ПеревестиЗначение("ОграничиватьДоступНаУровнеЗаписей",             Словарь))) // RLS включаем/выключаем ниже.
		Или СтрНачинаетсяС(ИмяКонстанты, ВРег(ПеревестиЗначение("ЭтоАвтономноеРабочееМесто",                     Словарь))) Тогда
			Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("УправлениеДоступомСлужебный", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.SessionParametersSetting(ИмяПараметра, УстановленныеПараметры);
	Иначе
		ОбщийМодульБСП.УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновлениеДоступаНаУровнеЗаписей(Словарь, ОбновитьВсе = Ложь, ВызыватьИсключениеВместоРегистрацииОшибки = Ложь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("УправлениеДоступомСлужебный", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.AccessUpdateOnRecordsLevel(ОбновитьВсе, ВызыватьИсключениеВместоРегистрацииОшибки);
	Иначе
		ОбщийМодульБСП.ОбновлениеДоступаНаУровнеЗаписей(ОбновитьВсе, ВызыватьИсключениеВместоРегистрацииОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнениеДанныхДляОграниченияДоступа(Словарь, КоличествоДанных = 0, ТолькоКэшРеквизиты = Ложь,
	ЕстьИзменения = Неопределено)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("УправлениеДоступомСлужебный", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.DataFillingForAccessRestriction(КоличествоДанных, ТолькоКэшРеквизиты, ЕстьИзменения);
	Иначе
		ОбщийМодульБСП.ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных, ТолькоКэшРеквизиты, ЕстьИзменения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпцииИнтерфейса(Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("СтандартныеПодсистемыПовтИсп", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.InterfaceOptions();
	Иначе
		Возврат ОбщийМодульБСП.ОпцииИнтерфейса();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазделениеВключено(Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОбщегоНазначения", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.DataSeparationEnabled();
	Иначе
		Возврат ОбщийМодульБСП.РазделениеВключено();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполняетсяОбновлениеИнформационнойБазы(Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОбновлениеИнформационнойБазы", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.InfobaseUpdateInProgress();
	Иначе
		Возврат ОбщийМодульБСП.ВыполняетсяОбновлениеИнформационнойБазы();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СкрытьРабочийСтолПриНачалеРаботыСистемы(Словарь, Скрыть = Истина)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("СтандартныеПодсистемыВызовСервера", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.HideDesktopOnStart(Ложь);
	Иначе
		ОбщийМодульБСП.СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПустуюФормуНаПустойРабочийСтол(Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("СтандартныеПодсистемыСервер", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.SetBlankFormOnBlankHomePage();
	Иначе
		ОбщийМодульБСП.УстановитьПустуюФормуНаПустойРабочийСтол();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетОбъект(Идентификатор, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОтчетыСервер", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.ReportObject(Идентификатор);
	Иначе
		Возврат ОбщийМодульБСП.ОтчетОбъект(Идентификатор);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиФормыОтчета(ОтчетСсылка, КлючВарианта, ОтчетОбъект, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ВариантыОтчетов", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.ReportFormSettings(ОтчетСсылка, КлючВарианта, ОтчетОбъект);
	Иначе
		Возврат ОбщийМодульБСП.НастройкиФормыОтчета(ОтчетСсылка, КлючВарианта, ОтчетОбъект);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция КэшФормы(Знач ИмяФормы, Знач ИсточникиЧерезЗапятую, Знач ЭтоФормаОбъекта, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ПодключаемыеКомандыПовтИсп", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.FormCache(ИмяФормы, ИсточникиЧерезЗапятую, ЭтоФормаОбъекта);
	Иначе
		Возврат ОбщийМодульБСП.КэшФормы(ИмяФормы, ИсточникиЧерезЗапятую, ЭтоФормаОбъекта);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция АвторизованныйПользователь(Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("Пользователи", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.AuthorizedUser();
	Иначе
		Возврат ОбщийМодульБСП.АвторизованныйПользователь();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОтчета(Знач ФормаВладелец, Знач Вариант, Словарь, Знач ДополнительныеПараметры = Неопределено)
	
	ОбщийМодульБСП = ОбщийМодульКлиент(ПеревестиЗначение("ВариантыОтчетовКлиент", Словарь));
	
	ТекстЛога = НСтр("ru = 'Открываем форму отчета: %1,
	|Тип параметра ФормаВладелец: %2
	|Вариант %3
	|Тип варианта: %4
	|Доп. параметры: %5'; en = 'Открываем форму отчета: %1,
	|Тип параметра ФормаВладелец: %2
	|Вариант %3
	|Тип варианта: %4
	|Доп. параметры: %5'");
	
	ОписаниеДополнительныеПараметры = "";
	Если ДополнительныеПараметры <> Неопределено Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметры Цикл
			ОписаниеДополнительныеПараметры = ОписаниеДополнительныеПараметры + ДополнительныйПараметр.Ключ
				+ ":" + ДополнительныйПараметр.Значение + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьВПротоколТестирования(СтрШаблон(ТекстЛога,
		Строка(ФормаВладелец), Строка(ТипЗнч(ФормаВладелец)),
		Строка(Вариант), Строка(ТипЗнч(Вариант)), ОписаниеДополнительныеПараметры));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.OpenReportForm(ФормаВладелец, Вариант, ДополнительныеПараметры);
	Иначе
		ОбщийМодульБСП.ОткрытьФормуОтчета(ФормаВладелец, Вариант, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетБезОткрытияФормы(СтрокаДерева)
	
	МассивПолногоИмениОтчета = СтрРазделить(СтрокаДерева.ПолноеИмя, ".");
	Пока МассивПолногоИмениОтчета.Количество() > 2 Цикл
		МассивПолногоИмениОтчета.Удалить(МассивПолногоИмениОтчета.ВГраница());
	КонецЦикла;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ВариантОтчета", СтрокаДерева.ВариантОтчета);
	ПараметрыОтчета.Вставить("ИмяОтчета", СтрСоединить(МассивПолногоИмениОтчета, "."));
	
	// Заполним параметры отчета, если они заданы в файле настроек.
	Для Каждого ПараметрОтчета Из СтрокаДерева.Параметры Цикл
		Если ПараметрОтчета.Представление = "ПараметрыДанных" Тогда
			ПараметрыОтчета.Вставить("ПараметрыДанных", ПараметрОтчета.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = РезультатФормированияОтчетаБезОткрытияФормы(ПараметрыОтчета, Словарь);
	
	Если Не Результат.Успех И Не ЭтоОжидаемаяОшибка(СтрокаДерева, Результат.ТекстОшибки) Тогда
		Результат.ТекстОшибки = СтрШаблон("%1: %2
			|%3",
			НСтр("ru = 'Вариант отчета'; en = 'Вариант отчета'"),
			СтрокаДерева.ВариантОтчета,
			Результат.ТекстОшибки);
		ЗаписатьОшибку("ФормированиеОтчетаБезФормы", СтрокаДерева.ПолноеИмя, ОшибкаФормированияОтчетаБезФормы(), Результат.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатФормированияОтчетаБезОткрытияФормы(ПараметрыОтчетаКлиент, Словарь)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить(ПеревестиЗначение("СсылкаОтчета", Словарь),   ПараметрыОтчетаКлиент.ВариантОтчета[ПеревестиЗначение("Отчет", Словарь)]);
	ПараметрыОтчета.Вставить(ПеревестиЗначение("СсылкаВарианта", Словарь), ПараметрыОтчетаКлиент.ВариантОтчета);
	ПараметрыОтчета.Вставить(ПеревестиЗначение("КлючВарианта", Словарь),   ПараметрыОтчетаКлиент.ВариантОтчета[ПеревестиЗначение("КлючВарианта", Словарь)]);
	
	// Заполним параметры отчета, если они указаны в файле настроек.
	Если ПараметрыОтчетаКлиент.Свойство("ПараметрыДанных") Тогда
		ОтчетОбъект = ОтчетОбъект(ПараметрыОтчетаКлиент.ИмяОтчета, Словарь);
		
		КоллекцияПараметров = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
		Для Каждого ЭлементСтруктуры Из ПараметрыОтчетаКлиент.ПараметрыДанных Цикл
			НайденныйПараметр = КоллекцияПараметров.Найти(ЭлементСтруктуры.Ключ);
			Если НайденныйПараметр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныйПараметр.Значение = ЭлементСтруктуры.Значение;
		КонецЦикла;
		
		ПараметрыОтчета.Вставить("Объект", ОтчетОбъект);
	КонецЕсли;
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ВариантыОтчетов", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Результат = ОбщийМодульБСП.GenerateReport(ПараметрыОтчета, Истина, Истина);
	Иначе
		Результат = ОбщийМодульБСП.СформироватьОтчет(ПараметрыОтчета, Истина, Истина);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Результат[ПеревестиЗначение("Успех", Словарь)]);
	СтруктураВозврата.Вставить("ТекстОшибки", Результат[ПеревестиЗначение("ТекстОшибки", Словарь)]);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы, Словарь)
	
	ОбщийМодульБСП = ОбщийМодульКлиент(ПеревестиЗначение("ОбщегоНазначенияКлиент", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.SubsystemExists(ПолноеИмяПодсистемы);
	Иначе
		Возврат ОбщийМодульБСП.ПодсистемаСуществует(ПолноеИмяПодсистемы);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ВладелецФормы, Словарь,
	ПараметрыПечати = Неопределено)
	
	ОбщийМодульБСП = ОбщийМодульКлиент(ПеревестиЗначение("УправлениеПечатьюКлиент", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.ExecutePrintCommand(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ВладелецФормы, ПараметрыПечати);
	Иначе
		ОбщийМодульБСП.ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ВладелецФормы, ПараметрыПечати);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьРазделениеСеанса(Словарь, Знач Использование = Неопределено, Знач ОбластьДанных = Неопределено)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("РаботаВМоделиСервиса", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.SetSessionSeparation(Использование, ОбластьДанных);
	Иначе
		ОбщийМодульБСП.УстановитьРазделениеСеанса(Использование, ОбластьДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКлючЗаписиРегистраСведенийВспомогательныхДанных(Знач Менеджер, Знач ЗначенияКлюча, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("РаботаВМоделиСервиса", Словарь));
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.CreateAuxiliaryDataInformationRegisterRecordKey(Менеджер, ЗначенияКлюча);
	Иначе
		Возврат ОбщийМодульБСП.СоздатьКлючЗаписиРегистраСведенийВспомогательныхДанных(Менеджер, ЗначенияКлюча);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазделительВспомогательныхДанных(Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("РаботаВМоделиСервиса", Словарь));
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.AuxiliaryDataSeparator();
	Иначе
		Возврат ОбщийМодульБСП.РазделительВспомогательныхДанных();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция МаксимальныйПорядковыйНомерНеразделенныхПользователей(Словарь)
	
	МодульМенеджера = РегистрыСведений[ПеревестиЗначение("НеразделенныеПользователи", Словарь)];
	
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат МодульМенеджера.MaxSequenceNumber();
	Иначе
		Возврат МодульМенеджера.МаксимальныйПорядковыйНомер();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхПоИдентификатору(Идентификатор, Словарь, ВызыватьИсключение = Истина)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОбщегоНазначения", Словарь));
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.MetadataObjectByID(Идентификатор, ВызыватьИсключение);
	Иначе
		Возврат ОбщийМодульБСП.ОбъектМетаданныхПоИдентификатору(Идентификатор, ВызыватьИсключение);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхДоступенПоФункциональнымОпциям(Знач ОбъектМетаданных, Словарь)
	
	ОбщийМодульБСП = ОбщийМодуль(ПеревестиЗначение("ОбщегоНазначения", Словарь));
	Если ЭтоМеждународнаяБСП() Тогда
		Возврат ОбщийМодульБСП.MetadataObjectAvailableByFunctionalOptions(ОбъектМетаданных);
	Иначе
		Возврат ОбщийМодульБСП.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьНазначаемуюКомандуПечати(ВыполняемаяКоманда, Форма, Словарь)
	
	ОбщийМодульБСП = ОбщийМодульКлиент(ПеревестиЗначение("ДополнительныеОтчетыИОбработкиКлиент", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.ExecuteAssignablePrintCommand(ВыполняемаяКоманда, Форма);
	Иначе
		ОбщийМодульБСП.ВыполнитьНазначаемуюКомандуПечати(ВыполняемаяКоманда, Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьНапоминанияПользователя(Словарь)
	
	Если Словарь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийМодульБСП = ОбщийМодульКлиент(ПеревестиЗначение("НапоминанияПользователяКлиент", Словарь));
	
	Если ЭтоМеждународнаяБСП() Тогда
		ОбщийМодульБСП.Disable();
	Иначе
		ОбщийМодульБСП.Выключить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьСловарь()
	
	Словарь = Новый Соответствие;
	
	МакетСловарь = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Словарь");
	Для НомерСтроки = 1 По МакетСловарь.КоличествоСтрок()  Цикл
		
		СтрокаСловаря = МакетСловарь.ПолучитьСтроку(НомерСтроки);
		СловоПеревод = СтрРазделить(СтрокаСловаря, "=");
		Если СловоПеревод.Количество() = 2 Тогда
			Словарь.Вставить(ВРег(СокрЛП(СловоПеревод[0])), СокрЛП(СловоПеревод[1]));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Словарь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПеревестиЗначение(Знач Значение, Словарь)
	
	Если Словарь = Неопределено Или Не ЭтоМеждународнаяБСП() Тогда
		Возврат Значение;
	КонецЕсли;
	
	Перевод = Словарь[ВРег(Значение)];
	Если Перевод = Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат Перевод;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМеждународнаяБСП()
	
	Возврат (Метаданные.ОсновнойЯзык.КодЯзыка = "en");
	
КонецФункции

#КонецОбласти

#Область ПроверкаГруппировокДинамическихСписков

&НаКлиенте
Процедура ПроверитьГруппировкуДинамическихСписковФормы(ПроверяемаяФорма, ИмяПроверяемойФормы)
	
	// Если каталог выгрузки не указан - значит, выгрузка не выполнена.
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуФормы = ПутьКФайлуФормы(ИмяПроверяемойФормы);
	
	ФайлФормы = Новый Файл(ПутьКФайлуФормы);
	Если Не ФайлФормы.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОДинамическихСпискахФормы = СведенияОбоВсехДинамическихСпискахПроверяемойФормы(ПутьКФайлуФормы);
	
	Для Каждого СведенияОДинамическомСпискеФормы Из СведенияОДинамическихСпискахФормы Цикл
		НайденаОшибка = ПроверитьГруппировкуДинамическогоСписка(ПроверяемаяФорма, СведенияОДинамическомСпискеФормы);
		Если НайденаОшибка Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПутьКФайлуФормы(ИмяПроверяемойФормы)
	
	ПутьКФайлуФормы = "";
	
	ИмяФормыПодготовленное = ИмяПроверяемойФормы;
	СтрокаЗамены = СтрШаблон(".%1.", ПеревестиЗначение("Форма", Словарь));
	Пока СтрНайти(ИмяФормыПодготовленное, СтрокаЗамены) > 0 Цикл
		ИмяФормыПодготовленное = СтрЗаменить(ИмяФормыПодготовленное, ".Форма.", ".");
	КонецЦикла;
	
	ЧастиИмени = СтрРазделить(ИмяФормыПодготовленное, ".");
	
	// Общие формы.
	Если ЧастиИмени.Количество() = 2 Тогда
		ШаблонПутиКФайлуФормы = СтрЗаменить("%1CommonForms\%2\Ext\Form.xml", "\", ПолучитьРазделительПути());
		
		ПутьКФайлуФормы = СтрШаблон(ШаблонПутиКФайлуФормы,
			КаталогВыгрузки,
			ЧастиИмени[1]);
		
	Иначе
		ШаблонПутиКФайлуФормы = СтрЗаменить("%1%2\%3\Forms\%4\Ext\Form.xml", "\", ПолучитьРазделительПути());
		
		ПутьКФайлуФормы = СтрШаблон(ШаблонПутиКФайлуФормы,
			КаталогВыгрузки,
			ИмяВидаОбъектаВВыгрузкеФайлов[ЧастиИмени[0]],
			ЧастиИмени[1],
			ЧастиИмени[2]);
	КонецЕсли;
	
	Возврат ПутьКФайлуФормы;
	
КонецФункции

&НаСервере
Функция СведенияОбоВсехДинамическихСпискахПроверяемойФормы(ПутьКФайлуФормы)
	
	МассивРезультат = Новый Массив;
	
	ДокументDOM = ДокументDOM(ПутьКФайлуФормы);
	
	ВыражениеXPathДляЭлементаФормы = "/xmlns:Form/xmlns:ChildItems/xmlns:Table";
	
	РезультатXPath = ВычислитьВыражениеXPath(ВыражениеXPathДляЭлементаФормы, ДокументDOM);
	ЭлементФормыДинамическийСписок = РезультатXPath.ПолучитьСледующий();
	
	Пока ЭлементФормыДинамическийСписок <> Неопределено Цикл
		Сведения = СведенияОДинамическомСпискеПроверяемойФормы(ДокументDOM, ЭлементФормыДинамическийСписок);
		
		Если Сведения <> Неопределено Тогда
			МассивРезультат.Добавить(Сведения);
		КонецЕсли;
		
		// Ищем следующий динамический список на форме.
		ЭлементФормыДинамическийСписок = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

&НаСервере
Функция СведенияОДинамическомСпискеПроверяемойФормы(ДокументDOM, ЭлементФормыДинамическийСписок)
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ИмяЭлементаФормы",  "");
	СтруктураРезультат.Вставить("ИмяРеквизитаФормы", "");
	
	// Ищем в атрибутах узла DOM имя элемента формы.
	Для Каждого Атрибут Из ЭлементФормыДинамическийСписок.Атрибуты Цикл
		Если СтрСравнить(Атрибут.Имя, "name") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураРезультат.ИмяЭлементаФормы = Атрибут.Значение;
		Прервать;
	КонецЦикла;
	
	Если ПустаяСтрока(СтруктураРезультат.ИмяЭлементаФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Ищем у элемента формы значение свойства ПутьКДанным.
	ШаблонВыраженияXPath = "/xmlns:Form/xmlns:ChildItems/xmlns:Table[@name='%1']/xmlns:DataPath";
	ВыражениеXPath = СтрШаблон(ШаблонВыраженияXPath, СтруктураРезультат.ИмяЭлементаФормы);
	УзелDOM = ВычислитьВыражениеXPath(ВыражениеXPath, ДокументDOM).ПолучитьСледующий();
	
	ПутьКДаннымЭлементаФормы = ТекстУзлаDOM(УзелDOM);
	Если ПутьКДаннымЭлементаФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультат.ИмяРеквизитаФормы = ПутьКДаннымЭлементаФормы;
	
	// Ищем тип реквизита формы.
	ШаблонВыраженияXPath = "/xmlns:Form/xmlns:Attributes/xmlns:Attribute[@name='%1']/xmlns:Type/v8:Type";
	ВыражениеXPath = СтрШаблон(ШаблонВыраженияXPath, СтруктураРезультат.ИмяЭлементаФормы);
	УзелDOM = ВычислитьВыражениеXPath(ВыражениеXPath, ДокументDOM).ПолучитьСледующий();
	
	ТипРеквизитаФормы = ТекстУзлаDOM(УзелDOM);
	Если ТипРеквизитаФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивТиповДинамическийСписок = Новый Массив;
	МассивТиповДинамическийСписок.Добавить("cfg:DynamicList");
	МассивТиповДинамическийСписок.Добавить("dl:DynamicList");
	
	// Если реквизит, связанный с таблицей формы не динамический список, то выходим.
	Если Не СтрНайтиПоМассиву(ТипРеквизитаФормы, МассивТиповДинамическийСписок).Успешно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьГруппировкуДинамическогоСписка(ПроверяемаяФорма, СведенияОДинамическомСпискеФормы)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	ИмяРеквизитаФормы = СведенияОДинамическомСпискеФормы.ИмяРеквизитаФормы;
	ИмяЭлементаФормы  = СведенияОДинамическомСпискеФормы.ИмяЭлементаФормы;
	
	ДинамическийСписок            = ПроверяемаяФорма[ИмяРеквизитаФормы];
	ДоступныеПоляПолейГруппировок = ДинамическийСписок.Группировка.ДоступныеПоляПолейГруппировок.Элементы;
	
	Для Каждого ДоступноеПолеГруппировки Из ДоступныеПоляПолейГруппировок Цикл
		ДинамическийСписок.Группировка.Элементы.Очистить();
		
		ПолеГруппировки = ДинамическийСписок.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = ДоступноеПолеГруппировки.Поле;
		
		ПроверяемаяФорма.Элементы[ИмяЭлементаФормы].Обновить();
		
		ТекстОшибки = ТекстОшибкиГруппировкиДинамическогоСпискаВЖурналеРегистрации(Словарь);
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТипПроверки = "ГруппировкаДинамическогоСписка";
		ТипОшибки   = ОшибкаДобавленияГруппировкиДинамическогоСписка();
		
		// Регистрируем ошибку.
		ЗаписатьОшибку(ТипПроверки, ПроверяемаяФорма.ИмяФормы, ТипОшибки, ТекстОшибки);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ТекстОшибкиГруппировкиДинамическогоСпискаВЖурналеРегистрации(Словарь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", ТекущаяДата() - 2);
	Отбор.Вставить("Уровень",    УровеньЖурналаРегистрации.Ошибка);
	Отбор.Вставить("Событие",    "Ошибка возникшая в ходе дымового тестирования");
	
	ТаблицаЖР = ТаблицаЖурналаРегистрации(Отбор);
	Если ТаблицаЖР.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяКолонкиКомментарий = ПеревестиЗначение("Комментарий", Словарь);
	
	Возврат ТаблицаЖР[0][ИмяКолонкиКомментарий];
	
КонецФункции

#КонецОбласти

#Область РаботаСВыгрузкойКонфигурацииВФайлыXML

&НаКлиенте
Процедура ВыгрузитьКонфигурациюВXML()
	
	// Выгрузка конфигурации в файлы возможна только под полноправным пользователем.
	Если Не ЭтоПолноправныйПользователь(Словарь) Тогда
		Возврат;
	КонецЕсли;
	
	// Выгрузка конфигурации в файлы возможна только при доступном конфигураторе.
	Если ОткрытКонфигуратор() Тогда
		КаталогВыгрузки = "";
		
		БлокСОписаниемОшибки = НСтр("ru = 'Для выгрузки конфигурации в файлы XML необходимо закрыть конфигуратор.
			|Проверка добавления группировок динамических списков не будет выполнена.';
			|en='Для выгрузки конфигурации в файлы XML необходимо закрыть конфигуратор.
			|Проверка добавления группировок динамических списков не будет выполнена.'", КодЯзыкаТекущейПроверки);
		
		ЗаписатьРезультатТестированияФормыВФайлОтчет("ВыгрузкаКонфигурацииВXML", "failed", "ОткрытКонфигуратор", БлокСОписаниемОшибки);
		ДобавитьВЛогВремениОткрытияФорм(БлокСОписаниемОшибки);
		
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки = КаталогВыгрузкиКонфигурации();
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		БлокСОписаниемОшибки = НСтр("ru = 'Ошибка выгрузки конфигурации в файлы XML.
			|Проверка добавления группировок динамических списков не будет выполнена.';
			|en='Ошибка выгрузки конфигурации в файлы XML.
			|Проверка добавления группировок динамических списков не будет выполнена.'", КодЯзыкаТекущейПроверки);
		
		ЗаписатьРезультатТестированияФормыВФайлОтчет("ВыгрузкаКонфигурацииВXML", "failed", "ОткрытКонфигуратор", БлокСОписаниемОшибки);
		ДобавитьВЛогВремениОткрытияФорм(БлокСОписаниемОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтрокаЗапускаИБ()
	
	СтрокаСоединения      = СтрокаСоединенияИнформационнойБазы();
	ЧастиСтрокиСоединения = СтрРазделить(СтрокаСоединения, ";", Ложь);
	
	// Файловая база. Разбираем строку вида: 'File="D:\ПапкаБазы";'.
	Если ЧастиСтрокиСоединения.Количество() = 1 Тогда
		ЧастиСтрокиСоединенияФайловойБазы = СтрРазделить(ЧастиСтрокиСоединения[0], "=", Ложь);
		Возврат "/F " + ЧастиСтрокиСоединенияФайловойБазы[1];
	КонецЕсли;
	
	// Серверная база. Разбираем строку вида: 'Srvr="ИмяСервера";Ref="ИмяБазы";'.
	ЧастиСтрокиСервера = СтрРазделить(ЧастиСтрокиСоединения[0], "=");
	ЧастиСтрокиИмениИБ = СтрРазделить(ЧастиСтрокиСоединения[1], "=");
	
	ИмяСервера = СтрЗаменить(ЧастиСтрокиСервера[1], """", "");
	ИмяБазы    = СтрЗаменить(ЧастиСтрокиИмениИБ[1], """", "");
	
	СтрокаРезультат = СтрШаблон("/S ""%1/%2""", ИмяСервера, ИмяБазы);
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Возвращается имя файла 1cv8 с расширением, имя зависит от операционной системы.
//
&НаСервере
Функция ПолучитьИмяФайла1cv8()
	
	ИмяФайла = "1cv8";
	Если ЭтоWindows() Тогда
		ИмяФайла = ИмяФайла + ".exe";
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

// Возвращает Истина, если текущий сеанс выполняется на компьютере, работающем под управлением ОС Windows.
//
// Возвращаемое значение:
//  Булево - Истина, если компьютер работает под управлением ОС Windows.
//
&НаСервере
Функция ЭтоWindows()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86)
		ИЛИ (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
КонецФункции

&НаСервере
Функция ОткрытКонфигуратор()
	
	Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если ВРег(Сеанс.ИмяПриложения) <> ВРег("Designer") Тогда // Конфигуратор
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ПостроительDOM = Новый ПостроительDOM;
	
	Если ТипЗнч(ПутьКФайлу) = Тип("Строка") Тогда
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	Иначе
		ЧтениеXML.ОткрытьПоток(ПутьКФайлу);
	КонецЕсли;
	
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

&НаСервере
Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь = Неопределено)
	
	Если Разыменователь = Неопределено Тогда
		Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	КонецЕсли;
	Возврат ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстУзлаDOM(УзелDOM)
	
	Если УзелDOM = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстУзлаDOM = УзелDOM.ПервыйДочерний;
	Если ТекстУзлаDOM = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекстУзлаDOM.Данные;
	
КонецФункции

&НаСервере
Функция ИмяВидаОбъектаВВыгрузкеФайлов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("РегистрБухгалтерии", "AccountingRegisters");
	Результат.Вставить("РегистрНакопления", "AccumulationRegisters");
	Результат.Вставить("БизнесПроцесс", "BusinessProcesses");
	Результат.Вставить("РегистрРасчета", "CalculationRegisters");
	Результат.Вставить("Справочник", "Catalogs");
	Результат.Вставить("ПланСчетов", "ChartsOfAccounts");
	Результат.Вставить("ПланВидовРасчета", "ChartsOfCalculationTypes");
	Результат.Вставить("ПланВидовХарактеристик", "ChartsOfCharacteristicTypes");
	Результат.Вставить("ГруппаКоманд", "CommandGroups");
	Результат.Вставить("ОбщийРеквизит", "CommonAttributes");
	Результат.Вставить("ОбщаяКоманда", "CommonCommands");
	Результат.Вставить("ОбщаяФорма", "CommonForms");
	Результат.Вставить("ОбщийМодуль", "CommonModules");
	Результат.Вставить("ОбщаяКартинка", "CommonPictures");
	Результат.Вставить("ОбщийМакет", "CommonTemplates");
	Результат.Вставить("Константа", "Constants");
	Результат.Вставить("Обработка", "DataProcessors");
	Результат.Вставить("ОпределяемыйТип", "DefinedTypes");
	Результат.Вставить("Документ", "Documents");
	Результат.Вставить("ЖурналДокументов", "DocumentJournals");
	Результат.Вставить("НумераторДокументов", "DocumentNumerator");
	Результат.Вставить("Перечисление", "Enums");
	Результат.Вставить("ПодпискаНаСобытие", "EventSubscriptions");
	Результат.Вставить("ПланОбмена", "ExchangePlans");
	Результат.Вставить("КритерийОтбора", "FilterCriteria");
	Результат.Вставить("ФункциональнаяОпция", "FunctionalOptions");
	Результат.Вставить("ПараметрФункциональныхОпций", "FunctionalOptionsParameters");
	Результат.Вставить("РегистрСведений", "InformationRegisters");
	Результат.Вставить("Язык", "Languages");
	Результат.Вставить("ВнешнийОтчет", "Reports");
	Результат.Вставить("Отчет", "Reports");
	Результат.Вставить("Роль", "Roles");
	Результат.Вставить("РегламентноеЗадание", "ScheduledJobs");
	Результат.Вставить("Последовательность", "Sequences");
	Результат.Вставить("ПараметрСеанса", "SessionParameters");
	Результат.Вставить("ХранилищеНастроек", "SettingsStorages");
	Результат.Вставить("Стиль", "Style");
	Результат.Вставить("ЭлементСтиля", "StyleItems");
	Результат.Вставить("Подсистема", "Subsystems");
	Результат.Вставить("Задача", "Tasks");
	Результат.Вставить("WebСервис", "WebServices");
	Результат.Вставить("WSСсылка", "WSReference");
	Результат.Вставить("ПакетXDTO", "XDTOPackages");
	Результат.Вставить("HTTPСервис", "HTTPServices");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КаталогВыгрузкиКонфигурации()
	
	СтрокаЗапускаПлатформы = КаталогПрограммы() + ПолучитьИмяФайла1cv8();
	
	КаталогВыгрузкиXML = КаталогВременныхФайлов();
	
	ШаблонСтрокиЗапуска = """%1"" DESIGNER %2"
		+ " /DumpConfigToFiles ""%3"""
		+ " /N ""%4"""
		+ " /DisableStartupDialogs /DisableStartupMessages /DisableUnrecoverableErrorMessage";
	
	СтрокаЗапуска = СтрШаблон(ШаблонСтрокиЗапуска,
		СтрокаЗапускаПлатформы,
		СтрокаЗапускаИБ(),
		КаталогВыгрузкиXML,
		ТекущийПользователь);
	
	КодВозврата = Неопределено;
	
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда
		Возврат КаталогВыгрузкиXML;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВерсияОбработки = "1.2.0.73";

#КонецОбласти

